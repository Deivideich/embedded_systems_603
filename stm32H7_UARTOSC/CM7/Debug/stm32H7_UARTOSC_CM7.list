
stm32H7_UARTOSC_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d0c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  08005fac  08005fac  00015fac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060a8  080060a8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080060a8  080060a8  000160a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080060b0  080060b0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080060b0  080060b0  000160b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080060b4  080060b4  000160b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  24000000  080060b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000154  24000074  0800612c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240001c8  0800612c  000201c8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011275  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021a7  00000000  00000000  00031317  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bd8  00000000  00000000  000334c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b00  00000000  00000000  00034098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00039a56  00000000  00000000  00034b98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fd21  00000000  00000000  0006e5ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00179768  00000000  00000000  0007e30f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001f7a77  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003780  00000000  00000000  001f7ac8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000074 	.word	0x24000074
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08005f94 	.word	0x08005f94

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000078 	.word	0x24000078
 80002dc:	08005f94 	.word	0x08005f94

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000698:	4b3d      	ldr	r3, [pc, #244]	; (8000790 <SystemInit+0xfc>)
 800069a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800069e:	4a3c      	ldr	r2, [pc, #240]	; (8000790 <SystemInit+0xfc>)
 80006a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006a8:	4b39      	ldr	r3, [pc, #228]	; (8000790 <SystemInit+0xfc>)
 80006aa:	691b      	ldr	r3, [r3, #16]
 80006ac:	4a38      	ldr	r2, [pc, #224]	; (8000790 <SystemInit+0xfc>)
 80006ae:	f043 0310 	orr.w	r3, r3, #16
 80006b2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006b4:	4b37      	ldr	r3, [pc, #220]	; (8000794 <SystemInit+0x100>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f003 030f 	and.w	r3, r3, #15
 80006bc:	2b06      	cmp	r3, #6
 80006be:	d807      	bhi.n	80006d0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006c0:	4b34      	ldr	r3, [pc, #208]	; (8000794 <SystemInit+0x100>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f023 030f 	bic.w	r3, r3, #15
 80006c8:	4a32      	ldr	r2, [pc, #200]	; (8000794 <SystemInit+0x100>)
 80006ca:	f043 0307 	orr.w	r3, r3, #7
 80006ce:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006d0:	4b31      	ldr	r3, [pc, #196]	; (8000798 <SystemInit+0x104>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a30      	ldr	r2, [pc, #192]	; (8000798 <SystemInit+0x104>)
 80006d6:	f043 0301 	orr.w	r3, r3, #1
 80006da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006dc:	4b2e      	ldr	r3, [pc, #184]	; (8000798 <SystemInit+0x104>)
 80006de:	2200      	movs	r2, #0
 80006e0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006e2:	4b2d      	ldr	r3, [pc, #180]	; (8000798 <SystemInit+0x104>)
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	492c      	ldr	r1, [pc, #176]	; (8000798 <SystemInit+0x104>)
 80006e8:	4b2c      	ldr	r3, [pc, #176]	; (800079c <SystemInit+0x108>)
 80006ea:	4013      	ands	r3, r2
 80006ec:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ee:	4b29      	ldr	r3, [pc, #164]	; (8000794 <SystemInit+0x100>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f003 0308 	and.w	r3, r3, #8
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d007      	beq.n	800070a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006fa:	4b26      	ldr	r3, [pc, #152]	; (8000794 <SystemInit+0x100>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	f023 030f 	bic.w	r3, r3, #15
 8000702:	4a24      	ldr	r2, [pc, #144]	; (8000794 <SystemInit+0x100>)
 8000704:	f043 0307 	orr.w	r3, r3, #7
 8000708:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800070a:	4b23      	ldr	r3, [pc, #140]	; (8000798 <SystemInit+0x104>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000710:	4b21      	ldr	r3, [pc, #132]	; (8000798 <SystemInit+0x104>)
 8000712:	2200      	movs	r2, #0
 8000714:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000716:	4b20      	ldr	r3, [pc, #128]	; (8000798 <SystemInit+0x104>)
 8000718:	2200      	movs	r2, #0
 800071a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800071c:	4b1e      	ldr	r3, [pc, #120]	; (8000798 <SystemInit+0x104>)
 800071e:	4a20      	ldr	r2, [pc, #128]	; (80007a0 <SystemInit+0x10c>)
 8000720:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000722:	4b1d      	ldr	r3, [pc, #116]	; (8000798 <SystemInit+0x104>)
 8000724:	4a1f      	ldr	r2, [pc, #124]	; (80007a4 <SystemInit+0x110>)
 8000726:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000728:	4b1b      	ldr	r3, [pc, #108]	; (8000798 <SystemInit+0x104>)
 800072a:	4a1f      	ldr	r2, [pc, #124]	; (80007a8 <SystemInit+0x114>)
 800072c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800072e:	4b1a      	ldr	r3, [pc, #104]	; (8000798 <SystemInit+0x104>)
 8000730:	2200      	movs	r2, #0
 8000732:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000734:	4b18      	ldr	r3, [pc, #96]	; (8000798 <SystemInit+0x104>)
 8000736:	4a1c      	ldr	r2, [pc, #112]	; (80007a8 <SystemInit+0x114>)
 8000738:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800073a:	4b17      	ldr	r3, [pc, #92]	; (8000798 <SystemInit+0x104>)
 800073c:	2200      	movs	r2, #0
 800073e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000740:	4b15      	ldr	r3, [pc, #84]	; (8000798 <SystemInit+0x104>)
 8000742:	4a19      	ldr	r2, [pc, #100]	; (80007a8 <SystemInit+0x114>)
 8000744:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000746:	4b14      	ldr	r3, [pc, #80]	; (8000798 <SystemInit+0x104>)
 8000748:	2200      	movs	r2, #0
 800074a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800074c:	4b12      	ldr	r3, [pc, #72]	; (8000798 <SystemInit+0x104>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a11      	ldr	r2, [pc, #68]	; (8000798 <SystemInit+0x104>)
 8000752:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000756:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000758:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <SystemInit+0x104>)
 800075a:	2200      	movs	r2, #0
 800075c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800075e:	4b13      	ldr	r3, [pc, #76]	; (80007ac <SystemInit+0x118>)
 8000760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000762:	4a12      	ldr	r2, [pc, #72]	; (80007ac <SystemInit+0x118>)
 8000764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000768:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800076a:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <SystemInit+0x11c>)
 800076c:	681a      	ldr	r2, [r3, #0]
 800076e:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <SystemInit+0x120>)
 8000770:	4013      	ands	r3, r2
 8000772:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000776:	d202      	bcs.n	800077e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000778:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <SystemInit+0x124>)
 800077a:	2201      	movs	r2, #1
 800077c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800077e:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <SystemInit+0x128>)
 8000780:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000784:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000786:	bf00      	nop
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr
 8000790:	e000ed00 	.word	0xe000ed00
 8000794:	52002000 	.word	0x52002000
 8000798:	58024400 	.word	0x58024400
 800079c:	eaf6ed7f 	.word	0xeaf6ed7f
 80007a0:	02020200 	.word	0x02020200
 80007a4:	01ff0000 	.word	0x01ff0000
 80007a8:	01010280 	.word	0x01010280
 80007ac:	580000c0 	.word	0x580000c0
 80007b0:	5c001000 	.word	0x5c001000
 80007b4:	ffff0000 	.word	0xffff0000
 80007b8:	51008108 	.word	0x51008108
 80007bc:	52004000 	.word	0x52004000

080007c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007c0:	b5b0      	push	{r4, r5, r7, lr}
 80007c2:	b08e      	sub	sp, #56	; 0x38
 80007c4:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80007c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007ca:	637b      	str	r3, [r7, #52]	; 0x34
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80007cc:	bf00      	nop
 80007ce:	4b36      	ldr	r3, [pc, #216]	; (80008a8 <main+0xe8>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d004      	beq.n	80007e4 <main+0x24>
 80007da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007dc:	1e5a      	subs	r2, r3, #1
 80007de:	637a      	str	r2, [r7, #52]	; 0x34
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	dcf4      	bgt.n	80007ce <main+0xe>
  if ( timeout < 0 )
 80007e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	da01      	bge.n	80007ee <main+0x2e>
  {
  Error_Handler();
 80007ea:	f000 f9ff 	bl	8000bec <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ee:	f000 fbd7 	bl	8000fa0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007f2:	f000 f861 	bl	80008b8 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80007f6:	4b2c      	ldr	r3, [pc, #176]	; (80008a8 <main+0xe8>)
 80007f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007fc:	4a2a      	ldr	r2, [pc, #168]	; (80008a8 <main+0xe8>)
 80007fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000802:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000806:	4b28      	ldr	r3, [pc, #160]	; (80008a8 <main+0xe8>)
 8000808:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800080c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000810:	607b      	str	r3, [r7, #4]
 8000812:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000814:	2000      	movs	r0, #0
 8000816:	f000 ff4d 	bl	80016b4 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800081a:	2100      	movs	r1, #0
 800081c:	2000      	movs	r0, #0
 800081e:	f000 ff63 	bl	80016e8 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000822:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000826:	637b      	str	r3, [r7, #52]	; 0x34
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000828:	bf00      	nop
 800082a:	4b1f      	ldr	r3, [pc, #124]	; (80008a8 <main+0xe8>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000832:	2b00      	cmp	r3, #0
 8000834:	d104      	bne.n	8000840 <main+0x80>
 8000836:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000838:	1e5a      	subs	r2, r3, #1
 800083a:	637a      	str	r2, [r7, #52]	; 0x34
 800083c:	2b00      	cmp	r3, #0
 800083e:	dcf4      	bgt.n	800082a <main+0x6a>
if ( timeout < 0 )
 8000840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000842:	2b00      	cmp	r3, #0
 8000844:	da01      	bge.n	800084a <main+0x8a>
{
Error_Handler();
 8000846:	f000 f9d1 	bl	8000bec <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800084a:	f000 f947 	bl	8000adc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800084e:	f000 f8f9 	bl	8000a44 <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 8000852:	f000 f8ab 	bl	80009ac <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  uint8_t m;
  uint8_t rm[] = "c";
 8000856:	2363      	movs	r3, #99	; 0x63
 8000858:	85bb      	strh	r3, [r7, #44]	; 0x2c
  char myString[] = "David Demian Max Neil Equipo 1\r\n";
 800085a:	4b14      	ldr	r3, [pc, #80]	; (80008ac <main+0xec>)
 800085c:	f107 0408 	add.w	r4, r7, #8
 8000860:	461d      	mov	r5, r3
 8000862:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000864:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000866:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000868:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800086a:	682b      	ldr	r3, [r5, #0]
 800086c:	7023      	strb	r3, [r4, #0]
  int length = strlen(myString);
 800086e:	f107 0308 	add.w	r3, r7, #8
 8000872:	4618      	mov	r0, r3
 8000874:	f7ff fd34 	bl	80002e0 <strlen>
 8000878:	4603      	mov	r3, r0
 800087a:	633b      	str	r3, [r7, #48]	; 0x30
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 800087c:	2101      	movs	r1, #1
 800087e:	480c      	ldr	r0, [pc, #48]	; (80008b0 <main+0xf0>)
 8000880:	f000 fefd 	bl	800167e <HAL_GPIO_TogglePin>
//	  	  HAL_UART_Receive(&huart3, rm, sizeof(rm), HAL_MAX_DELAY);
	  	  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000884:	2101      	movs	r1, #1
 8000886:	480a      	ldr	r0, [pc, #40]	; (80008b0 <main+0xf0>)
 8000888:	f000 fef9 	bl	800167e <HAL_GPIO_TogglePin>
//	  			if (rm[i] > 'z') {
//	  				rm[i] = 'a' + (rm[i] - 'z' - 1);
//	  			}
//	  		}

	  	  printf("%s\r\n",rm);
 800088c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000890:	4619      	mov	r1, r3
 8000892:	4808      	ldr	r0, [pc, #32]	; (80008b4 <main+0xf4>)
 8000894:	f004 fbf0 	bl	8005078 <iprintf>
	  	  HAL_Delay(100);
 8000898:	2064      	movs	r0, #100	; 0x64
 800089a:	f000 fc13 	bl	80010c4 <HAL_Delay>
//	  for(int i = 0; i<=length;i++){
//		  m = myString[i];
//		  HAL_UART_Transmit(&huart2, &m, sizeof(m),HAL_MAX_DELAY);
//		  HAL_Delay(200);
//	  }
	  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 800089e:	2101      	movs	r1, #1
 80008a0:	4803      	ldr	r0, [pc, #12]	; (80008b0 <main+0xf0>)
 80008a2:	f000 feec 	bl	800167e <HAL_GPIO_TogglePin>
  {
 80008a6:	e7e9      	b.n	800087c <main+0xbc>
 80008a8:	58024400 	.word	0x58024400
 80008ac:	08005fb4 	.word	0x08005fb4
 80008b0:	58020400 	.word	0x58020400
 80008b4:	08005fac 	.word	0x08005fac

080008b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b09c      	sub	sp, #112	; 0x70
 80008bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008c2:	224c      	movs	r2, #76	; 0x4c
 80008c4:	2100      	movs	r1, #0
 80008c6:	4618      	mov	r0, r3
 80008c8:	f004 fbce 	bl	8005068 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008cc:	1d3b      	adds	r3, r7, #4
 80008ce:	2220      	movs	r2, #32
 80008d0:	2100      	movs	r1, #0
 80008d2:	4618      	mov	r0, r3
 80008d4:	f004 fbc8 	bl	8005068 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80008d8:	2004      	movs	r0, #4
 80008da:	f000 ff19 	bl	8001710 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80008de:	2300      	movs	r3, #0
 80008e0:	603b      	str	r3, [r7, #0]
 80008e2:	4b30      	ldr	r3, [pc, #192]	; (80009a4 <SystemClock_Config+0xec>)
 80008e4:	699b      	ldr	r3, [r3, #24]
 80008e6:	4a2f      	ldr	r2, [pc, #188]	; (80009a4 <SystemClock_Config+0xec>)
 80008e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008ec:	6193      	str	r3, [r2, #24]
 80008ee:	4b2d      	ldr	r3, [pc, #180]	; (80009a4 <SystemClock_Config+0xec>)
 80008f0:	699b      	ldr	r3, [r3, #24]
 80008f2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008f6:	603b      	str	r3, [r7, #0]
 80008f8:	4b2b      	ldr	r3, [pc, #172]	; (80009a8 <SystemClock_Config+0xf0>)
 80008fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008fc:	4a2a      	ldr	r2, [pc, #168]	; (80009a8 <SystemClock_Config+0xf0>)
 80008fe:	f043 0301 	orr.w	r3, r3, #1
 8000902:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000904:	4b28      	ldr	r3, [pc, #160]	; (80009a8 <SystemClock_Config+0xf0>)
 8000906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000908:	f003 0301 	and.w	r3, r3, #1
 800090c:	603b      	str	r3, [r7, #0]
 800090e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000910:	bf00      	nop
 8000912:	4b24      	ldr	r3, [pc, #144]	; (80009a4 <SystemClock_Config+0xec>)
 8000914:	699b      	ldr	r3, [r3, #24]
 8000916:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800091a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800091e:	d1f8      	bne.n	8000912 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000920:	2301      	movs	r3, #1
 8000922:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000924:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000928:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800092a:	2302      	movs	r3, #2
 800092c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800092e:	2302      	movs	r3, #2
 8000930:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000932:	2302      	movs	r3, #2
 8000934:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 240;
 8000936:	23f0      	movs	r3, #240	; 0xf0
 8000938:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800093a:	2302      	movs	r3, #2
 800093c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800093e:	2302      	movs	r3, #2
 8000940:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000942:	2302      	movs	r3, #2
 8000944:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000946:	2308      	movs	r3, #8
 8000948:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800094a:	2300      	movs	r3, #0
 800094c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800094e:	2300      	movs	r3, #0
 8000950:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000952:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000956:	4618      	mov	r0, r3
 8000958:	f000 ff34 	bl	80017c4 <HAL_RCC_OscConfig>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000962:	f000 f943 	bl	8000bec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000966:	233f      	movs	r3, #63	; 0x3f
 8000968:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800096a:	2303      	movs	r3, #3
 800096c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800096e:	2300      	movs	r3, #0
 8000970:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000972:	2308      	movs	r3, #8
 8000974:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000976:	2340      	movs	r3, #64	; 0x40
 8000978:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800097a:	2340      	movs	r3, #64	; 0x40
 800097c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800097e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000982:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000984:	2340      	movs	r3, #64	; 0x40
 8000986:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000988:	1d3b      	adds	r3, r7, #4
 800098a:	2104      	movs	r1, #4
 800098c:	4618      	mov	r0, r3
 800098e:	f001 fb47 	bl	8002020 <HAL_RCC_ClockConfig>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000998:	f000 f928 	bl	8000bec <Error_Handler>
  }
}
 800099c:	bf00      	nop
 800099e:	3770      	adds	r7, #112	; 0x70
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	58024800 	.word	0x58024800
 80009a8:	58000400 	.word	0x58000400

080009ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009b0:	4b22      	ldr	r3, [pc, #136]	; (8000a3c <MX_USART2_UART_Init+0x90>)
 80009b2:	4a23      	ldr	r2, [pc, #140]	; (8000a40 <MX_USART2_UART_Init+0x94>)
 80009b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80009b6:	4b21      	ldr	r3, [pc, #132]	; (8000a3c <MX_USART2_UART_Init+0x90>)
 80009b8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80009bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009be:	4b1f      	ldr	r3, [pc, #124]	; (8000a3c <MX_USART2_UART_Init+0x90>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009c4:	4b1d      	ldr	r3, [pc, #116]	; (8000a3c <MX_USART2_UART_Init+0x90>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009ca:	4b1c      	ldr	r3, [pc, #112]	; (8000a3c <MX_USART2_UART_Init+0x90>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009d0:	4b1a      	ldr	r3, [pc, #104]	; (8000a3c <MX_USART2_UART_Init+0x90>)
 80009d2:	220c      	movs	r2, #12
 80009d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009d6:	4b19      	ldr	r3, [pc, #100]	; (8000a3c <MX_USART2_UART_Init+0x90>)
 80009d8:	2200      	movs	r2, #0
 80009da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009dc:	4b17      	ldr	r3, [pc, #92]	; (8000a3c <MX_USART2_UART_Init+0x90>)
 80009de:	2200      	movs	r2, #0
 80009e0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009e2:	4b16      	ldr	r3, [pc, #88]	; (8000a3c <MX_USART2_UART_Init+0x90>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009e8:	4b14      	ldr	r3, [pc, #80]	; (8000a3c <MX_USART2_UART_Init+0x90>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009ee:	4b13      	ldr	r3, [pc, #76]	; (8000a3c <MX_USART2_UART_Init+0x90>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009f4:	4811      	ldr	r0, [pc, #68]	; (8000a3c <MX_USART2_UART_Init+0x90>)
 80009f6:	f003 fa07 	bl	8003e08 <HAL_UART_Init>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000a00:	f000 f8f4 	bl	8000bec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a04:	2100      	movs	r1, #0
 8000a06:	480d      	ldr	r0, [pc, #52]	; (8000a3c <MX_USART2_UART_Init+0x90>)
 8000a08:	f004 fa3a 	bl	8004e80 <HAL_UARTEx_SetTxFifoThreshold>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000a12:	f000 f8eb 	bl	8000bec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a16:	2100      	movs	r1, #0
 8000a18:	4808      	ldr	r0, [pc, #32]	; (8000a3c <MX_USART2_UART_Init+0x90>)
 8000a1a:	f004 fa6f 	bl	8004efc <HAL_UARTEx_SetRxFifoThreshold>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000a24:	f000 f8e2 	bl	8000bec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000a28:	4804      	ldr	r0, [pc, #16]	; (8000a3c <MX_USART2_UART_Init+0x90>)
 8000a2a:	f004 f9f0 	bl	8004e0e <HAL_UARTEx_DisableFifoMode>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000a34:	f000 f8da 	bl	8000bec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a38:	bf00      	nop
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	24000090 	.word	0x24000090
 8000a40:	40004400 	.word	0x40004400

08000a44 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a48:	4b22      	ldr	r3, [pc, #136]	; (8000ad4 <MX_USART3_UART_Init+0x90>)
 8000a4a:	4a23      	ldr	r2, [pc, #140]	; (8000ad8 <MX_USART3_UART_Init+0x94>)
 8000a4c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000a4e:	4b21      	ldr	r3, [pc, #132]	; (8000ad4 <MX_USART3_UART_Init+0x90>)
 8000a50:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000a54:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a56:	4b1f      	ldr	r3, [pc, #124]	; (8000ad4 <MX_USART3_UART_Init+0x90>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a5c:	4b1d      	ldr	r3, [pc, #116]	; (8000ad4 <MX_USART3_UART_Init+0x90>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a62:	4b1c      	ldr	r3, [pc, #112]	; (8000ad4 <MX_USART3_UART_Init+0x90>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a68:	4b1a      	ldr	r3, [pc, #104]	; (8000ad4 <MX_USART3_UART_Init+0x90>)
 8000a6a:	220c      	movs	r2, #12
 8000a6c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a6e:	4b19      	ldr	r3, [pc, #100]	; (8000ad4 <MX_USART3_UART_Init+0x90>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a74:	4b17      	ldr	r3, [pc, #92]	; (8000ad4 <MX_USART3_UART_Init+0x90>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a7a:	4b16      	ldr	r3, [pc, #88]	; (8000ad4 <MX_USART3_UART_Init+0x90>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a80:	4b14      	ldr	r3, [pc, #80]	; (8000ad4 <MX_USART3_UART_Init+0x90>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a86:	4b13      	ldr	r3, [pc, #76]	; (8000ad4 <MX_USART3_UART_Init+0x90>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a8c:	4811      	ldr	r0, [pc, #68]	; (8000ad4 <MX_USART3_UART_Init+0x90>)
 8000a8e:	f003 f9bb 	bl	8003e08 <HAL_UART_Init>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000a98:	f000 f8a8 	bl	8000bec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	480d      	ldr	r0, [pc, #52]	; (8000ad4 <MX_USART3_UART_Init+0x90>)
 8000aa0:	f004 f9ee 	bl	8004e80 <HAL_UARTEx_SetTxFifoThreshold>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000aaa:	f000 f89f 	bl	8000bec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000aae:	2100      	movs	r1, #0
 8000ab0:	4808      	ldr	r0, [pc, #32]	; (8000ad4 <MX_USART3_UART_Init+0x90>)
 8000ab2:	f004 fa23 	bl	8004efc <HAL_UARTEx_SetRxFifoThreshold>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000abc:	f000 f896 	bl	8000bec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000ac0:	4804      	ldr	r0, [pc, #16]	; (8000ad4 <MX_USART3_UART_Init+0x90>)
 8000ac2:	f004 f9a4 	bl	8004e0e <HAL_UARTEx_DisableFifoMode>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000acc:	f000 f88e 	bl	8000bec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ad0:	bf00      	nop
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	24000120 	.word	0x24000120
 8000ad8:	40004800 	.word	0x40004800

08000adc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b08a      	sub	sp, #40	; 0x28
 8000ae0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae2:	f107 0314 	add.w	r3, r7, #20
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	601a      	str	r2, [r3, #0]
 8000aea:	605a      	str	r2, [r3, #4]
 8000aec:	609a      	str	r2, [r3, #8]
 8000aee:	60da      	str	r2, [r3, #12]
 8000af0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000af2:	4b3a      	ldr	r3, [pc, #232]	; (8000bdc <MX_GPIO_Init+0x100>)
 8000af4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000af8:	4a38      	ldr	r2, [pc, #224]	; (8000bdc <MX_GPIO_Init+0x100>)
 8000afa:	f043 0304 	orr.w	r3, r3, #4
 8000afe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b02:	4b36      	ldr	r3, [pc, #216]	; (8000bdc <MX_GPIO_Init+0x100>)
 8000b04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b08:	f003 0304 	and.w	r3, r3, #4
 8000b0c:	613b      	str	r3, [r7, #16]
 8000b0e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b10:	4b32      	ldr	r3, [pc, #200]	; (8000bdc <MX_GPIO_Init+0x100>)
 8000b12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b16:	4a31      	ldr	r2, [pc, #196]	; (8000bdc <MX_GPIO_Init+0x100>)
 8000b18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b1c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b20:	4b2e      	ldr	r3, [pc, #184]	; (8000bdc <MX_GPIO_Init+0x100>)
 8000b22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b2a:	60fb      	str	r3, [r7, #12]
 8000b2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b2e:	4b2b      	ldr	r3, [pc, #172]	; (8000bdc <MX_GPIO_Init+0x100>)
 8000b30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b34:	4a29      	ldr	r2, [pc, #164]	; (8000bdc <MX_GPIO_Init+0x100>)
 8000b36:	f043 0302 	orr.w	r3, r3, #2
 8000b3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b3e:	4b27      	ldr	r3, [pc, #156]	; (8000bdc <MX_GPIO_Init+0x100>)
 8000b40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b44:	f003 0302 	and.w	r3, r3, #2
 8000b48:	60bb      	str	r3, [r7, #8]
 8000b4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b4c:	4b23      	ldr	r3, [pc, #140]	; (8000bdc <MX_GPIO_Init+0x100>)
 8000b4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b52:	4a22      	ldr	r2, [pc, #136]	; (8000bdc <MX_GPIO_Init+0x100>)
 8000b54:	f043 0308 	orr.w	r3, r3, #8
 8000b58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b5c:	4b1f      	ldr	r3, [pc, #124]	; (8000bdc <MX_GPIO_Init+0x100>)
 8000b5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b62:	f003 0308 	and.w	r3, r3, #8
 8000b66:	607b      	str	r3, [r7, #4]
 8000b68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	f244 0101 	movw	r1, #16385	; 0x4001
 8000b70:	481b      	ldr	r0, [pc, #108]	; (8000be0 <MX_GPIO_Init+0x104>)
 8000b72:	f000 fd6b 	bl	800164c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Pin_TEST_GPIO_Port, Pin_TEST_Pin, GPIO_PIN_RESET);
 8000b76:	2200      	movs	r2, #0
 8000b78:	2110      	movs	r1, #16
 8000b7a:	481a      	ldr	r0, [pc, #104]	; (8000be4 <MX_GPIO_Init+0x108>)
 8000b7c:	f000 fd66 	bl	800164c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b86:	2300      	movs	r3, #0
 8000b88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b8e:	f107 0314 	add.w	r3, r7, #20
 8000b92:	4619      	mov	r1, r3
 8000b94:	4814      	ldr	r0, [pc, #80]	; (8000be8 <MX_GPIO_Init+0x10c>)
 8000b96:	f000 fba9 	bl	80012ec <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000b9a:	f244 0301 	movw	r3, #16385	; 0x4001
 8000b9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bac:	f107 0314 	add.w	r3, r7, #20
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	480b      	ldr	r0, [pc, #44]	; (8000be0 <MX_GPIO_Init+0x104>)
 8000bb4:	f000 fb9a 	bl	80012ec <HAL_GPIO_Init>

  /*Configure GPIO pin : Pin_TEST_Pin */
  GPIO_InitStruct.Pin = Pin_TEST_Pin;
 8000bb8:	2310      	movs	r3, #16
 8000bba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Pin_TEST_GPIO_Port, &GPIO_InitStruct);
 8000bc8:	f107 0314 	add.w	r3, r7, #20
 8000bcc:	4619      	mov	r1, r3
 8000bce:	4805      	ldr	r0, [pc, #20]	; (8000be4 <MX_GPIO_Init+0x108>)
 8000bd0:	f000 fb8c 	bl	80012ec <HAL_GPIO_Init>

}
 8000bd4:	bf00      	nop
 8000bd6:	3728      	adds	r7, #40	; 0x28
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	58024400 	.word	0x58024400
 8000be0:	58020400 	.word	0x58020400
 8000be4:	58020c00 	.word	0x58020c00
 8000be8:	58020800 	.word	0x58020800

08000bec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bf0:	b672      	cpsid	i
}
 8000bf2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bf4:	e7fe      	b.n	8000bf4 <Error_Handler+0x8>
	...

08000bf8 <__io_putchar>:
/**
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE {
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  /* write a character to the USART3 and Loop until the end of transmission*/
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000c00:	1d39      	adds	r1, r7, #4
 8000c02:	f04f 33ff 	mov.w	r3, #4294967295
 8000c06:	2201      	movs	r2, #1
 8000c08:	4803      	ldr	r0, [pc, #12]	; (8000c18 <__io_putchar+0x20>)
 8000c0a:	f003 f94d 	bl	8003ea8 <HAL_UART_Transmit>
  return ch;
 8000c0e:	687b      	ldr	r3, [r7, #4]
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	3708      	adds	r7, #8
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	24000120 	.word	0x24000120

08000c1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c22:	4b0a      	ldr	r3, [pc, #40]	; (8000c4c <HAL_MspInit+0x30>)
 8000c24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c28:	4a08      	ldr	r2, [pc, #32]	; (8000c4c <HAL_MspInit+0x30>)
 8000c2a:	f043 0302 	orr.w	r3, r3, #2
 8000c2e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000c32:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <HAL_MspInit+0x30>)
 8000c34:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c38:	f003 0302 	and.w	r3, r3, #2
 8000c3c:	607b      	str	r3, [r7, #4]
 8000c3e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c40:	bf00      	nop
 8000c42:	370c      	adds	r7, #12
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr
 8000c4c:	58024400 	.word	0x58024400

08000c50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b0ba      	sub	sp, #232	; 0xe8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c58:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	609a      	str	r2, [r3, #8]
 8000c64:	60da      	str	r2, [r3, #12]
 8000c66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c68:	f107 0318 	add.w	r3, r7, #24
 8000c6c:	22bc      	movs	r2, #188	; 0xbc
 8000c6e:	2100      	movs	r1, #0
 8000c70:	4618      	mov	r0, r3
 8000c72:	f004 f9f9 	bl	8005068 <memset>
  if(huart->Instance==USART2)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4a49      	ldr	r2, [pc, #292]	; (8000da0 <HAL_UART_MspInit+0x150>)
 8000c7c:	4293      	cmp	r3, r2
 8000c7e:	d142      	bne.n	8000d06 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c80:	2302      	movs	r3, #2
 8000c82:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000c84:	2300      	movs	r3, #0
 8000c86:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c8a:	f107 0318 	add.w	r3, r7, #24
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f001 fd52 	bl	8002738 <HAL_RCCEx_PeriphCLKConfig>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000c9a:	f7ff ffa7 	bl	8000bec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c9e:	4b41      	ldr	r3, [pc, #260]	; (8000da4 <HAL_UART_MspInit+0x154>)
 8000ca0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ca4:	4a3f      	ldr	r2, [pc, #252]	; (8000da4 <HAL_UART_MspInit+0x154>)
 8000ca6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000caa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000cae:	4b3d      	ldr	r3, [pc, #244]	; (8000da4 <HAL_UART_MspInit+0x154>)
 8000cb0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000cb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cb8:	617b      	str	r3, [r7, #20]
 8000cba:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cbc:	4b39      	ldr	r3, [pc, #228]	; (8000da4 <HAL_UART_MspInit+0x154>)
 8000cbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cc2:	4a38      	ldr	r2, [pc, #224]	; (8000da4 <HAL_UART_MspInit+0x154>)
 8000cc4:	f043 0308 	orr.w	r3, r3, #8
 8000cc8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ccc:	4b35      	ldr	r3, [pc, #212]	; (8000da4 <HAL_UART_MspInit+0x154>)
 8000cce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cd2:	f003 0308 	and.w	r3, r3, #8
 8000cd6:	613b      	str	r3, [r7, #16]
 8000cd8:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000cda:	2360      	movs	r3, #96	; 0x60
 8000cdc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cec:	2300      	movs	r3, #0
 8000cee:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cf2:	2307      	movs	r3, #7
 8000cf4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cf8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	482a      	ldr	r0, [pc, #168]	; (8000da8 <HAL_UART_MspInit+0x158>)
 8000d00:	f000 faf4 	bl	80012ec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d04:	e047      	b.n	8000d96 <HAL_UART_MspInit+0x146>
  else if(huart->Instance==USART3)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4a28      	ldr	r2, [pc, #160]	; (8000dac <HAL_UART_MspInit+0x15c>)
 8000d0c:	4293      	cmp	r3, r2
 8000d0e:	d142      	bne.n	8000d96 <HAL_UART_MspInit+0x146>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d10:	2302      	movs	r3, #2
 8000d12:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000d14:	2300      	movs	r3, #0
 8000d16:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d1a:	f107 0318 	add.w	r3, r7, #24
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f001 fd0a 	bl	8002738 <HAL_RCCEx_PeriphCLKConfig>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <HAL_UART_MspInit+0xde>
      Error_Handler();
 8000d2a:	f7ff ff5f 	bl	8000bec <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d2e:	4b1d      	ldr	r3, [pc, #116]	; (8000da4 <HAL_UART_MspInit+0x154>)
 8000d30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d34:	4a1b      	ldr	r2, [pc, #108]	; (8000da4 <HAL_UART_MspInit+0x154>)
 8000d36:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d3a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000d3e:	4b19      	ldr	r3, [pc, #100]	; (8000da4 <HAL_UART_MspInit+0x154>)
 8000d40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d48:	60fb      	str	r3, [r7, #12]
 8000d4a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d4c:	4b15      	ldr	r3, [pc, #84]	; (8000da4 <HAL_UART_MspInit+0x154>)
 8000d4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d52:	4a14      	ldr	r2, [pc, #80]	; (8000da4 <HAL_UART_MspInit+0x154>)
 8000d54:	f043 0308 	orr.w	r3, r3, #8
 8000d58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d5c:	4b11      	ldr	r3, [pc, #68]	; (8000da4 <HAL_UART_MspInit+0x154>)
 8000d5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d62:	f003 0308 	and.w	r3, r3, #8
 8000d66:	60bb      	str	r3, [r7, #8]
 8000d68:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000d6a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d6e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d72:	2302      	movs	r3, #2
 8000d74:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d84:	2307      	movs	r3, #7
 8000d86:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d8a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4805      	ldr	r0, [pc, #20]	; (8000da8 <HAL_UART_MspInit+0x158>)
 8000d92:	f000 faab 	bl	80012ec <HAL_GPIO_Init>
}
 8000d96:	bf00      	nop
 8000d98:	37e8      	adds	r7, #232	; 0xe8
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	40004400 	.word	0x40004400
 8000da4:	58024400 	.word	0x58024400
 8000da8:	58020c00 	.word	0x58020c00
 8000dac:	40004800 	.word	0x40004800

08000db0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000db4:	e7fe      	b.n	8000db4 <NMI_Handler+0x4>

08000db6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000db6:	b480      	push	{r7}
 8000db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dba:	e7fe      	b.n	8000dba <HardFault_Handler+0x4>

08000dbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dc0:	e7fe      	b.n	8000dc0 <MemManage_Handler+0x4>

08000dc2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dc6:	e7fe      	b.n	8000dc6 <BusFault_Handler+0x4>

08000dc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dcc:	e7fe      	b.n	8000dcc <UsageFault_Handler+0x4>

08000dce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dd2:	bf00      	nop
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr

08000ddc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000de0:	bf00      	nop
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr

08000dea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dea:	b480      	push	{r7}
 8000dec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dee:	bf00      	nop
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr

08000df8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dfc:	f000 f942 	bl	8001084 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e00:	bf00      	nop
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b086      	sub	sp, #24
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	60f8      	str	r0, [r7, #12]
 8000e0c:	60b9      	str	r1, [r7, #8]
 8000e0e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e10:	2300      	movs	r3, #0
 8000e12:	617b      	str	r3, [r7, #20]
 8000e14:	e00a      	b.n	8000e2c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000e16:	f3af 8000 	nop.w
 8000e1a:	4601      	mov	r1, r0
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	1c5a      	adds	r2, r3, #1
 8000e20:	60ba      	str	r2, [r7, #8]
 8000e22:	b2ca      	uxtb	r2, r1
 8000e24:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	3301      	adds	r3, #1
 8000e2a:	617b      	str	r3, [r7, #20]
 8000e2c:	697a      	ldr	r2, [r7, #20]
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	429a      	cmp	r2, r3
 8000e32:	dbf0      	blt.n	8000e16 <_read+0x12>
	}

return len;
 8000e34:	687b      	ldr	r3, [r7, #4]
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	3718      	adds	r7, #24
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}

08000e3e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e3e:	b580      	push	{r7, lr}
 8000e40:	b086      	sub	sp, #24
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	60f8      	str	r0, [r7, #12]
 8000e46:	60b9      	str	r1, [r7, #8]
 8000e48:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	617b      	str	r3, [r7, #20]
 8000e4e:	e009      	b.n	8000e64 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	1c5a      	adds	r2, r3, #1
 8000e54:	60ba      	str	r2, [r7, #8]
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f7ff fecd 	bl	8000bf8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	3301      	adds	r3, #1
 8000e62:	617b      	str	r3, [r7, #20]
 8000e64:	697a      	ldr	r2, [r7, #20]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	429a      	cmp	r2, r3
 8000e6a:	dbf1      	blt.n	8000e50 <_write+0x12>
	}
	return len;
 8000e6c:	687b      	ldr	r3, [r7, #4]
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3718      	adds	r7, #24
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <_close>:

int _close(int file)
{
 8000e76:	b480      	push	{r7}
 8000e78:	b083      	sub	sp, #12
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	6078      	str	r0, [r7, #4]
	return -1;
 8000e7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	370c      	adds	r7, #12
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr

08000e8e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e8e:	b480      	push	{r7}
 8000e90:	b083      	sub	sp, #12
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	6078      	str	r0, [r7, #4]
 8000e96:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e9e:	605a      	str	r2, [r3, #4]
	return 0;
 8000ea0:	2300      	movs	r3, #0
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	370c      	adds	r7, #12
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr

08000eae <_isatty>:

int _isatty(int file)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	b083      	sub	sp, #12
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	6078      	str	r0, [r7, #4]
	return 1;
 8000eb6:	2301      	movs	r3, #1
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	370c      	adds	r7, #12
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr

08000ec4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b085      	sub	sp, #20
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	60f8      	str	r0, [r7, #12]
 8000ecc:	60b9      	str	r1, [r7, #8]
 8000ece:	607a      	str	r2, [r7, #4]
	return 0;
 8000ed0:	2300      	movs	r3, #0
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3714      	adds	r7, #20
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
	...

08000ee0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b086      	sub	sp, #24
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ee8:	4a14      	ldr	r2, [pc, #80]	; (8000f3c <_sbrk+0x5c>)
 8000eea:	4b15      	ldr	r3, [pc, #84]	; (8000f40 <_sbrk+0x60>)
 8000eec:	1ad3      	subs	r3, r2, r3
 8000eee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ef4:	4b13      	ldr	r3, [pc, #76]	; (8000f44 <_sbrk+0x64>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d102      	bne.n	8000f02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000efc:	4b11      	ldr	r3, [pc, #68]	; (8000f44 <_sbrk+0x64>)
 8000efe:	4a12      	ldr	r2, [pc, #72]	; (8000f48 <_sbrk+0x68>)
 8000f00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f02:	4b10      	ldr	r3, [pc, #64]	; (8000f44 <_sbrk+0x64>)
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4413      	add	r3, r2
 8000f0a:	693a      	ldr	r2, [r7, #16]
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	d207      	bcs.n	8000f20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f10:	f004 f880 	bl	8005014 <__errno>
 8000f14:	4603      	mov	r3, r0
 8000f16:	220c      	movs	r2, #12
 8000f18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f1e:	e009      	b.n	8000f34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f20:	4b08      	ldr	r3, [pc, #32]	; (8000f44 <_sbrk+0x64>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f26:	4b07      	ldr	r3, [pc, #28]	; (8000f44 <_sbrk+0x64>)
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4413      	add	r3, r2
 8000f2e:	4a05      	ldr	r2, [pc, #20]	; (8000f44 <_sbrk+0x64>)
 8000f30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f32:	68fb      	ldr	r3, [r7, #12]
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	3718      	adds	r7, #24
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	24080000 	.word	0x24080000
 8000f40:	00000400 	.word	0x00000400
 8000f44:	240001b0 	.word	0x240001b0
 8000f48:	240001c8 	.word	0x240001c8

08000f4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000f4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f84 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f50:	f7ff fba0 	bl	8000694 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f54:	480c      	ldr	r0, [pc, #48]	; (8000f88 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f56:	490d      	ldr	r1, [pc, #52]	; (8000f8c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f58:	4a0d      	ldr	r2, [pc, #52]	; (8000f90 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f5c:	e002      	b.n	8000f64 <LoopCopyDataInit>

08000f5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f62:	3304      	adds	r3, #4

08000f64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f68:	d3f9      	bcc.n	8000f5e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f6a:	4a0a      	ldr	r2, [pc, #40]	; (8000f94 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f6c:	4c0a      	ldr	r4, [pc, #40]	; (8000f98 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f70:	e001      	b.n	8000f76 <LoopFillZerobss>

08000f72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f74:	3204      	adds	r2, #4

08000f76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f78:	d3fb      	bcc.n	8000f72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f7a:	f004 f851 	bl	8005020 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f7e:	f7ff fc1f 	bl	80007c0 <main>
  bx  lr
 8000f82:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f84:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000f88:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000f8c:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 8000f90:	080060b8 	.word	0x080060b8
  ldr r2, =_sbss
 8000f94:	24000074 	.word	0x24000074
  ldr r4, =_ebss
 8000f98:	240001c8 	.word	0x240001c8

08000f9c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f9c:	e7fe      	b.n	8000f9c <ADC3_IRQHandler>
	...

08000fa0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fa6:	2003      	movs	r0, #3
 8000fa8:	f000 f96e 	bl	8001288 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000fac:	f001 f9ee 	bl	800238c <HAL_RCC_GetSysClockFreq>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	4b15      	ldr	r3, [pc, #84]	; (8001008 <HAL_Init+0x68>)
 8000fb4:	699b      	ldr	r3, [r3, #24]
 8000fb6:	0a1b      	lsrs	r3, r3, #8
 8000fb8:	f003 030f 	and.w	r3, r3, #15
 8000fbc:	4913      	ldr	r1, [pc, #76]	; (800100c <HAL_Init+0x6c>)
 8000fbe:	5ccb      	ldrb	r3, [r1, r3]
 8000fc0:	f003 031f 	and.w	r3, r3, #31
 8000fc4:	fa22 f303 	lsr.w	r3, r2, r3
 8000fc8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000fca:	4b0f      	ldr	r3, [pc, #60]	; (8001008 <HAL_Init+0x68>)
 8000fcc:	699b      	ldr	r3, [r3, #24]
 8000fce:	f003 030f 	and.w	r3, r3, #15
 8000fd2:	4a0e      	ldr	r2, [pc, #56]	; (800100c <HAL_Init+0x6c>)
 8000fd4:	5cd3      	ldrb	r3, [r2, r3]
 8000fd6:	f003 031f 	and.w	r3, r3, #31
 8000fda:	687a      	ldr	r2, [r7, #4]
 8000fdc:	fa22 f303 	lsr.w	r3, r2, r3
 8000fe0:	4a0b      	ldr	r2, [pc, #44]	; (8001010 <HAL_Init+0x70>)
 8000fe2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000fe4:	4a0b      	ldr	r2, [pc, #44]	; (8001014 <HAL_Init+0x74>)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fea:	200f      	movs	r0, #15
 8000fec:	f000 f814 	bl	8001018 <HAL_InitTick>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e002      	b.n	8001000 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000ffa:	f7ff fe0f 	bl	8000c1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ffe:	2300      	movs	r3, #0
}
 8001000:	4618      	mov	r0, r3
 8001002:	3708      	adds	r7, #8
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	58024400 	.word	0x58024400
 800100c:	08005fd8 	.word	0x08005fd8
 8001010:	24000004 	.word	0x24000004
 8001014:	24000000 	.word	0x24000000

08001018 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001020:	4b15      	ldr	r3, [pc, #84]	; (8001078 <HAL_InitTick+0x60>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d101      	bne.n	800102c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001028:	2301      	movs	r3, #1
 800102a:	e021      	b.n	8001070 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800102c:	4b13      	ldr	r3, [pc, #76]	; (800107c <HAL_InitTick+0x64>)
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	4b11      	ldr	r3, [pc, #68]	; (8001078 <HAL_InitTick+0x60>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	4619      	mov	r1, r3
 8001036:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800103a:	fbb3 f3f1 	udiv	r3, r3, r1
 800103e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001042:	4618      	mov	r0, r3
 8001044:	f000 f945 	bl	80012d2 <HAL_SYSTICK_Config>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800104e:	2301      	movs	r3, #1
 8001050:	e00e      	b.n	8001070 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2b0f      	cmp	r3, #15
 8001056:	d80a      	bhi.n	800106e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001058:	2200      	movs	r2, #0
 800105a:	6879      	ldr	r1, [r7, #4]
 800105c:	f04f 30ff 	mov.w	r0, #4294967295
 8001060:	f000 f91d 	bl	800129e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001064:	4a06      	ldr	r2, [pc, #24]	; (8001080 <HAL_InitTick+0x68>)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800106a:	2300      	movs	r3, #0
 800106c:	e000      	b.n	8001070 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800106e:	2301      	movs	r3, #1
}
 8001070:	4618      	mov	r0, r3
 8001072:	3708      	adds	r7, #8
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	2400000c 	.word	0x2400000c
 800107c:	24000000 	.word	0x24000000
 8001080:	24000008 	.word	0x24000008

08001084 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001088:	4b06      	ldr	r3, [pc, #24]	; (80010a4 <HAL_IncTick+0x20>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	461a      	mov	r2, r3
 800108e:	4b06      	ldr	r3, [pc, #24]	; (80010a8 <HAL_IncTick+0x24>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4413      	add	r3, r2
 8001094:	4a04      	ldr	r2, [pc, #16]	; (80010a8 <HAL_IncTick+0x24>)
 8001096:	6013      	str	r3, [r2, #0]
}
 8001098:	bf00      	nop
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	2400000c 	.word	0x2400000c
 80010a8:	240001b4 	.word	0x240001b4

080010ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  return uwTick;
 80010b0:	4b03      	ldr	r3, [pc, #12]	; (80010c0 <HAL_GetTick+0x14>)
 80010b2:	681b      	ldr	r3, [r3, #0]
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	240001b4 	.word	0x240001b4

080010c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010cc:	f7ff ffee 	bl	80010ac <HAL_GetTick>
 80010d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010dc:	d005      	beq.n	80010ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010de:	4b0a      	ldr	r3, [pc, #40]	; (8001108 <HAL_Delay+0x44>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	461a      	mov	r2, r3
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	4413      	add	r3, r2
 80010e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010ea:	bf00      	nop
 80010ec:	f7ff ffde 	bl	80010ac <HAL_GetTick>
 80010f0:	4602      	mov	r2, r0
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	68fa      	ldr	r2, [r7, #12]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d8f7      	bhi.n	80010ec <HAL_Delay+0x28>
  {
  }
}
 80010fc:	bf00      	nop
 80010fe:	bf00      	nop
 8001100:	3710      	adds	r7, #16
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	2400000c 	.word	0x2400000c

0800110c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001110:	4b03      	ldr	r3, [pc, #12]	; (8001120 <HAL_GetREVID+0x14>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	0c1b      	lsrs	r3, r3, #16
}
 8001116:	4618      	mov	r0, r3
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	5c001000 	.word	0x5c001000

08001124 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001124:	b480      	push	{r7}
 8001126:	b085      	sub	sp, #20
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	f003 0307 	and.w	r3, r3, #7
 8001132:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001134:	4b0b      	ldr	r3, [pc, #44]	; (8001164 <__NVIC_SetPriorityGrouping+0x40>)
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800113a:	68ba      	ldr	r2, [r7, #8]
 800113c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001140:	4013      	ands	r3, r2
 8001142:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800114c:	4b06      	ldr	r3, [pc, #24]	; (8001168 <__NVIC_SetPriorityGrouping+0x44>)
 800114e:	4313      	orrs	r3, r2
 8001150:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001152:	4a04      	ldr	r2, [pc, #16]	; (8001164 <__NVIC_SetPriorityGrouping+0x40>)
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	60d3      	str	r3, [r2, #12]
}
 8001158:	bf00      	nop
 800115a:	3714      	adds	r7, #20
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr
 8001164:	e000ed00 	.word	0xe000ed00
 8001168:	05fa0000 	.word	0x05fa0000

0800116c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001170:	4b04      	ldr	r3, [pc, #16]	; (8001184 <__NVIC_GetPriorityGrouping+0x18>)
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	0a1b      	lsrs	r3, r3, #8
 8001176:	f003 0307 	and.w	r3, r3, #7
}
 800117a:	4618      	mov	r0, r3
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr
 8001184:	e000ed00 	.word	0xe000ed00

08001188 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	4603      	mov	r3, r0
 8001190:	6039      	str	r1, [r7, #0]
 8001192:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001194:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001198:	2b00      	cmp	r3, #0
 800119a:	db0a      	blt.n	80011b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	b2da      	uxtb	r2, r3
 80011a0:	490c      	ldr	r1, [pc, #48]	; (80011d4 <__NVIC_SetPriority+0x4c>)
 80011a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011a6:	0112      	lsls	r2, r2, #4
 80011a8:	b2d2      	uxtb	r2, r2
 80011aa:	440b      	add	r3, r1
 80011ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011b0:	e00a      	b.n	80011c8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	b2da      	uxtb	r2, r3
 80011b6:	4908      	ldr	r1, [pc, #32]	; (80011d8 <__NVIC_SetPriority+0x50>)
 80011b8:	88fb      	ldrh	r3, [r7, #6]
 80011ba:	f003 030f 	and.w	r3, r3, #15
 80011be:	3b04      	subs	r3, #4
 80011c0:	0112      	lsls	r2, r2, #4
 80011c2:	b2d2      	uxtb	r2, r2
 80011c4:	440b      	add	r3, r1
 80011c6:	761a      	strb	r2, [r3, #24]
}
 80011c8:	bf00      	nop
 80011ca:	370c      	adds	r7, #12
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr
 80011d4:	e000e100 	.word	0xe000e100
 80011d8:	e000ed00 	.word	0xe000ed00

080011dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011dc:	b480      	push	{r7}
 80011de:	b089      	sub	sp, #36	; 0x24
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	60f8      	str	r0, [r7, #12]
 80011e4:	60b9      	str	r1, [r7, #8]
 80011e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	f003 0307 	and.w	r3, r3, #7
 80011ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	f1c3 0307 	rsb	r3, r3, #7
 80011f6:	2b04      	cmp	r3, #4
 80011f8:	bf28      	it	cs
 80011fa:	2304      	movcs	r3, #4
 80011fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	3304      	adds	r3, #4
 8001202:	2b06      	cmp	r3, #6
 8001204:	d902      	bls.n	800120c <NVIC_EncodePriority+0x30>
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	3b03      	subs	r3, #3
 800120a:	e000      	b.n	800120e <NVIC_EncodePriority+0x32>
 800120c:	2300      	movs	r3, #0
 800120e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001210:	f04f 32ff 	mov.w	r2, #4294967295
 8001214:	69bb      	ldr	r3, [r7, #24]
 8001216:	fa02 f303 	lsl.w	r3, r2, r3
 800121a:	43da      	mvns	r2, r3
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	401a      	ands	r2, r3
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001224:	f04f 31ff 	mov.w	r1, #4294967295
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	fa01 f303 	lsl.w	r3, r1, r3
 800122e:	43d9      	mvns	r1, r3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001234:	4313      	orrs	r3, r2
         );
}
 8001236:	4618      	mov	r0, r3
 8001238:	3724      	adds	r7, #36	; 0x24
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
	...

08001244 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	3b01      	subs	r3, #1
 8001250:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001254:	d301      	bcc.n	800125a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001256:	2301      	movs	r3, #1
 8001258:	e00f      	b.n	800127a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800125a:	4a0a      	ldr	r2, [pc, #40]	; (8001284 <SysTick_Config+0x40>)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	3b01      	subs	r3, #1
 8001260:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001262:	210f      	movs	r1, #15
 8001264:	f04f 30ff 	mov.w	r0, #4294967295
 8001268:	f7ff ff8e 	bl	8001188 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800126c:	4b05      	ldr	r3, [pc, #20]	; (8001284 <SysTick_Config+0x40>)
 800126e:	2200      	movs	r2, #0
 8001270:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001272:	4b04      	ldr	r3, [pc, #16]	; (8001284 <SysTick_Config+0x40>)
 8001274:	2207      	movs	r2, #7
 8001276:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001278:	2300      	movs	r3, #0
}
 800127a:	4618      	mov	r0, r3
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	e000e010 	.word	0xe000e010

08001288 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	f7ff ff47 	bl	8001124 <__NVIC_SetPriorityGrouping>
}
 8001296:	bf00      	nop
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}

0800129e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800129e:	b580      	push	{r7, lr}
 80012a0:	b086      	sub	sp, #24
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	4603      	mov	r3, r0
 80012a6:	60b9      	str	r1, [r7, #8]
 80012a8:	607a      	str	r2, [r7, #4]
 80012aa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012ac:	f7ff ff5e 	bl	800116c <__NVIC_GetPriorityGrouping>
 80012b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012b2:	687a      	ldr	r2, [r7, #4]
 80012b4:	68b9      	ldr	r1, [r7, #8]
 80012b6:	6978      	ldr	r0, [r7, #20]
 80012b8:	f7ff ff90 	bl	80011dc <NVIC_EncodePriority>
 80012bc:	4602      	mov	r2, r0
 80012be:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80012c2:	4611      	mov	r1, r2
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff ff5f 	bl	8001188 <__NVIC_SetPriority>
}
 80012ca:	bf00      	nop
 80012cc:	3718      	adds	r7, #24
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}

080012d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012d2:	b580      	push	{r7, lr}
 80012d4:	b082      	sub	sp, #8
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f7ff ffb2 	bl	8001244 <SysTick_Config>
 80012e0:	4603      	mov	r3, r0
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
	...

080012ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b089      	sub	sp, #36	; 0x24
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80012f6:	2300      	movs	r3, #0
 80012f8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80012fa:	4b89      	ldr	r3, [pc, #548]	; (8001520 <HAL_GPIO_Init+0x234>)
 80012fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80012fe:	e194      	b.n	800162a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	2101      	movs	r1, #1
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	fa01 f303 	lsl.w	r3, r1, r3
 800130c:	4013      	ands	r3, r2
 800130e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	2b00      	cmp	r3, #0
 8001314:	f000 8186 	beq.w	8001624 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f003 0303 	and.w	r3, r3, #3
 8001320:	2b01      	cmp	r3, #1
 8001322:	d005      	beq.n	8001330 <HAL_GPIO_Init+0x44>
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f003 0303 	and.w	r3, r3, #3
 800132c:	2b02      	cmp	r3, #2
 800132e:	d130      	bne.n	8001392 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	005b      	lsls	r3, r3, #1
 800133a:	2203      	movs	r2, #3
 800133c:	fa02 f303 	lsl.w	r3, r2, r3
 8001340:	43db      	mvns	r3, r3
 8001342:	69ba      	ldr	r2, [r7, #24]
 8001344:	4013      	ands	r3, r2
 8001346:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	68da      	ldr	r2, [r3, #12]
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	005b      	lsls	r3, r3, #1
 8001350:	fa02 f303 	lsl.w	r3, r2, r3
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	4313      	orrs	r3, r2
 8001358:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001366:	2201      	movs	r2, #1
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	fa02 f303 	lsl.w	r3, r2, r3
 800136e:	43db      	mvns	r3, r3
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	4013      	ands	r3, r2
 8001374:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	091b      	lsrs	r3, r3, #4
 800137c:	f003 0201 	and.w	r2, r3, #1
 8001380:	69fb      	ldr	r3, [r7, #28]
 8001382:	fa02 f303 	lsl.w	r3, r2, r3
 8001386:	69ba      	ldr	r2, [r7, #24]
 8001388:	4313      	orrs	r3, r2
 800138a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	69ba      	ldr	r2, [r7, #24]
 8001390:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	f003 0303 	and.w	r3, r3, #3
 800139a:	2b03      	cmp	r3, #3
 800139c:	d017      	beq.n	80013ce <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	68db      	ldr	r3, [r3, #12]
 80013a2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	005b      	lsls	r3, r3, #1
 80013a8:	2203      	movs	r2, #3
 80013aa:	fa02 f303 	lsl.w	r3, r2, r3
 80013ae:	43db      	mvns	r3, r3
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	4013      	ands	r3, r2
 80013b4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	689a      	ldr	r2, [r3, #8]
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	005b      	lsls	r3, r3, #1
 80013be:	fa02 f303 	lsl.w	r3, r2, r3
 80013c2:	69ba      	ldr	r2, [r7, #24]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	69ba      	ldr	r2, [r7, #24]
 80013cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f003 0303 	and.w	r3, r3, #3
 80013d6:	2b02      	cmp	r3, #2
 80013d8:	d123      	bne.n	8001422 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	08da      	lsrs	r2, r3, #3
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	3208      	adds	r2, #8
 80013e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80013e8:	69fb      	ldr	r3, [r7, #28]
 80013ea:	f003 0307 	and.w	r3, r3, #7
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	220f      	movs	r2, #15
 80013f2:	fa02 f303 	lsl.w	r3, r2, r3
 80013f6:	43db      	mvns	r3, r3
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	4013      	ands	r3, r2
 80013fc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	691a      	ldr	r2, [r3, #16]
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	f003 0307 	and.w	r3, r3, #7
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	fa02 f303 	lsl.w	r3, r2, r3
 800140e:	69ba      	ldr	r2, [r7, #24]
 8001410:	4313      	orrs	r3, r2
 8001412:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	08da      	lsrs	r2, r3, #3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	3208      	adds	r2, #8
 800141c:	69b9      	ldr	r1, [r7, #24]
 800141e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	005b      	lsls	r3, r3, #1
 800142c:	2203      	movs	r2, #3
 800142e:	fa02 f303 	lsl.w	r3, r2, r3
 8001432:	43db      	mvns	r3, r3
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	4013      	ands	r3, r2
 8001438:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	f003 0203 	and.w	r2, r3, #3
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	005b      	lsls	r3, r3, #1
 8001446:	fa02 f303 	lsl.w	r3, r2, r3
 800144a:	69ba      	ldr	r2, [r7, #24]
 800144c:	4313      	orrs	r3, r2
 800144e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	69ba      	ldr	r2, [r7, #24]
 8001454:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800145e:	2b00      	cmp	r3, #0
 8001460:	f000 80e0 	beq.w	8001624 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001464:	4b2f      	ldr	r3, [pc, #188]	; (8001524 <HAL_GPIO_Init+0x238>)
 8001466:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800146a:	4a2e      	ldr	r2, [pc, #184]	; (8001524 <HAL_GPIO_Init+0x238>)
 800146c:	f043 0302 	orr.w	r3, r3, #2
 8001470:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001474:	4b2b      	ldr	r3, [pc, #172]	; (8001524 <HAL_GPIO_Init+0x238>)
 8001476:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800147a:	f003 0302 	and.w	r3, r3, #2
 800147e:	60fb      	str	r3, [r7, #12]
 8001480:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001482:	4a29      	ldr	r2, [pc, #164]	; (8001528 <HAL_GPIO_Init+0x23c>)
 8001484:	69fb      	ldr	r3, [r7, #28]
 8001486:	089b      	lsrs	r3, r3, #2
 8001488:	3302      	adds	r3, #2
 800148a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800148e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	f003 0303 	and.w	r3, r3, #3
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	220f      	movs	r2, #15
 800149a:	fa02 f303 	lsl.w	r3, r2, r3
 800149e:	43db      	mvns	r3, r3
 80014a0:	69ba      	ldr	r2, [r7, #24]
 80014a2:	4013      	ands	r3, r2
 80014a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4a20      	ldr	r2, [pc, #128]	; (800152c <HAL_GPIO_Init+0x240>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d052      	beq.n	8001554 <HAL_GPIO_Init+0x268>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4a1f      	ldr	r2, [pc, #124]	; (8001530 <HAL_GPIO_Init+0x244>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d031      	beq.n	800151a <HAL_GPIO_Init+0x22e>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4a1e      	ldr	r2, [pc, #120]	; (8001534 <HAL_GPIO_Init+0x248>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d02b      	beq.n	8001516 <HAL_GPIO_Init+0x22a>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4a1d      	ldr	r2, [pc, #116]	; (8001538 <HAL_GPIO_Init+0x24c>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d025      	beq.n	8001512 <HAL_GPIO_Init+0x226>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4a1c      	ldr	r2, [pc, #112]	; (800153c <HAL_GPIO_Init+0x250>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d01f      	beq.n	800150e <HAL_GPIO_Init+0x222>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4a1b      	ldr	r2, [pc, #108]	; (8001540 <HAL_GPIO_Init+0x254>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d019      	beq.n	800150a <HAL_GPIO_Init+0x21e>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4a1a      	ldr	r2, [pc, #104]	; (8001544 <HAL_GPIO_Init+0x258>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d013      	beq.n	8001506 <HAL_GPIO_Init+0x21a>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4a19      	ldr	r2, [pc, #100]	; (8001548 <HAL_GPIO_Init+0x25c>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d00d      	beq.n	8001502 <HAL_GPIO_Init+0x216>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4a18      	ldr	r2, [pc, #96]	; (800154c <HAL_GPIO_Init+0x260>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d007      	beq.n	80014fe <HAL_GPIO_Init+0x212>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4a17      	ldr	r2, [pc, #92]	; (8001550 <HAL_GPIO_Init+0x264>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d101      	bne.n	80014fa <HAL_GPIO_Init+0x20e>
 80014f6:	2309      	movs	r3, #9
 80014f8:	e02d      	b.n	8001556 <HAL_GPIO_Init+0x26a>
 80014fa:	230a      	movs	r3, #10
 80014fc:	e02b      	b.n	8001556 <HAL_GPIO_Init+0x26a>
 80014fe:	2308      	movs	r3, #8
 8001500:	e029      	b.n	8001556 <HAL_GPIO_Init+0x26a>
 8001502:	2307      	movs	r3, #7
 8001504:	e027      	b.n	8001556 <HAL_GPIO_Init+0x26a>
 8001506:	2306      	movs	r3, #6
 8001508:	e025      	b.n	8001556 <HAL_GPIO_Init+0x26a>
 800150a:	2305      	movs	r3, #5
 800150c:	e023      	b.n	8001556 <HAL_GPIO_Init+0x26a>
 800150e:	2304      	movs	r3, #4
 8001510:	e021      	b.n	8001556 <HAL_GPIO_Init+0x26a>
 8001512:	2303      	movs	r3, #3
 8001514:	e01f      	b.n	8001556 <HAL_GPIO_Init+0x26a>
 8001516:	2302      	movs	r3, #2
 8001518:	e01d      	b.n	8001556 <HAL_GPIO_Init+0x26a>
 800151a:	2301      	movs	r3, #1
 800151c:	e01b      	b.n	8001556 <HAL_GPIO_Init+0x26a>
 800151e:	bf00      	nop
 8001520:	58000080 	.word	0x58000080
 8001524:	58024400 	.word	0x58024400
 8001528:	58000400 	.word	0x58000400
 800152c:	58020000 	.word	0x58020000
 8001530:	58020400 	.word	0x58020400
 8001534:	58020800 	.word	0x58020800
 8001538:	58020c00 	.word	0x58020c00
 800153c:	58021000 	.word	0x58021000
 8001540:	58021400 	.word	0x58021400
 8001544:	58021800 	.word	0x58021800
 8001548:	58021c00 	.word	0x58021c00
 800154c:	58022000 	.word	0x58022000
 8001550:	58022400 	.word	0x58022400
 8001554:	2300      	movs	r3, #0
 8001556:	69fa      	ldr	r2, [r7, #28]
 8001558:	f002 0203 	and.w	r2, r2, #3
 800155c:	0092      	lsls	r2, r2, #2
 800155e:	4093      	lsls	r3, r2
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	4313      	orrs	r3, r2
 8001564:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001566:	4938      	ldr	r1, [pc, #224]	; (8001648 <HAL_GPIO_Init+0x35c>)
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	089b      	lsrs	r3, r3, #2
 800156c:	3302      	adds	r3, #2
 800156e:	69ba      	ldr	r2, [r7, #24]
 8001570:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001574:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	43db      	mvns	r3, r3
 8001580:	69ba      	ldr	r2, [r7, #24]
 8001582:	4013      	ands	r3, r2
 8001584:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d003      	beq.n	800159a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001592:	69ba      	ldr	r2, [r7, #24]
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	4313      	orrs	r3, r2
 8001598:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800159a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800159e:	69bb      	ldr	r3, [r7, #24]
 80015a0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80015a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	43db      	mvns	r3, r3
 80015ae:	69ba      	ldr	r2, [r7, #24]
 80015b0:	4013      	ands	r3, r2
 80015b2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d003      	beq.n	80015c8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80015c0:	69ba      	ldr	r2, [r7, #24]
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	4313      	orrs	r3, r2
 80015c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80015c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015cc:	69bb      	ldr	r3, [r7, #24]
 80015ce:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	43db      	mvns	r3, r3
 80015da:	69ba      	ldr	r2, [r7, #24]
 80015dc:	4013      	ands	r3, r2
 80015de:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d003      	beq.n	80015f4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80015ec:	69ba      	ldr	r2, [r7, #24]
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	69ba      	ldr	r2, [r7, #24]
 80015f8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	43db      	mvns	r3, r3
 8001604:	69ba      	ldr	r2, [r7, #24]
 8001606:	4013      	ands	r3, r2
 8001608:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d003      	beq.n	800161e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001616:	69ba      	ldr	r2, [r7, #24]
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	4313      	orrs	r3, r2
 800161c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	69ba      	ldr	r2, [r7, #24]
 8001622:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	3301      	adds	r3, #1
 8001628:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	fa22 f303 	lsr.w	r3, r2, r3
 8001634:	2b00      	cmp	r3, #0
 8001636:	f47f ae63 	bne.w	8001300 <HAL_GPIO_Init+0x14>
  }
}
 800163a:	bf00      	nop
 800163c:	bf00      	nop
 800163e:	3724      	adds	r7, #36	; 0x24
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr
 8001648:	58000400 	.word	0x58000400

0800164c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	460b      	mov	r3, r1
 8001656:	807b      	strh	r3, [r7, #2]
 8001658:	4613      	mov	r3, r2
 800165a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800165c:	787b      	ldrb	r3, [r7, #1]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d003      	beq.n	800166a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001662:	887a      	ldrh	r2, [r7, #2]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001668:	e003      	b.n	8001672 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800166a:	887b      	ldrh	r3, [r7, #2]
 800166c:	041a      	lsls	r2, r3, #16
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	619a      	str	r2, [r3, #24]
}
 8001672:	bf00      	nop
 8001674:	370c      	adds	r7, #12
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr

0800167e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800167e:	b480      	push	{r7}
 8001680:	b085      	sub	sp, #20
 8001682:	af00      	add	r7, sp, #0
 8001684:	6078      	str	r0, [r7, #4]
 8001686:	460b      	mov	r3, r1
 8001688:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	695b      	ldr	r3, [r3, #20]
 800168e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001690:	887a      	ldrh	r2, [r7, #2]
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	4013      	ands	r3, r2
 8001696:	041a      	lsls	r2, r3, #16
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	43d9      	mvns	r1, r3
 800169c:	887b      	ldrh	r3, [r7, #2]
 800169e:	400b      	ands	r3, r1
 80016a0:	431a      	orrs	r2, r3
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	619a      	str	r2, [r3, #24]
}
 80016a6:	bf00      	nop
 80016a8:	3714      	adds	r7, #20
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
	...

080016b4 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80016bc:	4a08      	ldr	r2, [pc, #32]	; (80016e0 <HAL_HSEM_FastTake+0x2c>)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	3320      	adds	r3, #32
 80016c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016c6:	4a07      	ldr	r2, [pc, #28]	; (80016e4 <HAL_HSEM_FastTake+0x30>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d101      	bne.n	80016d0 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80016cc:	2300      	movs	r3, #0
 80016ce:	e000      	b.n	80016d2 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	370c      	adds	r7, #12
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	58026400 	.word	0x58026400
 80016e4:	80000300 	.word	0x80000300

080016e8 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80016f2:	4906      	ldr	r1, [pc, #24]	; (800170c <HAL_HSEM_Release+0x24>)
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001700:	bf00      	nop
 8001702:	370c      	adds	r7, #12
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr
 800170c:	58026400 	.word	0x58026400

08001710 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001718:	4b29      	ldr	r3, [pc, #164]	; (80017c0 <HAL_PWREx_ConfigSupply+0xb0>)
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	f003 0307 	and.w	r3, r3, #7
 8001720:	2b06      	cmp	r3, #6
 8001722:	d00a      	beq.n	800173a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001724:	4b26      	ldr	r3, [pc, #152]	; (80017c0 <HAL_PWREx_ConfigSupply+0xb0>)
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800172c:	687a      	ldr	r2, [r7, #4]
 800172e:	429a      	cmp	r2, r3
 8001730:	d001      	beq.n	8001736 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e040      	b.n	80017b8 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001736:	2300      	movs	r3, #0
 8001738:	e03e      	b.n	80017b8 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800173a:	4b21      	ldr	r3, [pc, #132]	; (80017c0 <HAL_PWREx_ConfigSupply+0xb0>)
 800173c:	68db      	ldr	r3, [r3, #12]
 800173e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001742:	491f      	ldr	r1, [pc, #124]	; (80017c0 <HAL_PWREx_ConfigSupply+0xb0>)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	4313      	orrs	r3, r2
 8001748:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800174a:	f7ff fcaf 	bl	80010ac <HAL_GetTick>
 800174e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001750:	e009      	b.n	8001766 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001752:	f7ff fcab 	bl	80010ac <HAL_GetTick>
 8001756:	4602      	mov	r2, r0
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	1ad3      	subs	r3, r2, r3
 800175c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001760:	d901      	bls.n	8001766 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	e028      	b.n	80017b8 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001766:	4b16      	ldr	r3, [pc, #88]	; (80017c0 <HAL_PWREx_ConfigSupply+0xb0>)
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800176e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001772:	d1ee      	bne.n	8001752 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2b1e      	cmp	r3, #30
 8001778:	d008      	beq.n	800178c <HAL_PWREx_ConfigSupply+0x7c>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2b2e      	cmp	r3, #46	; 0x2e
 800177e:	d005      	beq.n	800178c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2b1d      	cmp	r3, #29
 8001784:	d002      	beq.n	800178c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2b2d      	cmp	r3, #45	; 0x2d
 800178a:	d114      	bne.n	80017b6 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800178c:	f7ff fc8e 	bl	80010ac <HAL_GetTick>
 8001790:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001792:	e009      	b.n	80017a8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001794:	f7ff fc8a 	bl	80010ac <HAL_GetTick>
 8001798:	4602      	mov	r2, r0
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80017a2:	d901      	bls.n	80017a8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e007      	b.n	80017b8 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80017a8:	4b05      	ldr	r3, [pc, #20]	; (80017c0 <HAL_PWREx_ConfigSupply+0xb0>)
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017b4:	d1ee      	bne.n	8001794 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80017b6:	2300      	movs	r3, #0
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3710      	adds	r7, #16
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	58024800 	.word	0x58024800

080017c4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b08c      	sub	sp, #48	; 0x30
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d102      	bne.n	80017d8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	f000 bc1d 	b.w	8002012 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 0301 	and.w	r3, r3, #1
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	f000 8087 	beq.w	80018f4 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017e6:	4b99      	ldr	r3, [pc, #612]	; (8001a4c <HAL_RCC_OscConfig+0x288>)
 80017e8:	691b      	ldr	r3, [r3, #16]
 80017ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80017ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80017f0:	4b96      	ldr	r3, [pc, #600]	; (8001a4c <HAL_RCC_OscConfig+0x288>)
 80017f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017f4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80017f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017f8:	2b10      	cmp	r3, #16
 80017fa:	d007      	beq.n	800180c <HAL_RCC_OscConfig+0x48>
 80017fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017fe:	2b18      	cmp	r3, #24
 8001800:	d110      	bne.n	8001824 <HAL_RCC_OscConfig+0x60>
 8001802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001804:	f003 0303 	and.w	r3, r3, #3
 8001808:	2b02      	cmp	r3, #2
 800180a:	d10b      	bne.n	8001824 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800180c:	4b8f      	ldr	r3, [pc, #572]	; (8001a4c <HAL_RCC_OscConfig+0x288>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001814:	2b00      	cmp	r3, #0
 8001816:	d06c      	beq.n	80018f2 <HAL_RCC_OscConfig+0x12e>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d168      	bne.n	80018f2 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8001820:	2301      	movs	r3, #1
 8001822:	e3f6      	b.n	8002012 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800182c:	d106      	bne.n	800183c <HAL_RCC_OscConfig+0x78>
 800182e:	4b87      	ldr	r3, [pc, #540]	; (8001a4c <HAL_RCC_OscConfig+0x288>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a86      	ldr	r2, [pc, #536]	; (8001a4c <HAL_RCC_OscConfig+0x288>)
 8001834:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001838:	6013      	str	r3, [r2, #0]
 800183a:	e02e      	b.n	800189a <HAL_RCC_OscConfig+0xd6>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d10c      	bne.n	800185e <HAL_RCC_OscConfig+0x9a>
 8001844:	4b81      	ldr	r3, [pc, #516]	; (8001a4c <HAL_RCC_OscConfig+0x288>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a80      	ldr	r2, [pc, #512]	; (8001a4c <HAL_RCC_OscConfig+0x288>)
 800184a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800184e:	6013      	str	r3, [r2, #0]
 8001850:	4b7e      	ldr	r3, [pc, #504]	; (8001a4c <HAL_RCC_OscConfig+0x288>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a7d      	ldr	r2, [pc, #500]	; (8001a4c <HAL_RCC_OscConfig+0x288>)
 8001856:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800185a:	6013      	str	r3, [r2, #0]
 800185c:	e01d      	b.n	800189a <HAL_RCC_OscConfig+0xd6>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001866:	d10c      	bne.n	8001882 <HAL_RCC_OscConfig+0xbe>
 8001868:	4b78      	ldr	r3, [pc, #480]	; (8001a4c <HAL_RCC_OscConfig+0x288>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a77      	ldr	r2, [pc, #476]	; (8001a4c <HAL_RCC_OscConfig+0x288>)
 800186e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001872:	6013      	str	r3, [r2, #0]
 8001874:	4b75      	ldr	r3, [pc, #468]	; (8001a4c <HAL_RCC_OscConfig+0x288>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a74      	ldr	r2, [pc, #464]	; (8001a4c <HAL_RCC_OscConfig+0x288>)
 800187a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800187e:	6013      	str	r3, [r2, #0]
 8001880:	e00b      	b.n	800189a <HAL_RCC_OscConfig+0xd6>
 8001882:	4b72      	ldr	r3, [pc, #456]	; (8001a4c <HAL_RCC_OscConfig+0x288>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a71      	ldr	r2, [pc, #452]	; (8001a4c <HAL_RCC_OscConfig+0x288>)
 8001888:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800188c:	6013      	str	r3, [r2, #0]
 800188e:	4b6f      	ldr	r3, [pc, #444]	; (8001a4c <HAL_RCC_OscConfig+0x288>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a6e      	ldr	r2, [pc, #440]	; (8001a4c <HAL_RCC_OscConfig+0x288>)
 8001894:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001898:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d013      	beq.n	80018ca <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018a2:	f7ff fc03 	bl	80010ac <HAL_GetTick>
 80018a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80018a8:	e008      	b.n	80018bc <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018aa:	f7ff fbff 	bl	80010ac <HAL_GetTick>
 80018ae:	4602      	mov	r2, r0
 80018b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	2b64      	cmp	r3, #100	; 0x64
 80018b6:	d901      	bls.n	80018bc <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80018b8:	2303      	movs	r3, #3
 80018ba:	e3aa      	b.n	8002012 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80018bc:	4b63      	ldr	r3, [pc, #396]	; (8001a4c <HAL_RCC_OscConfig+0x288>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d0f0      	beq.n	80018aa <HAL_RCC_OscConfig+0xe6>
 80018c8:	e014      	b.n	80018f4 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ca:	f7ff fbef 	bl	80010ac <HAL_GetTick>
 80018ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80018d0:	e008      	b.n	80018e4 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018d2:	f7ff fbeb 	bl	80010ac <HAL_GetTick>
 80018d6:	4602      	mov	r2, r0
 80018d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018da:	1ad3      	subs	r3, r2, r3
 80018dc:	2b64      	cmp	r3, #100	; 0x64
 80018de:	d901      	bls.n	80018e4 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80018e0:	2303      	movs	r3, #3
 80018e2:	e396      	b.n	8002012 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80018e4:	4b59      	ldr	r3, [pc, #356]	; (8001a4c <HAL_RCC_OscConfig+0x288>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d1f0      	bne.n	80018d2 <HAL_RCC_OscConfig+0x10e>
 80018f0:	e000      	b.n	80018f4 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018f2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f003 0302 	and.w	r3, r3, #2
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	f000 80cb 	beq.w	8001a98 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001902:	4b52      	ldr	r3, [pc, #328]	; (8001a4c <HAL_RCC_OscConfig+0x288>)
 8001904:	691b      	ldr	r3, [r3, #16]
 8001906:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800190a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800190c:	4b4f      	ldr	r3, [pc, #316]	; (8001a4c <HAL_RCC_OscConfig+0x288>)
 800190e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001910:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001912:	6a3b      	ldr	r3, [r7, #32]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d007      	beq.n	8001928 <HAL_RCC_OscConfig+0x164>
 8001918:	6a3b      	ldr	r3, [r7, #32]
 800191a:	2b18      	cmp	r3, #24
 800191c:	d156      	bne.n	80019cc <HAL_RCC_OscConfig+0x208>
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	f003 0303 	and.w	r3, r3, #3
 8001924:	2b00      	cmp	r3, #0
 8001926:	d151      	bne.n	80019cc <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001928:	4b48      	ldr	r3, [pc, #288]	; (8001a4c <HAL_RCC_OscConfig+0x288>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 0304 	and.w	r3, r3, #4
 8001930:	2b00      	cmp	r3, #0
 8001932:	d005      	beq.n	8001940 <HAL_RCC_OscConfig+0x17c>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d101      	bne.n	8001940 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e368      	b.n	8002012 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001940:	4b42      	ldr	r3, [pc, #264]	; (8001a4c <HAL_RCC_OscConfig+0x288>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f023 0219 	bic.w	r2, r3, #25
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	493f      	ldr	r1, [pc, #252]	; (8001a4c <HAL_RCC_OscConfig+0x288>)
 800194e:	4313      	orrs	r3, r2
 8001950:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001952:	f7ff fbab 	bl	80010ac <HAL_GetTick>
 8001956:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001958:	e008      	b.n	800196c <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800195a:	f7ff fba7 	bl	80010ac <HAL_GetTick>
 800195e:	4602      	mov	r2, r0
 8001960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	2b02      	cmp	r3, #2
 8001966:	d901      	bls.n	800196c <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8001968:	2303      	movs	r3, #3
 800196a:	e352      	b.n	8002012 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800196c:	4b37      	ldr	r3, [pc, #220]	; (8001a4c <HAL_RCC_OscConfig+0x288>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0304 	and.w	r3, r3, #4
 8001974:	2b00      	cmp	r3, #0
 8001976:	d0f0      	beq.n	800195a <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001978:	f7ff fbc8 	bl	800110c <HAL_GetREVID>
 800197c:	4603      	mov	r3, r0
 800197e:	f241 0203 	movw	r2, #4099	; 0x1003
 8001982:	4293      	cmp	r3, r2
 8001984:	d817      	bhi.n	80019b6 <HAL_RCC_OscConfig+0x1f2>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	691b      	ldr	r3, [r3, #16]
 800198a:	2b40      	cmp	r3, #64	; 0x40
 800198c:	d108      	bne.n	80019a0 <HAL_RCC_OscConfig+0x1dc>
 800198e:	4b2f      	ldr	r3, [pc, #188]	; (8001a4c <HAL_RCC_OscConfig+0x288>)
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001996:	4a2d      	ldr	r2, [pc, #180]	; (8001a4c <HAL_RCC_OscConfig+0x288>)
 8001998:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800199c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800199e:	e07b      	b.n	8001a98 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019a0:	4b2a      	ldr	r3, [pc, #168]	; (8001a4c <HAL_RCC_OscConfig+0x288>)
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	691b      	ldr	r3, [r3, #16]
 80019ac:	031b      	lsls	r3, r3, #12
 80019ae:	4927      	ldr	r1, [pc, #156]	; (8001a4c <HAL_RCC_OscConfig+0x288>)
 80019b0:	4313      	orrs	r3, r2
 80019b2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019b4:	e070      	b.n	8001a98 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019b6:	4b25      	ldr	r3, [pc, #148]	; (8001a4c <HAL_RCC_OscConfig+0x288>)
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	691b      	ldr	r3, [r3, #16]
 80019c2:	061b      	lsls	r3, r3, #24
 80019c4:	4921      	ldr	r1, [pc, #132]	; (8001a4c <HAL_RCC_OscConfig+0x288>)
 80019c6:	4313      	orrs	r3, r2
 80019c8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019ca:	e065      	b.n	8001a98 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d048      	beq.n	8001a66 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80019d4:	4b1d      	ldr	r3, [pc, #116]	; (8001a4c <HAL_RCC_OscConfig+0x288>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f023 0219 	bic.w	r2, r3, #25
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	491a      	ldr	r1, [pc, #104]	; (8001a4c <HAL_RCC_OscConfig+0x288>)
 80019e2:	4313      	orrs	r3, r2
 80019e4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019e6:	f7ff fb61 	bl	80010ac <HAL_GetTick>
 80019ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019ec:	e008      	b.n	8001a00 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019ee:	f7ff fb5d 	bl	80010ac <HAL_GetTick>
 80019f2:	4602      	mov	r2, r0
 80019f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	d901      	bls.n	8001a00 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80019fc:	2303      	movs	r3, #3
 80019fe:	e308      	b.n	8002012 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a00:	4b12      	ldr	r3, [pc, #72]	; (8001a4c <HAL_RCC_OscConfig+0x288>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 0304 	and.w	r3, r3, #4
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d0f0      	beq.n	80019ee <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a0c:	f7ff fb7e 	bl	800110c <HAL_GetREVID>
 8001a10:	4603      	mov	r3, r0
 8001a12:	f241 0203 	movw	r2, #4099	; 0x1003
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d81a      	bhi.n	8001a50 <HAL_RCC_OscConfig+0x28c>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	691b      	ldr	r3, [r3, #16]
 8001a1e:	2b40      	cmp	r3, #64	; 0x40
 8001a20:	d108      	bne.n	8001a34 <HAL_RCC_OscConfig+0x270>
 8001a22:	4b0a      	ldr	r3, [pc, #40]	; (8001a4c <HAL_RCC_OscConfig+0x288>)
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001a2a:	4a08      	ldr	r2, [pc, #32]	; (8001a4c <HAL_RCC_OscConfig+0x288>)
 8001a2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a30:	6053      	str	r3, [r2, #4]
 8001a32:	e031      	b.n	8001a98 <HAL_RCC_OscConfig+0x2d4>
 8001a34:	4b05      	ldr	r3, [pc, #20]	; (8001a4c <HAL_RCC_OscConfig+0x288>)
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	691b      	ldr	r3, [r3, #16]
 8001a40:	031b      	lsls	r3, r3, #12
 8001a42:	4902      	ldr	r1, [pc, #8]	; (8001a4c <HAL_RCC_OscConfig+0x288>)
 8001a44:	4313      	orrs	r3, r2
 8001a46:	604b      	str	r3, [r1, #4]
 8001a48:	e026      	b.n	8001a98 <HAL_RCC_OscConfig+0x2d4>
 8001a4a:	bf00      	nop
 8001a4c:	58024400 	.word	0x58024400
 8001a50:	4b9a      	ldr	r3, [pc, #616]	; (8001cbc <HAL_RCC_OscConfig+0x4f8>)
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	691b      	ldr	r3, [r3, #16]
 8001a5c:	061b      	lsls	r3, r3, #24
 8001a5e:	4997      	ldr	r1, [pc, #604]	; (8001cbc <HAL_RCC_OscConfig+0x4f8>)
 8001a60:	4313      	orrs	r3, r2
 8001a62:	604b      	str	r3, [r1, #4]
 8001a64:	e018      	b.n	8001a98 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a66:	4b95      	ldr	r3, [pc, #596]	; (8001cbc <HAL_RCC_OscConfig+0x4f8>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a94      	ldr	r2, [pc, #592]	; (8001cbc <HAL_RCC_OscConfig+0x4f8>)
 8001a6c:	f023 0301 	bic.w	r3, r3, #1
 8001a70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a72:	f7ff fb1b 	bl	80010ac <HAL_GetTick>
 8001a76:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001a78:	e008      	b.n	8001a8c <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a7a:	f7ff fb17 	bl	80010ac <HAL_GetTick>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	2b02      	cmp	r3, #2
 8001a86:	d901      	bls.n	8001a8c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	e2c2      	b.n	8002012 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001a8c:	4b8b      	ldr	r3, [pc, #556]	; (8001cbc <HAL_RCC_OscConfig+0x4f8>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 0304 	and.w	r3, r3, #4
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d1f0      	bne.n	8001a7a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 0310 	and.w	r3, r3, #16
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	f000 80a9 	beq.w	8001bf8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001aa6:	4b85      	ldr	r3, [pc, #532]	; (8001cbc <HAL_RCC_OscConfig+0x4f8>)
 8001aa8:	691b      	ldr	r3, [r3, #16]
 8001aaa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001aae:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001ab0:	4b82      	ldr	r3, [pc, #520]	; (8001cbc <HAL_RCC_OscConfig+0x4f8>)
 8001ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ab4:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001ab6:	69bb      	ldr	r3, [r7, #24]
 8001ab8:	2b08      	cmp	r3, #8
 8001aba:	d007      	beq.n	8001acc <HAL_RCC_OscConfig+0x308>
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	2b18      	cmp	r3, #24
 8001ac0:	d13a      	bne.n	8001b38 <HAL_RCC_OscConfig+0x374>
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	f003 0303 	and.w	r3, r3, #3
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d135      	bne.n	8001b38 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001acc:	4b7b      	ldr	r3, [pc, #492]	; (8001cbc <HAL_RCC_OscConfig+0x4f8>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d005      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x320>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	69db      	ldr	r3, [r3, #28]
 8001adc:	2b80      	cmp	r3, #128	; 0x80
 8001ade:	d001      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e296      	b.n	8002012 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001ae4:	f7ff fb12 	bl	800110c <HAL_GetREVID>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	f241 0203 	movw	r2, #4099	; 0x1003
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d817      	bhi.n	8001b22 <HAL_RCC_OscConfig+0x35e>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6a1b      	ldr	r3, [r3, #32]
 8001af6:	2b20      	cmp	r3, #32
 8001af8:	d108      	bne.n	8001b0c <HAL_RCC_OscConfig+0x348>
 8001afa:	4b70      	ldr	r3, [pc, #448]	; (8001cbc <HAL_RCC_OscConfig+0x4f8>)
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001b02:	4a6e      	ldr	r2, [pc, #440]	; (8001cbc <HAL_RCC_OscConfig+0x4f8>)
 8001b04:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001b08:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001b0a:	e075      	b.n	8001bf8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001b0c:	4b6b      	ldr	r3, [pc, #428]	; (8001cbc <HAL_RCC_OscConfig+0x4f8>)
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6a1b      	ldr	r3, [r3, #32]
 8001b18:	069b      	lsls	r3, r3, #26
 8001b1a:	4968      	ldr	r1, [pc, #416]	; (8001cbc <HAL_RCC_OscConfig+0x4f8>)
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001b20:	e06a      	b.n	8001bf8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001b22:	4b66      	ldr	r3, [pc, #408]	; (8001cbc <HAL_RCC_OscConfig+0x4f8>)
 8001b24:	68db      	ldr	r3, [r3, #12]
 8001b26:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6a1b      	ldr	r3, [r3, #32]
 8001b2e:	061b      	lsls	r3, r3, #24
 8001b30:	4962      	ldr	r1, [pc, #392]	; (8001cbc <HAL_RCC_OscConfig+0x4f8>)
 8001b32:	4313      	orrs	r3, r2
 8001b34:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001b36:	e05f      	b.n	8001bf8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	69db      	ldr	r3, [r3, #28]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d042      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001b40:	4b5e      	ldr	r3, [pc, #376]	; (8001cbc <HAL_RCC_OscConfig+0x4f8>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a5d      	ldr	r2, [pc, #372]	; (8001cbc <HAL_RCC_OscConfig+0x4f8>)
 8001b46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b4c:	f7ff faae 	bl	80010ac <HAL_GetTick>
 8001b50:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001b52:	e008      	b.n	8001b66 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001b54:	f7ff faaa 	bl	80010ac <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d901      	bls.n	8001b66 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e255      	b.n	8002012 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001b66:	4b55      	ldr	r3, [pc, #340]	; (8001cbc <HAL_RCC_OscConfig+0x4f8>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d0f0      	beq.n	8001b54 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001b72:	f7ff facb 	bl	800110c <HAL_GetREVID>
 8001b76:	4603      	mov	r3, r0
 8001b78:	f241 0203 	movw	r2, #4099	; 0x1003
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d817      	bhi.n	8001bb0 <HAL_RCC_OscConfig+0x3ec>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6a1b      	ldr	r3, [r3, #32]
 8001b84:	2b20      	cmp	r3, #32
 8001b86:	d108      	bne.n	8001b9a <HAL_RCC_OscConfig+0x3d6>
 8001b88:	4b4c      	ldr	r3, [pc, #304]	; (8001cbc <HAL_RCC_OscConfig+0x4f8>)
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001b90:	4a4a      	ldr	r2, [pc, #296]	; (8001cbc <HAL_RCC_OscConfig+0x4f8>)
 8001b92:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001b96:	6053      	str	r3, [r2, #4]
 8001b98:	e02e      	b.n	8001bf8 <HAL_RCC_OscConfig+0x434>
 8001b9a:	4b48      	ldr	r3, [pc, #288]	; (8001cbc <HAL_RCC_OscConfig+0x4f8>)
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6a1b      	ldr	r3, [r3, #32]
 8001ba6:	069b      	lsls	r3, r3, #26
 8001ba8:	4944      	ldr	r1, [pc, #272]	; (8001cbc <HAL_RCC_OscConfig+0x4f8>)
 8001baa:	4313      	orrs	r3, r2
 8001bac:	604b      	str	r3, [r1, #4]
 8001bae:	e023      	b.n	8001bf8 <HAL_RCC_OscConfig+0x434>
 8001bb0:	4b42      	ldr	r3, [pc, #264]	; (8001cbc <HAL_RCC_OscConfig+0x4f8>)
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6a1b      	ldr	r3, [r3, #32]
 8001bbc:	061b      	lsls	r3, r3, #24
 8001bbe:	493f      	ldr	r1, [pc, #252]	; (8001cbc <HAL_RCC_OscConfig+0x4f8>)
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	60cb      	str	r3, [r1, #12]
 8001bc4:	e018      	b.n	8001bf8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001bc6:	4b3d      	ldr	r3, [pc, #244]	; (8001cbc <HAL_RCC_OscConfig+0x4f8>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a3c      	ldr	r2, [pc, #240]	; (8001cbc <HAL_RCC_OscConfig+0x4f8>)
 8001bcc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001bd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bd2:	f7ff fa6b 	bl	80010ac <HAL_GetTick>
 8001bd6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001bd8:	e008      	b.n	8001bec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001bda:	f7ff fa67 	bl	80010ac <HAL_GetTick>
 8001bde:	4602      	mov	r2, r0
 8001be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d901      	bls.n	8001bec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001be8:	2303      	movs	r3, #3
 8001bea:	e212      	b.n	8002012 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001bec:	4b33      	ldr	r3, [pc, #204]	; (8001cbc <HAL_RCC_OscConfig+0x4f8>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d1f0      	bne.n	8001bda <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 0308 	and.w	r3, r3, #8
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d036      	beq.n	8001c72 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	695b      	ldr	r3, [r3, #20]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d019      	beq.n	8001c40 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c0c:	4b2b      	ldr	r3, [pc, #172]	; (8001cbc <HAL_RCC_OscConfig+0x4f8>)
 8001c0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c10:	4a2a      	ldr	r2, [pc, #168]	; (8001cbc <HAL_RCC_OscConfig+0x4f8>)
 8001c12:	f043 0301 	orr.w	r3, r3, #1
 8001c16:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c18:	f7ff fa48 	bl	80010ac <HAL_GetTick>
 8001c1c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001c1e:	e008      	b.n	8001c32 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c20:	f7ff fa44 	bl	80010ac <HAL_GetTick>
 8001c24:	4602      	mov	r2, r0
 8001c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d901      	bls.n	8001c32 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e1ef      	b.n	8002012 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001c32:	4b22      	ldr	r3, [pc, #136]	; (8001cbc <HAL_RCC_OscConfig+0x4f8>)
 8001c34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c36:	f003 0302 	and.w	r3, r3, #2
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d0f0      	beq.n	8001c20 <HAL_RCC_OscConfig+0x45c>
 8001c3e:	e018      	b.n	8001c72 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c40:	4b1e      	ldr	r3, [pc, #120]	; (8001cbc <HAL_RCC_OscConfig+0x4f8>)
 8001c42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c44:	4a1d      	ldr	r2, [pc, #116]	; (8001cbc <HAL_RCC_OscConfig+0x4f8>)
 8001c46:	f023 0301 	bic.w	r3, r3, #1
 8001c4a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c4c:	f7ff fa2e 	bl	80010ac <HAL_GetTick>
 8001c50:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001c52:	e008      	b.n	8001c66 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c54:	f7ff fa2a 	bl	80010ac <HAL_GetTick>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d901      	bls.n	8001c66 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001c62:	2303      	movs	r3, #3
 8001c64:	e1d5      	b.n	8002012 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001c66:	4b15      	ldr	r3, [pc, #84]	; (8001cbc <HAL_RCC_OscConfig+0x4f8>)
 8001c68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c6a:	f003 0302 	and.w	r3, r3, #2
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d1f0      	bne.n	8001c54 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 0320 	and.w	r3, r3, #32
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d039      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	699b      	ldr	r3, [r3, #24]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d01c      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001c86:	4b0d      	ldr	r3, [pc, #52]	; (8001cbc <HAL_RCC_OscConfig+0x4f8>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a0c      	ldr	r2, [pc, #48]	; (8001cbc <HAL_RCC_OscConfig+0x4f8>)
 8001c8c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c90:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001c92:	f7ff fa0b 	bl	80010ac <HAL_GetTick>
 8001c96:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001c98:	e008      	b.n	8001cac <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001c9a:	f7ff fa07 	bl	80010ac <HAL_GetTick>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca2:	1ad3      	subs	r3, r2, r3
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	d901      	bls.n	8001cac <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001ca8:	2303      	movs	r3, #3
 8001caa:	e1b2      	b.n	8002012 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001cac:	4b03      	ldr	r3, [pc, #12]	; (8001cbc <HAL_RCC_OscConfig+0x4f8>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d0f0      	beq.n	8001c9a <HAL_RCC_OscConfig+0x4d6>
 8001cb8:	e01b      	b.n	8001cf2 <HAL_RCC_OscConfig+0x52e>
 8001cba:	bf00      	nop
 8001cbc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001cc0:	4b9b      	ldr	r3, [pc, #620]	; (8001f30 <HAL_RCC_OscConfig+0x76c>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a9a      	ldr	r2, [pc, #616]	; (8001f30 <HAL_RCC_OscConfig+0x76c>)
 8001cc6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001cca:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001ccc:	f7ff f9ee 	bl	80010ac <HAL_GetTick>
 8001cd0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001cd2:	e008      	b.n	8001ce6 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001cd4:	f7ff f9ea 	bl	80010ac <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d901      	bls.n	8001ce6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e195      	b.n	8002012 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001ce6:	4b92      	ldr	r3, [pc, #584]	; (8001f30 <HAL_RCC_OscConfig+0x76c>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d1f0      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0304 	and.w	r3, r3, #4
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	f000 8081 	beq.w	8001e02 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001d00:	4b8c      	ldr	r3, [pc, #560]	; (8001f34 <HAL_RCC_OscConfig+0x770>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a8b      	ldr	r2, [pc, #556]	; (8001f34 <HAL_RCC_OscConfig+0x770>)
 8001d06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d0a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001d0c:	f7ff f9ce 	bl	80010ac <HAL_GetTick>
 8001d10:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001d12:	e008      	b.n	8001d26 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001d14:	f7ff f9ca 	bl	80010ac <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	2b64      	cmp	r3, #100	; 0x64
 8001d20:	d901      	bls.n	8001d26 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e175      	b.n	8002012 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001d26:	4b83      	ldr	r3, [pc, #524]	; (8001f34 <HAL_RCC_OscConfig+0x770>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d0f0      	beq.n	8001d14 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d106      	bne.n	8001d48 <HAL_RCC_OscConfig+0x584>
 8001d3a:	4b7d      	ldr	r3, [pc, #500]	; (8001f30 <HAL_RCC_OscConfig+0x76c>)
 8001d3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d3e:	4a7c      	ldr	r2, [pc, #496]	; (8001f30 <HAL_RCC_OscConfig+0x76c>)
 8001d40:	f043 0301 	orr.w	r3, r3, #1
 8001d44:	6713      	str	r3, [r2, #112]	; 0x70
 8001d46:	e02d      	b.n	8001da4 <HAL_RCC_OscConfig+0x5e0>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d10c      	bne.n	8001d6a <HAL_RCC_OscConfig+0x5a6>
 8001d50:	4b77      	ldr	r3, [pc, #476]	; (8001f30 <HAL_RCC_OscConfig+0x76c>)
 8001d52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d54:	4a76      	ldr	r2, [pc, #472]	; (8001f30 <HAL_RCC_OscConfig+0x76c>)
 8001d56:	f023 0301 	bic.w	r3, r3, #1
 8001d5a:	6713      	str	r3, [r2, #112]	; 0x70
 8001d5c:	4b74      	ldr	r3, [pc, #464]	; (8001f30 <HAL_RCC_OscConfig+0x76c>)
 8001d5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d60:	4a73      	ldr	r2, [pc, #460]	; (8001f30 <HAL_RCC_OscConfig+0x76c>)
 8001d62:	f023 0304 	bic.w	r3, r3, #4
 8001d66:	6713      	str	r3, [r2, #112]	; 0x70
 8001d68:	e01c      	b.n	8001da4 <HAL_RCC_OscConfig+0x5e0>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	2b05      	cmp	r3, #5
 8001d70:	d10c      	bne.n	8001d8c <HAL_RCC_OscConfig+0x5c8>
 8001d72:	4b6f      	ldr	r3, [pc, #444]	; (8001f30 <HAL_RCC_OscConfig+0x76c>)
 8001d74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d76:	4a6e      	ldr	r2, [pc, #440]	; (8001f30 <HAL_RCC_OscConfig+0x76c>)
 8001d78:	f043 0304 	orr.w	r3, r3, #4
 8001d7c:	6713      	str	r3, [r2, #112]	; 0x70
 8001d7e:	4b6c      	ldr	r3, [pc, #432]	; (8001f30 <HAL_RCC_OscConfig+0x76c>)
 8001d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d82:	4a6b      	ldr	r2, [pc, #428]	; (8001f30 <HAL_RCC_OscConfig+0x76c>)
 8001d84:	f043 0301 	orr.w	r3, r3, #1
 8001d88:	6713      	str	r3, [r2, #112]	; 0x70
 8001d8a:	e00b      	b.n	8001da4 <HAL_RCC_OscConfig+0x5e0>
 8001d8c:	4b68      	ldr	r3, [pc, #416]	; (8001f30 <HAL_RCC_OscConfig+0x76c>)
 8001d8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d90:	4a67      	ldr	r2, [pc, #412]	; (8001f30 <HAL_RCC_OscConfig+0x76c>)
 8001d92:	f023 0301 	bic.w	r3, r3, #1
 8001d96:	6713      	str	r3, [r2, #112]	; 0x70
 8001d98:	4b65      	ldr	r3, [pc, #404]	; (8001f30 <HAL_RCC_OscConfig+0x76c>)
 8001d9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d9c:	4a64      	ldr	r2, [pc, #400]	; (8001f30 <HAL_RCC_OscConfig+0x76c>)
 8001d9e:	f023 0304 	bic.w	r3, r3, #4
 8001da2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d015      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dac:	f7ff f97e 	bl	80010ac <HAL_GetTick>
 8001db0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001db2:	e00a      	b.n	8001dca <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001db4:	f7ff f97a 	bl	80010ac <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d901      	bls.n	8001dca <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e123      	b.n	8002012 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001dca:	4b59      	ldr	r3, [pc, #356]	; (8001f30 <HAL_RCC_OscConfig+0x76c>)
 8001dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dce:	f003 0302 	and.w	r3, r3, #2
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d0ee      	beq.n	8001db4 <HAL_RCC_OscConfig+0x5f0>
 8001dd6:	e014      	b.n	8001e02 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dd8:	f7ff f968 	bl	80010ac <HAL_GetTick>
 8001ddc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001dde:	e00a      	b.n	8001df6 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001de0:	f7ff f964 	bl	80010ac <HAL_GetTick>
 8001de4:	4602      	mov	r2, r0
 8001de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d901      	bls.n	8001df6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	e10d      	b.n	8002012 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001df6:	4b4e      	ldr	r3, [pc, #312]	; (8001f30 <HAL_RCC_OscConfig+0x76c>)
 8001df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dfa:	f003 0302 	and.w	r3, r3, #2
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d1ee      	bne.n	8001de0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	f000 8102 	beq.w	8002010 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001e0c:	4b48      	ldr	r3, [pc, #288]	; (8001f30 <HAL_RCC_OscConfig+0x76c>)
 8001e0e:	691b      	ldr	r3, [r3, #16]
 8001e10:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001e14:	2b18      	cmp	r3, #24
 8001e16:	f000 80bd 	beq.w	8001f94 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e1e:	2b02      	cmp	r3, #2
 8001e20:	f040 809e 	bne.w	8001f60 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e24:	4b42      	ldr	r3, [pc, #264]	; (8001f30 <HAL_RCC_OscConfig+0x76c>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a41      	ldr	r2, [pc, #260]	; (8001f30 <HAL_RCC_OscConfig+0x76c>)
 8001e2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e30:	f7ff f93c 	bl	80010ac <HAL_GetTick>
 8001e34:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e36:	e008      	b.n	8001e4a <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e38:	f7ff f938 	bl	80010ac <HAL_GetTick>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	d901      	bls.n	8001e4a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001e46:	2303      	movs	r3, #3
 8001e48:	e0e3      	b.n	8002012 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e4a:	4b39      	ldr	r3, [pc, #228]	; (8001f30 <HAL_RCC_OscConfig+0x76c>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d1f0      	bne.n	8001e38 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e56:	4b36      	ldr	r3, [pc, #216]	; (8001f30 <HAL_RCC_OscConfig+0x76c>)
 8001e58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e5a:	4b37      	ldr	r3, [pc, #220]	; (8001f38 <HAL_RCC_OscConfig+0x774>)
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001e66:	0112      	lsls	r2, r2, #4
 8001e68:	430a      	orrs	r2, r1
 8001e6a:	4931      	ldr	r1, [pc, #196]	; (8001f30 <HAL_RCC_OscConfig+0x76c>)
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	628b      	str	r3, [r1, #40]	; 0x28
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e74:	3b01      	subs	r3, #1
 8001e76:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e7e:	3b01      	subs	r3, #1
 8001e80:	025b      	lsls	r3, r3, #9
 8001e82:	b29b      	uxth	r3, r3
 8001e84:	431a      	orrs	r2, r3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e8a:	3b01      	subs	r3, #1
 8001e8c:	041b      	lsls	r3, r3, #16
 8001e8e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001e92:	431a      	orrs	r2, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e98:	3b01      	subs	r3, #1
 8001e9a:	061b      	lsls	r3, r3, #24
 8001e9c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001ea0:	4923      	ldr	r1, [pc, #140]	; (8001f30 <HAL_RCC_OscConfig+0x76c>)
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001ea6:	4b22      	ldr	r3, [pc, #136]	; (8001f30 <HAL_RCC_OscConfig+0x76c>)
 8001ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eaa:	4a21      	ldr	r2, [pc, #132]	; (8001f30 <HAL_RCC_OscConfig+0x76c>)
 8001eac:	f023 0301 	bic.w	r3, r3, #1
 8001eb0:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001eb2:	4b1f      	ldr	r3, [pc, #124]	; (8001f30 <HAL_RCC_OscConfig+0x76c>)
 8001eb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001eb6:	4b21      	ldr	r3, [pc, #132]	; (8001f3c <HAL_RCC_OscConfig+0x778>)
 8001eb8:	4013      	ands	r3, r2
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001ebe:	00d2      	lsls	r2, r2, #3
 8001ec0:	491b      	ldr	r1, [pc, #108]	; (8001f30 <HAL_RCC_OscConfig+0x76c>)
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001ec6:	4b1a      	ldr	r3, [pc, #104]	; (8001f30 <HAL_RCC_OscConfig+0x76c>)
 8001ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eca:	f023 020c 	bic.w	r2, r3, #12
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed2:	4917      	ldr	r1, [pc, #92]	; (8001f30 <HAL_RCC_OscConfig+0x76c>)
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001ed8:	4b15      	ldr	r3, [pc, #84]	; (8001f30 <HAL_RCC_OscConfig+0x76c>)
 8001eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001edc:	f023 0202 	bic.w	r2, r3, #2
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee4:	4912      	ldr	r1, [pc, #72]	; (8001f30 <HAL_RCC_OscConfig+0x76c>)
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001eea:	4b11      	ldr	r3, [pc, #68]	; (8001f30 <HAL_RCC_OscConfig+0x76c>)
 8001eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eee:	4a10      	ldr	r2, [pc, #64]	; (8001f30 <HAL_RCC_OscConfig+0x76c>)
 8001ef0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ef4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001ef6:	4b0e      	ldr	r3, [pc, #56]	; (8001f30 <HAL_RCC_OscConfig+0x76c>)
 8001ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001efa:	4a0d      	ldr	r2, [pc, #52]	; (8001f30 <HAL_RCC_OscConfig+0x76c>)
 8001efc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f00:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001f02:	4b0b      	ldr	r3, [pc, #44]	; (8001f30 <HAL_RCC_OscConfig+0x76c>)
 8001f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f06:	4a0a      	ldr	r2, [pc, #40]	; (8001f30 <HAL_RCC_OscConfig+0x76c>)
 8001f08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f0c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001f0e:	4b08      	ldr	r3, [pc, #32]	; (8001f30 <HAL_RCC_OscConfig+0x76c>)
 8001f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f12:	4a07      	ldr	r2, [pc, #28]	; (8001f30 <HAL_RCC_OscConfig+0x76c>)
 8001f14:	f043 0301 	orr.w	r3, r3, #1
 8001f18:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f1a:	4b05      	ldr	r3, [pc, #20]	; (8001f30 <HAL_RCC_OscConfig+0x76c>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a04      	ldr	r2, [pc, #16]	; (8001f30 <HAL_RCC_OscConfig+0x76c>)
 8001f20:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f26:	f7ff f8c1 	bl	80010ac <HAL_GetTick>
 8001f2a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001f2c:	e011      	b.n	8001f52 <HAL_RCC_OscConfig+0x78e>
 8001f2e:	bf00      	nop
 8001f30:	58024400 	.word	0x58024400
 8001f34:	58024800 	.word	0x58024800
 8001f38:	fffffc0c 	.word	0xfffffc0c
 8001f3c:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f40:	f7ff f8b4 	bl	80010ac <HAL_GetTick>
 8001f44:	4602      	mov	r2, r0
 8001f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d901      	bls.n	8001f52 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e05f      	b.n	8002012 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001f52:	4b32      	ldr	r3, [pc, #200]	; (800201c <HAL_RCC_OscConfig+0x858>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d0f0      	beq.n	8001f40 <HAL_RCC_OscConfig+0x77c>
 8001f5e:	e057      	b.n	8002010 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f60:	4b2e      	ldr	r3, [pc, #184]	; (800201c <HAL_RCC_OscConfig+0x858>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a2d      	ldr	r2, [pc, #180]	; (800201c <HAL_RCC_OscConfig+0x858>)
 8001f66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f6c:	f7ff f89e 	bl	80010ac <HAL_GetTick>
 8001f70:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f72:	e008      	b.n	8001f86 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f74:	f7ff f89a 	bl	80010ac <HAL_GetTick>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d901      	bls.n	8001f86 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001f82:	2303      	movs	r3, #3
 8001f84:	e045      	b.n	8002012 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f86:	4b25      	ldr	r3, [pc, #148]	; (800201c <HAL_RCC_OscConfig+0x858>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d1f0      	bne.n	8001f74 <HAL_RCC_OscConfig+0x7b0>
 8001f92:	e03d      	b.n	8002010 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001f94:	4b21      	ldr	r3, [pc, #132]	; (800201c <HAL_RCC_OscConfig+0x858>)
 8001f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f98:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001f9a:	4b20      	ldr	r3, [pc, #128]	; (800201c <HAL_RCC_OscConfig+0x858>)
 8001f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d031      	beq.n	800200c <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	f003 0203 	and.w	r2, r3, #3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d12a      	bne.n	800200c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	091b      	lsrs	r3, r3, #4
 8001fba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	d122      	bne.n	800200c <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d11a      	bne.n	800200c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	0a5b      	lsrs	r3, r3, #9
 8001fda:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fe2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d111      	bne.n	800200c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	0c1b      	lsrs	r3, r3, #16
 8001fec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ff4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d108      	bne.n	800200c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	0e1b      	lsrs	r3, r3, #24
 8001ffe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002006:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002008:	429a      	cmp	r2, r3
 800200a:	d001      	beq.n	8002010 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e000      	b.n	8002012 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8002010:	2300      	movs	r3, #0
}
 8002012:	4618      	mov	r0, r3
 8002014:	3730      	adds	r7, #48	; 0x30
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	58024400 	.word	0x58024400

08002020 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b086      	sub	sp, #24
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d101      	bne.n	8002034 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e19c      	b.n	800236e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002034:	4b8a      	ldr	r3, [pc, #552]	; (8002260 <HAL_RCC_ClockConfig+0x240>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 030f 	and.w	r3, r3, #15
 800203c:	683a      	ldr	r2, [r7, #0]
 800203e:	429a      	cmp	r2, r3
 8002040:	d910      	bls.n	8002064 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002042:	4b87      	ldr	r3, [pc, #540]	; (8002260 <HAL_RCC_ClockConfig+0x240>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f023 020f 	bic.w	r2, r3, #15
 800204a:	4985      	ldr	r1, [pc, #532]	; (8002260 <HAL_RCC_ClockConfig+0x240>)
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	4313      	orrs	r3, r2
 8002050:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002052:	4b83      	ldr	r3, [pc, #524]	; (8002260 <HAL_RCC_ClockConfig+0x240>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 030f 	and.w	r3, r3, #15
 800205a:	683a      	ldr	r2, [r7, #0]
 800205c:	429a      	cmp	r2, r3
 800205e:	d001      	beq.n	8002064 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e184      	b.n	800236e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0304 	and.w	r3, r3, #4
 800206c:	2b00      	cmp	r3, #0
 800206e:	d010      	beq.n	8002092 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	691a      	ldr	r2, [r3, #16]
 8002074:	4b7b      	ldr	r3, [pc, #492]	; (8002264 <HAL_RCC_ClockConfig+0x244>)
 8002076:	699b      	ldr	r3, [r3, #24]
 8002078:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800207c:	429a      	cmp	r2, r3
 800207e:	d908      	bls.n	8002092 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002080:	4b78      	ldr	r3, [pc, #480]	; (8002264 <HAL_RCC_ClockConfig+0x244>)
 8002082:	699b      	ldr	r3, [r3, #24]
 8002084:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	691b      	ldr	r3, [r3, #16]
 800208c:	4975      	ldr	r1, [pc, #468]	; (8002264 <HAL_RCC_ClockConfig+0x244>)
 800208e:	4313      	orrs	r3, r2
 8002090:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0308 	and.w	r3, r3, #8
 800209a:	2b00      	cmp	r3, #0
 800209c:	d010      	beq.n	80020c0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	695a      	ldr	r2, [r3, #20]
 80020a2:	4b70      	ldr	r3, [pc, #448]	; (8002264 <HAL_RCC_ClockConfig+0x244>)
 80020a4:	69db      	ldr	r3, [r3, #28]
 80020a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d908      	bls.n	80020c0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80020ae:	4b6d      	ldr	r3, [pc, #436]	; (8002264 <HAL_RCC_ClockConfig+0x244>)
 80020b0:	69db      	ldr	r3, [r3, #28]
 80020b2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	695b      	ldr	r3, [r3, #20]
 80020ba:	496a      	ldr	r1, [pc, #424]	; (8002264 <HAL_RCC_ClockConfig+0x244>)
 80020bc:	4313      	orrs	r3, r2
 80020be:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0310 	and.w	r3, r3, #16
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d010      	beq.n	80020ee <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	699a      	ldr	r2, [r3, #24]
 80020d0:	4b64      	ldr	r3, [pc, #400]	; (8002264 <HAL_RCC_ClockConfig+0x244>)
 80020d2:	69db      	ldr	r3, [r3, #28]
 80020d4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80020d8:	429a      	cmp	r2, r3
 80020da:	d908      	bls.n	80020ee <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80020dc:	4b61      	ldr	r3, [pc, #388]	; (8002264 <HAL_RCC_ClockConfig+0x244>)
 80020de:	69db      	ldr	r3, [r3, #28]
 80020e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	699b      	ldr	r3, [r3, #24]
 80020e8:	495e      	ldr	r1, [pc, #376]	; (8002264 <HAL_RCC_ClockConfig+0x244>)
 80020ea:	4313      	orrs	r3, r2
 80020ec:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0320 	and.w	r3, r3, #32
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d010      	beq.n	800211c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	69da      	ldr	r2, [r3, #28]
 80020fe:	4b59      	ldr	r3, [pc, #356]	; (8002264 <HAL_RCC_ClockConfig+0x244>)
 8002100:	6a1b      	ldr	r3, [r3, #32]
 8002102:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002106:	429a      	cmp	r2, r3
 8002108:	d908      	bls.n	800211c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800210a:	4b56      	ldr	r3, [pc, #344]	; (8002264 <HAL_RCC_ClockConfig+0x244>)
 800210c:	6a1b      	ldr	r3, [r3, #32]
 800210e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	69db      	ldr	r3, [r3, #28]
 8002116:	4953      	ldr	r1, [pc, #332]	; (8002264 <HAL_RCC_ClockConfig+0x244>)
 8002118:	4313      	orrs	r3, r2
 800211a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0302 	and.w	r3, r3, #2
 8002124:	2b00      	cmp	r3, #0
 8002126:	d010      	beq.n	800214a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	68da      	ldr	r2, [r3, #12]
 800212c:	4b4d      	ldr	r3, [pc, #308]	; (8002264 <HAL_RCC_ClockConfig+0x244>)
 800212e:	699b      	ldr	r3, [r3, #24]
 8002130:	f003 030f 	and.w	r3, r3, #15
 8002134:	429a      	cmp	r2, r3
 8002136:	d908      	bls.n	800214a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002138:	4b4a      	ldr	r3, [pc, #296]	; (8002264 <HAL_RCC_ClockConfig+0x244>)
 800213a:	699b      	ldr	r3, [r3, #24]
 800213c:	f023 020f 	bic.w	r2, r3, #15
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	4947      	ldr	r1, [pc, #284]	; (8002264 <HAL_RCC_ClockConfig+0x244>)
 8002146:	4313      	orrs	r3, r2
 8002148:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0301 	and.w	r3, r3, #1
 8002152:	2b00      	cmp	r3, #0
 8002154:	d055      	beq.n	8002202 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002156:	4b43      	ldr	r3, [pc, #268]	; (8002264 <HAL_RCC_ClockConfig+0x244>)
 8002158:	699b      	ldr	r3, [r3, #24]
 800215a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	4940      	ldr	r1, [pc, #256]	; (8002264 <HAL_RCC_ClockConfig+0x244>)
 8002164:	4313      	orrs	r3, r2
 8002166:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	2b02      	cmp	r3, #2
 800216e:	d107      	bne.n	8002180 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002170:	4b3c      	ldr	r3, [pc, #240]	; (8002264 <HAL_RCC_ClockConfig+0x244>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002178:	2b00      	cmp	r3, #0
 800217a:	d121      	bne.n	80021c0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e0f6      	b.n	800236e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	2b03      	cmp	r3, #3
 8002186:	d107      	bne.n	8002198 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002188:	4b36      	ldr	r3, [pc, #216]	; (8002264 <HAL_RCC_ClockConfig+0x244>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002190:	2b00      	cmp	r3, #0
 8002192:	d115      	bne.n	80021c0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	e0ea      	b.n	800236e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	2b01      	cmp	r3, #1
 800219e:	d107      	bne.n	80021b0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80021a0:	4b30      	ldr	r3, [pc, #192]	; (8002264 <HAL_RCC_ClockConfig+0x244>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d109      	bne.n	80021c0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e0de      	b.n	800236e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80021b0:	4b2c      	ldr	r3, [pc, #176]	; (8002264 <HAL_RCC_ClockConfig+0x244>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0304 	and.w	r3, r3, #4
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d101      	bne.n	80021c0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e0d6      	b.n	800236e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80021c0:	4b28      	ldr	r3, [pc, #160]	; (8002264 <HAL_RCC_ClockConfig+0x244>)
 80021c2:	691b      	ldr	r3, [r3, #16]
 80021c4:	f023 0207 	bic.w	r2, r3, #7
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	4925      	ldr	r1, [pc, #148]	; (8002264 <HAL_RCC_ClockConfig+0x244>)
 80021ce:	4313      	orrs	r3, r2
 80021d0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021d2:	f7fe ff6b 	bl	80010ac <HAL_GetTick>
 80021d6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021d8:	e00a      	b.n	80021f0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021da:	f7fe ff67 	bl	80010ac <HAL_GetTick>
 80021de:	4602      	mov	r2, r0
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	1ad3      	subs	r3, r2, r3
 80021e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d901      	bls.n	80021f0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80021ec:	2303      	movs	r3, #3
 80021ee:	e0be      	b.n	800236e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021f0:	4b1c      	ldr	r3, [pc, #112]	; (8002264 <HAL_RCC_ClockConfig+0x244>)
 80021f2:	691b      	ldr	r3, [r3, #16]
 80021f4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	00db      	lsls	r3, r3, #3
 80021fe:	429a      	cmp	r2, r3
 8002200:	d1eb      	bne.n	80021da <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0302 	and.w	r3, r3, #2
 800220a:	2b00      	cmp	r3, #0
 800220c:	d010      	beq.n	8002230 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	68da      	ldr	r2, [r3, #12]
 8002212:	4b14      	ldr	r3, [pc, #80]	; (8002264 <HAL_RCC_ClockConfig+0x244>)
 8002214:	699b      	ldr	r3, [r3, #24]
 8002216:	f003 030f 	and.w	r3, r3, #15
 800221a:	429a      	cmp	r2, r3
 800221c:	d208      	bcs.n	8002230 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800221e:	4b11      	ldr	r3, [pc, #68]	; (8002264 <HAL_RCC_ClockConfig+0x244>)
 8002220:	699b      	ldr	r3, [r3, #24]
 8002222:	f023 020f 	bic.w	r2, r3, #15
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	490e      	ldr	r1, [pc, #56]	; (8002264 <HAL_RCC_ClockConfig+0x244>)
 800222c:	4313      	orrs	r3, r2
 800222e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002230:	4b0b      	ldr	r3, [pc, #44]	; (8002260 <HAL_RCC_ClockConfig+0x240>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 030f 	and.w	r3, r3, #15
 8002238:	683a      	ldr	r2, [r7, #0]
 800223a:	429a      	cmp	r2, r3
 800223c:	d214      	bcs.n	8002268 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800223e:	4b08      	ldr	r3, [pc, #32]	; (8002260 <HAL_RCC_ClockConfig+0x240>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f023 020f 	bic.w	r2, r3, #15
 8002246:	4906      	ldr	r1, [pc, #24]	; (8002260 <HAL_RCC_ClockConfig+0x240>)
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	4313      	orrs	r3, r2
 800224c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800224e:	4b04      	ldr	r3, [pc, #16]	; (8002260 <HAL_RCC_ClockConfig+0x240>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 030f 	and.w	r3, r3, #15
 8002256:	683a      	ldr	r2, [r7, #0]
 8002258:	429a      	cmp	r2, r3
 800225a:	d005      	beq.n	8002268 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e086      	b.n	800236e <HAL_RCC_ClockConfig+0x34e>
 8002260:	52002000 	.word	0x52002000
 8002264:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0304 	and.w	r3, r3, #4
 8002270:	2b00      	cmp	r3, #0
 8002272:	d010      	beq.n	8002296 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	691a      	ldr	r2, [r3, #16]
 8002278:	4b3f      	ldr	r3, [pc, #252]	; (8002378 <HAL_RCC_ClockConfig+0x358>)
 800227a:	699b      	ldr	r3, [r3, #24]
 800227c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002280:	429a      	cmp	r2, r3
 8002282:	d208      	bcs.n	8002296 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002284:	4b3c      	ldr	r3, [pc, #240]	; (8002378 <HAL_RCC_ClockConfig+0x358>)
 8002286:	699b      	ldr	r3, [r3, #24]
 8002288:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	691b      	ldr	r3, [r3, #16]
 8002290:	4939      	ldr	r1, [pc, #228]	; (8002378 <HAL_RCC_ClockConfig+0x358>)
 8002292:	4313      	orrs	r3, r2
 8002294:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0308 	and.w	r3, r3, #8
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d010      	beq.n	80022c4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	695a      	ldr	r2, [r3, #20]
 80022a6:	4b34      	ldr	r3, [pc, #208]	; (8002378 <HAL_RCC_ClockConfig+0x358>)
 80022a8:	69db      	ldr	r3, [r3, #28]
 80022aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d208      	bcs.n	80022c4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80022b2:	4b31      	ldr	r3, [pc, #196]	; (8002378 <HAL_RCC_ClockConfig+0x358>)
 80022b4:	69db      	ldr	r3, [r3, #28]
 80022b6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	695b      	ldr	r3, [r3, #20]
 80022be:	492e      	ldr	r1, [pc, #184]	; (8002378 <HAL_RCC_ClockConfig+0x358>)
 80022c0:	4313      	orrs	r3, r2
 80022c2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 0310 	and.w	r3, r3, #16
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d010      	beq.n	80022f2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	699a      	ldr	r2, [r3, #24]
 80022d4:	4b28      	ldr	r3, [pc, #160]	; (8002378 <HAL_RCC_ClockConfig+0x358>)
 80022d6:	69db      	ldr	r3, [r3, #28]
 80022d8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80022dc:	429a      	cmp	r2, r3
 80022de:	d208      	bcs.n	80022f2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80022e0:	4b25      	ldr	r3, [pc, #148]	; (8002378 <HAL_RCC_ClockConfig+0x358>)
 80022e2:	69db      	ldr	r3, [r3, #28]
 80022e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	699b      	ldr	r3, [r3, #24]
 80022ec:	4922      	ldr	r1, [pc, #136]	; (8002378 <HAL_RCC_ClockConfig+0x358>)
 80022ee:	4313      	orrs	r3, r2
 80022f0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0320 	and.w	r3, r3, #32
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d010      	beq.n	8002320 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	69da      	ldr	r2, [r3, #28]
 8002302:	4b1d      	ldr	r3, [pc, #116]	; (8002378 <HAL_RCC_ClockConfig+0x358>)
 8002304:	6a1b      	ldr	r3, [r3, #32]
 8002306:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800230a:	429a      	cmp	r2, r3
 800230c:	d208      	bcs.n	8002320 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800230e:	4b1a      	ldr	r3, [pc, #104]	; (8002378 <HAL_RCC_ClockConfig+0x358>)
 8002310:	6a1b      	ldr	r3, [r3, #32]
 8002312:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	69db      	ldr	r3, [r3, #28]
 800231a:	4917      	ldr	r1, [pc, #92]	; (8002378 <HAL_RCC_ClockConfig+0x358>)
 800231c:	4313      	orrs	r3, r2
 800231e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002320:	f000 f834 	bl	800238c <HAL_RCC_GetSysClockFreq>
 8002324:	4602      	mov	r2, r0
 8002326:	4b14      	ldr	r3, [pc, #80]	; (8002378 <HAL_RCC_ClockConfig+0x358>)
 8002328:	699b      	ldr	r3, [r3, #24]
 800232a:	0a1b      	lsrs	r3, r3, #8
 800232c:	f003 030f 	and.w	r3, r3, #15
 8002330:	4912      	ldr	r1, [pc, #72]	; (800237c <HAL_RCC_ClockConfig+0x35c>)
 8002332:	5ccb      	ldrb	r3, [r1, r3]
 8002334:	f003 031f 	and.w	r3, r3, #31
 8002338:	fa22 f303 	lsr.w	r3, r2, r3
 800233c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800233e:	4b0e      	ldr	r3, [pc, #56]	; (8002378 <HAL_RCC_ClockConfig+0x358>)
 8002340:	699b      	ldr	r3, [r3, #24]
 8002342:	f003 030f 	and.w	r3, r3, #15
 8002346:	4a0d      	ldr	r2, [pc, #52]	; (800237c <HAL_RCC_ClockConfig+0x35c>)
 8002348:	5cd3      	ldrb	r3, [r2, r3]
 800234a:	f003 031f 	and.w	r3, r3, #31
 800234e:	693a      	ldr	r2, [r7, #16]
 8002350:	fa22 f303 	lsr.w	r3, r2, r3
 8002354:	4a0a      	ldr	r2, [pc, #40]	; (8002380 <HAL_RCC_ClockConfig+0x360>)
 8002356:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002358:	4a0a      	ldr	r2, [pc, #40]	; (8002384 <HAL_RCC_ClockConfig+0x364>)
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800235e:	4b0a      	ldr	r3, [pc, #40]	; (8002388 <HAL_RCC_ClockConfig+0x368>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4618      	mov	r0, r3
 8002364:	f7fe fe58 	bl	8001018 <HAL_InitTick>
 8002368:	4603      	mov	r3, r0
 800236a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800236c:	7bfb      	ldrb	r3, [r7, #15]
}
 800236e:	4618      	mov	r0, r3
 8002370:	3718      	adds	r7, #24
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	58024400 	.word	0x58024400
 800237c:	08005fd8 	.word	0x08005fd8
 8002380:	24000004 	.word	0x24000004
 8002384:	24000000 	.word	0x24000000
 8002388:	24000008 	.word	0x24000008

0800238c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800238c:	b480      	push	{r7}
 800238e:	b089      	sub	sp, #36	; 0x24
 8002390:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002392:	4bb3      	ldr	r3, [pc, #716]	; (8002660 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002394:	691b      	ldr	r3, [r3, #16]
 8002396:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800239a:	2b18      	cmp	r3, #24
 800239c:	f200 8155 	bhi.w	800264a <HAL_RCC_GetSysClockFreq+0x2be>
 80023a0:	a201      	add	r2, pc, #4	; (adr r2, 80023a8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80023a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023a6:	bf00      	nop
 80023a8:	0800240d 	.word	0x0800240d
 80023ac:	0800264b 	.word	0x0800264b
 80023b0:	0800264b 	.word	0x0800264b
 80023b4:	0800264b 	.word	0x0800264b
 80023b8:	0800264b 	.word	0x0800264b
 80023bc:	0800264b 	.word	0x0800264b
 80023c0:	0800264b 	.word	0x0800264b
 80023c4:	0800264b 	.word	0x0800264b
 80023c8:	08002433 	.word	0x08002433
 80023cc:	0800264b 	.word	0x0800264b
 80023d0:	0800264b 	.word	0x0800264b
 80023d4:	0800264b 	.word	0x0800264b
 80023d8:	0800264b 	.word	0x0800264b
 80023dc:	0800264b 	.word	0x0800264b
 80023e0:	0800264b 	.word	0x0800264b
 80023e4:	0800264b 	.word	0x0800264b
 80023e8:	08002439 	.word	0x08002439
 80023ec:	0800264b 	.word	0x0800264b
 80023f0:	0800264b 	.word	0x0800264b
 80023f4:	0800264b 	.word	0x0800264b
 80023f8:	0800264b 	.word	0x0800264b
 80023fc:	0800264b 	.word	0x0800264b
 8002400:	0800264b 	.word	0x0800264b
 8002404:	0800264b 	.word	0x0800264b
 8002408:	0800243f 	.word	0x0800243f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800240c:	4b94      	ldr	r3, [pc, #592]	; (8002660 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0320 	and.w	r3, r3, #32
 8002414:	2b00      	cmp	r3, #0
 8002416:	d009      	beq.n	800242c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002418:	4b91      	ldr	r3, [pc, #580]	; (8002660 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	08db      	lsrs	r3, r3, #3
 800241e:	f003 0303 	and.w	r3, r3, #3
 8002422:	4a90      	ldr	r2, [pc, #576]	; (8002664 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002424:	fa22 f303 	lsr.w	r3, r2, r3
 8002428:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800242a:	e111      	b.n	8002650 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800242c:	4b8d      	ldr	r3, [pc, #564]	; (8002664 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800242e:	61bb      	str	r3, [r7, #24]
    break;
 8002430:	e10e      	b.n	8002650 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002432:	4b8d      	ldr	r3, [pc, #564]	; (8002668 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002434:	61bb      	str	r3, [r7, #24]
    break;
 8002436:	e10b      	b.n	8002650 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002438:	4b8c      	ldr	r3, [pc, #560]	; (800266c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800243a:	61bb      	str	r3, [r7, #24]
    break;
 800243c:	e108      	b.n	8002650 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800243e:	4b88      	ldr	r3, [pc, #544]	; (8002660 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002442:	f003 0303 	and.w	r3, r3, #3
 8002446:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002448:	4b85      	ldr	r3, [pc, #532]	; (8002660 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800244a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800244c:	091b      	lsrs	r3, r3, #4
 800244e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002452:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002454:	4b82      	ldr	r3, [pc, #520]	; (8002660 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002458:	f003 0301 	and.w	r3, r3, #1
 800245c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800245e:	4b80      	ldr	r3, [pc, #512]	; (8002660 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002460:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002462:	08db      	lsrs	r3, r3, #3
 8002464:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002468:	68fa      	ldr	r2, [r7, #12]
 800246a:	fb02 f303 	mul.w	r3, r2, r3
 800246e:	ee07 3a90 	vmov	s15, r3
 8002472:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002476:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	2b00      	cmp	r3, #0
 800247e:	f000 80e1 	beq.w	8002644 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	2b02      	cmp	r3, #2
 8002486:	f000 8083 	beq.w	8002590 <HAL_RCC_GetSysClockFreq+0x204>
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	2b02      	cmp	r3, #2
 800248e:	f200 80a1 	bhi.w	80025d4 <HAL_RCC_GetSysClockFreq+0x248>
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d003      	beq.n	80024a0 <HAL_RCC_GetSysClockFreq+0x114>
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	2b01      	cmp	r3, #1
 800249c:	d056      	beq.n	800254c <HAL_RCC_GetSysClockFreq+0x1c0>
 800249e:	e099      	b.n	80025d4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80024a0:	4b6f      	ldr	r3, [pc, #444]	; (8002660 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0320 	and.w	r3, r3, #32
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d02d      	beq.n	8002508 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80024ac:	4b6c      	ldr	r3, [pc, #432]	; (8002660 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	08db      	lsrs	r3, r3, #3
 80024b2:	f003 0303 	and.w	r3, r3, #3
 80024b6:	4a6b      	ldr	r2, [pc, #428]	; (8002664 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80024b8:	fa22 f303 	lsr.w	r3, r2, r3
 80024bc:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	ee07 3a90 	vmov	s15, r3
 80024c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	ee07 3a90 	vmov	s15, r3
 80024ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024d6:	4b62      	ldr	r3, [pc, #392]	; (8002660 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024de:	ee07 3a90 	vmov	s15, r3
 80024e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80024ea:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002670 <HAL_RCC_GetSysClockFreq+0x2e4>
 80024ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80024f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80024f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80024fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80024fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002502:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8002506:	e087      	b.n	8002618 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	ee07 3a90 	vmov	s15, r3
 800250e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002512:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002674 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002516:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800251a:	4b51      	ldr	r3, [pc, #324]	; (8002660 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800251c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002522:	ee07 3a90 	vmov	s15, r3
 8002526:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800252a:	ed97 6a02 	vldr	s12, [r7, #8]
 800252e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002670 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002532:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002536:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800253a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800253e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002542:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002546:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800254a:	e065      	b.n	8002618 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	ee07 3a90 	vmov	s15, r3
 8002552:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002556:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002678 <HAL_RCC_GetSysClockFreq+0x2ec>
 800255a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800255e:	4b40      	ldr	r3, [pc, #256]	; (8002660 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002562:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002566:	ee07 3a90 	vmov	s15, r3
 800256a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800256e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002572:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002670 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002576:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800257a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800257e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002582:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002586:	ee67 7a27 	vmul.f32	s15, s14, s15
 800258a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800258e:	e043      	b.n	8002618 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	ee07 3a90 	vmov	s15, r3
 8002596:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800259a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800267c <HAL_RCC_GetSysClockFreq+0x2f0>
 800259e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80025a2:	4b2f      	ldr	r3, [pc, #188]	; (8002660 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025aa:	ee07 3a90 	vmov	s15, r3
 80025ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80025b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80025b6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002670 <HAL_RCC_GetSysClockFreq+0x2e4>
 80025ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80025be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80025c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80025c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80025ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80025d2:	e021      	b.n	8002618 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	ee07 3a90 	vmov	s15, r3
 80025da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025de:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002678 <HAL_RCC_GetSysClockFreq+0x2ec>
 80025e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80025e6:	4b1e      	ldr	r3, [pc, #120]	; (8002660 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025ee:	ee07 3a90 	vmov	s15, r3
 80025f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80025f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80025fa:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002670 <HAL_RCC_GetSysClockFreq+0x2e4>
 80025fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002602:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002606:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800260a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800260e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002612:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002616:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002618:	4b11      	ldr	r3, [pc, #68]	; (8002660 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800261a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261c:	0a5b      	lsrs	r3, r3, #9
 800261e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002622:	3301      	adds	r3, #1
 8002624:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	ee07 3a90 	vmov	s15, r3
 800262c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002630:	edd7 6a07 	vldr	s13, [r7, #28]
 8002634:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002638:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800263c:	ee17 3a90 	vmov	r3, s15
 8002640:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8002642:	e005      	b.n	8002650 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8002644:	2300      	movs	r3, #0
 8002646:	61bb      	str	r3, [r7, #24]
    break;
 8002648:	e002      	b.n	8002650 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800264a:	4b07      	ldr	r3, [pc, #28]	; (8002668 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800264c:	61bb      	str	r3, [r7, #24]
    break;
 800264e:	bf00      	nop
  }

  return sysclockfreq;
 8002650:	69bb      	ldr	r3, [r7, #24]
}
 8002652:	4618      	mov	r0, r3
 8002654:	3724      	adds	r7, #36	; 0x24
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop
 8002660:	58024400 	.word	0x58024400
 8002664:	03d09000 	.word	0x03d09000
 8002668:	003d0900 	.word	0x003d0900
 800266c:	007a1200 	.word	0x007a1200
 8002670:	46000000 	.word	0x46000000
 8002674:	4c742400 	.word	0x4c742400
 8002678:	4a742400 	.word	0x4a742400
 800267c:	4af42400 	.word	0x4af42400

08002680 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002686:	f7ff fe81 	bl	800238c <HAL_RCC_GetSysClockFreq>
 800268a:	4602      	mov	r2, r0
 800268c:	4b10      	ldr	r3, [pc, #64]	; (80026d0 <HAL_RCC_GetHCLKFreq+0x50>)
 800268e:	699b      	ldr	r3, [r3, #24]
 8002690:	0a1b      	lsrs	r3, r3, #8
 8002692:	f003 030f 	and.w	r3, r3, #15
 8002696:	490f      	ldr	r1, [pc, #60]	; (80026d4 <HAL_RCC_GetHCLKFreq+0x54>)
 8002698:	5ccb      	ldrb	r3, [r1, r3]
 800269a:	f003 031f 	and.w	r3, r3, #31
 800269e:	fa22 f303 	lsr.w	r3, r2, r3
 80026a2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80026a4:	4b0a      	ldr	r3, [pc, #40]	; (80026d0 <HAL_RCC_GetHCLKFreq+0x50>)
 80026a6:	699b      	ldr	r3, [r3, #24]
 80026a8:	f003 030f 	and.w	r3, r3, #15
 80026ac:	4a09      	ldr	r2, [pc, #36]	; (80026d4 <HAL_RCC_GetHCLKFreq+0x54>)
 80026ae:	5cd3      	ldrb	r3, [r2, r3]
 80026b0:	f003 031f 	and.w	r3, r3, #31
 80026b4:	687a      	ldr	r2, [r7, #4]
 80026b6:	fa22 f303 	lsr.w	r3, r2, r3
 80026ba:	4a07      	ldr	r2, [pc, #28]	; (80026d8 <HAL_RCC_GetHCLKFreq+0x58>)
 80026bc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80026be:	4a07      	ldr	r2, [pc, #28]	; (80026dc <HAL_RCC_GetHCLKFreq+0x5c>)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80026c4:	4b04      	ldr	r3, [pc, #16]	; (80026d8 <HAL_RCC_GetHCLKFreq+0x58>)
 80026c6:	681b      	ldr	r3, [r3, #0]
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	3708      	adds	r7, #8
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	58024400 	.word	0x58024400
 80026d4:	08005fd8 	.word	0x08005fd8
 80026d8:	24000004 	.word	0x24000004
 80026dc:	24000000 	.word	0x24000000

080026e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80026e4:	f7ff ffcc 	bl	8002680 <HAL_RCC_GetHCLKFreq>
 80026e8:	4602      	mov	r2, r0
 80026ea:	4b06      	ldr	r3, [pc, #24]	; (8002704 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026ec:	69db      	ldr	r3, [r3, #28]
 80026ee:	091b      	lsrs	r3, r3, #4
 80026f0:	f003 0307 	and.w	r3, r3, #7
 80026f4:	4904      	ldr	r1, [pc, #16]	; (8002708 <HAL_RCC_GetPCLK1Freq+0x28>)
 80026f6:	5ccb      	ldrb	r3, [r1, r3]
 80026f8:	f003 031f 	and.w	r3, r3, #31
 80026fc:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002700:	4618      	mov	r0, r3
 8002702:	bd80      	pop	{r7, pc}
 8002704:	58024400 	.word	0x58024400
 8002708:	08005fd8 	.word	0x08005fd8

0800270c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002710:	f7ff ffb6 	bl	8002680 <HAL_RCC_GetHCLKFreq>
 8002714:	4602      	mov	r2, r0
 8002716:	4b06      	ldr	r3, [pc, #24]	; (8002730 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002718:	69db      	ldr	r3, [r3, #28]
 800271a:	0a1b      	lsrs	r3, r3, #8
 800271c:	f003 0307 	and.w	r3, r3, #7
 8002720:	4904      	ldr	r1, [pc, #16]	; (8002734 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002722:	5ccb      	ldrb	r3, [r1, r3]
 8002724:	f003 031f 	and.w	r3, r3, #31
 8002728:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800272c:	4618      	mov	r0, r3
 800272e:	bd80      	pop	{r7, pc}
 8002730:	58024400 	.word	0x58024400
 8002734:	08005fd8 	.word	0x08005fd8

08002738 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b086      	sub	sp, #24
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002740:	2300      	movs	r3, #0
 8002742:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002744:	2300      	movs	r3, #0
 8002746:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002750:	2b00      	cmp	r3, #0
 8002752:	d03f      	beq.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002758:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800275c:	d02a      	beq.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800275e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002762:	d824      	bhi.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002764:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002768:	d018      	beq.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800276a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800276e:	d81e      	bhi.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002770:	2b00      	cmp	r3, #0
 8002772:	d003      	beq.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002774:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002778:	d007      	beq.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800277a:	e018      	b.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800277c:	4ba3      	ldr	r3, [pc, #652]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800277e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002780:	4aa2      	ldr	r2, [pc, #648]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002782:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002786:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002788:	e015      	b.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	3304      	adds	r3, #4
 800278e:	2102      	movs	r1, #2
 8002790:	4618      	mov	r0, r3
 8002792:	f001 f9d5 	bl	8003b40 <RCCEx_PLL2_Config>
 8002796:	4603      	mov	r3, r0
 8002798:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800279a:	e00c      	b.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	3324      	adds	r3, #36	; 0x24
 80027a0:	2102      	movs	r1, #2
 80027a2:	4618      	mov	r0, r3
 80027a4:	f001 fa7e 	bl	8003ca4 <RCCEx_PLL3_Config>
 80027a8:	4603      	mov	r3, r0
 80027aa:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80027ac:	e003      	b.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	75fb      	strb	r3, [r7, #23]
      break;
 80027b2:	e000      	b.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80027b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80027b6:	7dfb      	ldrb	r3, [r7, #23]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d109      	bne.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80027bc:	4b93      	ldr	r3, [pc, #588]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80027be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80027c8:	4990      	ldr	r1, [pc, #576]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80027ca:	4313      	orrs	r3, r2
 80027cc:	650b      	str	r3, [r1, #80]	; 0x50
 80027ce:	e001      	b.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027d0:	7dfb      	ldrb	r3, [r7, #23]
 80027d2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d03d      	beq.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027e4:	2b04      	cmp	r3, #4
 80027e6:	d826      	bhi.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80027e8:	a201      	add	r2, pc, #4	; (adr r2, 80027f0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80027ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027ee:	bf00      	nop
 80027f0:	08002805 	.word	0x08002805
 80027f4:	08002813 	.word	0x08002813
 80027f8:	08002825 	.word	0x08002825
 80027fc:	0800283d 	.word	0x0800283d
 8002800:	0800283d 	.word	0x0800283d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002804:	4b81      	ldr	r3, [pc, #516]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002808:	4a80      	ldr	r2, [pc, #512]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800280a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800280e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002810:	e015      	b.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	3304      	adds	r3, #4
 8002816:	2100      	movs	r1, #0
 8002818:	4618      	mov	r0, r3
 800281a:	f001 f991 	bl	8003b40 <RCCEx_PLL2_Config>
 800281e:	4603      	mov	r3, r0
 8002820:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002822:	e00c      	b.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	3324      	adds	r3, #36	; 0x24
 8002828:	2100      	movs	r1, #0
 800282a:	4618      	mov	r0, r3
 800282c:	f001 fa3a 	bl	8003ca4 <RCCEx_PLL3_Config>
 8002830:	4603      	mov	r3, r0
 8002832:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002834:	e003      	b.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	75fb      	strb	r3, [r7, #23]
      break;
 800283a:	e000      	b.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800283c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800283e:	7dfb      	ldrb	r3, [r7, #23]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d109      	bne.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002844:	4b71      	ldr	r3, [pc, #452]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002846:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002848:	f023 0207 	bic.w	r2, r3, #7
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002850:	496e      	ldr	r1, [pc, #440]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002852:	4313      	orrs	r3, r2
 8002854:	650b      	str	r3, [r1, #80]	; 0x50
 8002856:	e001      	b.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002858:	7dfb      	ldrb	r3, [r7, #23]
 800285a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002864:	2b00      	cmp	r3, #0
 8002866:	d042      	beq.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800286c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002870:	d02b      	beq.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x192>
 8002872:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002876:	d825      	bhi.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002878:	2bc0      	cmp	r3, #192	; 0xc0
 800287a:	d028      	beq.n	80028ce <HAL_RCCEx_PeriphCLKConfig+0x196>
 800287c:	2bc0      	cmp	r3, #192	; 0xc0
 800287e:	d821      	bhi.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002880:	2b80      	cmp	r3, #128	; 0x80
 8002882:	d016      	beq.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8002884:	2b80      	cmp	r3, #128	; 0x80
 8002886:	d81d      	bhi.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002888:	2b00      	cmp	r3, #0
 800288a:	d002      	beq.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800288c:	2b40      	cmp	r3, #64	; 0x40
 800288e:	d007      	beq.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8002890:	e018      	b.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002892:	4b5e      	ldr	r3, [pc, #376]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002896:	4a5d      	ldr	r2, [pc, #372]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002898:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800289c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800289e:	e017      	b.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	3304      	adds	r3, #4
 80028a4:	2100      	movs	r1, #0
 80028a6:	4618      	mov	r0, r3
 80028a8:	f001 f94a 	bl	8003b40 <RCCEx_PLL2_Config>
 80028ac:	4603      	mov	r3, r0
 80028ae:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80028b0:	e00e      	b.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	3324      	adds	r3, #36	; 0x24
 80028b6:	2100      	movs	r1, #0
 80028b8:	4618      	mov	r0, r3
 80028ba:	f001 f9f3 	bl	8003ca4 <RCCEx_PLL3_Config>
 80028be:	4603      	mov	r3, r0
 80028c0:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80028c2:	e005      	b.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	75fb      	strb	r3, [r7, #23]
      break;
 80028c8:	e002      	b.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80028ca:	bf00      	nop
 80028cc:	e000      	b.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80028ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80028d0:	7dfb      	ldrb	r3, [r7, #23]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d109      	bne.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80028d6:	4b4d      	ldr	r3, [pc, #308]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80028d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028da:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028e2:	494a      	ldr	r1, [pc, #296]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80028e4:	4313      	orrs	r3, r2
 80028e6:	650b      	str	r3, [r1, #80]	; 0x50
 80028e8:	e001      	b.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028ea:	7dfb      	ldrb	r3, [r7, #23]
 80028ec:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d049      	beq.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002900:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002904:	d030      	beq.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8002906:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800290a:	d82a      	bhi.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800290c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002910:	d02c      	beq.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x234>
 8002912:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002916:	d824      	bhi.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002918:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800291c:	d018      	beq.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800291e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002922:	d81e      	bhi.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002924:	2b00      	cmp	r3, #0
 8002926:	d003      	beq.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002928:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800292c:	d007      	beq.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800292e:	e018      	b.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002930:	4b36      	ldr	r3, [pc, #216]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002934:	4a35      	ldr	r2, [pc, #212]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002936:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800293a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800293c:	e017      	b.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	3304      	adds	r3, #4
 8002942:	2100      	movs	r1, #0
 8002944:	4618      	mov	r0, r3
 8002946:	f001 f8fb 	bl	8003b40 <RCCEx_PLL2_Config>
 800294a:	4603      	mov	r3, r0
 800294c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800294e:	e00e      	b.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	3324      	adds	r3, #36	; 0x24
 8002954:	2100      	movs	r1, #0
 8002956:	4618      	mov	r0, r3
 8002958:	f001 f9a4 	bl	8003ca4 <RCCEx_PLL3_Config>
 800295c:	4603      	mov	r3, r0
 800295e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002960:	e005      	b.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	75fb      	strb	r3, [r7, #23]
      break;
 8002966:	e002      	b.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002968:	bf00      	nop
 800296a:	e000      	b.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800296c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800296e:	7dfb      	ldrb	r3, [r7, #23]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d10a      	bne.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002974:	4b25      	ldr	r3, [pc, #148]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002978:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002982:	4922      	ldr	r1, [pc, #136]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002984:	4313      	orrs	r3, r2
 8002986:	658b      	str	r3, [r1, #88]	; 0x58
 8002988:	e001      	b.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800298a:	7dfb      	ldrb	r3, [r7, #23]
 800298c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002996:	2b00      	cmp	r3, #0
 8002998:	d04b      	beq.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80029a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80029a4:	d030      	beq.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80029a6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80029aa:	d82a      	bhi.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80029ac:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80029b0:	d02e      	beq.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 80029b2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80029b6:	d824      	bhi.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80029b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80029bc:	d018      	beq.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80029be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80029c2:	d81e      	bhi.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d003      	beq.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80029c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029cc:	d007      	beq.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80029ce:	e018      	b.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029d0:	4b0e      	ldr	r3, [pc, #56]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80029d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d4:	4a0d      	ldr	r2, [pc, #52]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80029d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80029dc:	e019      	b.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	3304      	adds	r3, #4
 80029e2:	2100      	movs	r1, #0
 80029e4:	4618      	mov	r0, r3
 80029e6:	f001 f8ab 	bl	8003b40 <RCCEx_PLL2_Config>
 80029ea:	4603      	mov	r3, r0
 80029ec:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80029ee:	e010      	b.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	3324      	adds	r3, #36	; 0x24
 80029f4:	2100      	movs	r1, #0
 80029f6:	4618      	mov	r0, r3
 80029f8:	f001 f954 	bl	8003ca4 <RCCEx_PLL3_Config>
 80029fc:	4603      	mov	r3, r0
 80029fe:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002a00:	e007      	b.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	75fb      	strb	r3, [r7, #23]
      break;
 8002a06:	e004      	b.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8002a08:	bf00      	nop
 8002a0a:	e002      	b.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8002a0c:	58024400 	.word	0x58024400
      break;
 8002a10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a12:	7dfb      	ldrb	r3, [r7, #23]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d10a      	bne.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002a18:	4b99      	ldr	r3, [pc, #612]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002a1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a1c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002a26:	4996      	ldr	r1, [pc, #600]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	658b      	str	r3, [r1, #88]	; 0x58
 8002a2c:	e001      	b.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a2e:	7dfb      	ldrb	r3, [r7, #23]
 8002a30:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d032      	beq.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a42:	2b30      	cmp	r3, #48	; 0x30
 8002a44:	d01c      	beq.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8002a46:	2b30      	cmp	r3, #48	; 0x30
 8002a48:	d817      	bhi.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8002a4a:	2b20      	cmp	r3, #32
 8002a4c:	d00c      	beq.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8002a4e:	2b20      	cmp	r3, #32
 8002a50:	d813      	bhi.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d016      	beq.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8002a56:	2b10      	cmp	r3, #16
 8002a58:	d10f      	bne.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a5a:	4b89      	ldr	r3, [pc, #548]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a5e:	4a88      	ldr	r2, [pc, #544]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002a60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a64:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002a66:	e00e      	b.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	3304      	adds	r3, #4
 8002a6c:	2102      	movs	r1, #2
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f001 f866 	bl	8003b40 <RCCEx_PLL2_Config>
 8002a74:	4603      	mov	r3, r0
 8002a76:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002a78:	e005      	b.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	75fb      	strb	r3, [r7, #23]
      break;
 8002a7e:	e002      	b.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8002a80:	bf00      	nop
 8002a82:	e000      	b.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8002a84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a86:	7dfb      	ldrb	r3, [r7, #23]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d109      	bne.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002a8c:	4b7c      	ldr	r3, [pc, #496]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002a8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a90:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a98:	4979      	ldr	r1, [pc, #484]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002a9e:	e001      	b.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002aa0:	7dfb      	ldrb	r3, [r7, #23]
 8002aa2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d047      	beq.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ab4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ab8:	d030      	beq.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002aba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002abe:	d82a      	bhi.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002ac0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002ac4:	d02c      	beq.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002ac6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002aca:	d824      	bhi.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002acc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ad0:	d018      	beq.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8002ad2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ad6:	d81e      	bhi.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d003      	beq.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8002adc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ae0:	d007      	beq.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8002ae2:	e018      	b.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ae4:	4b66      	ldr	r3, [pc, #408]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae8:	4a65      	ldr	r2, [pc, #404]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002aea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002aee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002af0:	e017      	b.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	3304      	adds	r3, #4
 8002af6:	2100      	movs	r1, #0
 8002af8:	4618      	mov	r0, r3
 8002afa:	f001 f821 	bl	8003b40 <RCCEx_PLL2_Config>
 8002afe:	4603      	mov	r3, r0
 8002b00:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002b02:	e00e      	b.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	3324      	adds	r3, #36	; 0x24
 8002b08:	2100      	movs	r1, #0
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f001 f8ca 	bl	8003ca4 <RCCEx_PLL3_Config>
 8002b10:	4603      	mov	r3, r0
 8002b12:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002b14:	e005      	b.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	75fb      	strb	r3, [r7, #23]
      break;
 8002b1a:	e002      	b.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8002b1c:	bf00      	nop
 8002b1e:	e000      	b.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8002b20:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b22:	7dfb      	ldrb	r3, [r7, #23]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d109      	bne.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002b28:	4b55      	ldr	r3, [pc, #340]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002b2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b2c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b34:	4952      	ldr	r1, [pc, #328]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002b36:	4313      	orrs	r3, r2
 8002b38:	650b      	str	r3, [r1, #80]	; 0x50
 8002b3a:	e001      	b.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b3c:	7dfb      	ldrb	r3, [r7, #23]
 8002b3e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d049      	beq.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b54:	d02e      	beq.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002b56:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b5a:	d828      	bhi.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002b5c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002b60:	d02a      	beq.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8002b62:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002b66:	d822      	bhi.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002b68:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002b6c:	d026      	beq.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x484>
 8002b6e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002b72:	d81c      	bhi.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002b74:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b78:	d010      	beq.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x464>
 8002b7a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b7e:	d816      	bhi.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d01d      	beq.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8002b84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b88:	d111      	bne.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	3304      	adds	r3, #4
 8002b8e:	2101      	movs	r1, #1
 8002b90:	4618      	mov	r0, r3
 8002b92:	f000 ffd5 	bl	8003b40 <RCCEx_PLL2_Config>
 8002b96:	4603      	mov	r3, r0
 8002b98:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002b9a:	e012      	b.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	3324      	adds	r3, #36	; 0x24
 8002ba0:	2101      	movs	r1, #1
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f001 f87e 	bl	8003ca4 <RCCEx_PLL3_Config>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002bac:	e009      	b.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	75fb      	strb	r3, [r7, #23]
      break;
 8002bb2:	e006      	b.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002bb4:	bf00      	nop
 8002bb6:	e004      	b.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002bb8:	bf00      	nop
 8002bba:	e002      	b.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002bbc:	bf00      	nop
 8002bbe:	e000      	b.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002bc0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002bc2:	7dfb      	ldrb	r3, [r7, #23]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d109      	bne.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002bc8:	4b2d      	ldr	r3, [pc, #180]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002bca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bcc:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bd4:	492a      	ldr	r1, [pc, #168]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	650b      	str	r3, [r1, #80]	; 0x50
 8002bda:	e001      	b.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bdc:	7dfb      	ldrb	r3, [r7, #23]
 8002bde:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d04d      	beq.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002bf2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002bf6:	d02e      	beq.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8002bf8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002bfc:	d828      	bhi.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002bfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c02:	d02a      	beq.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x522>
 8002c04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c08:	d822      	bhi.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002c0a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002c0e:	d026      	beq.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x526>
 8002c10:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002c14:	d81c      	bhi.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002c16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c1a:	d010      	beq.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x506>
 8002c1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c20:	d816      	bhi.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d01d      	beq.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8002c26:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c2a:	d111      	bne.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	3304      	adds	r3, #4
 8002c30:	2101      	movs	r1, #1
 8002c32:	4618      	mov	r0, r3
 8002c34:	f000 ff84 	bl	8003b40 <RCCEx_PLL2_Config>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002c3c:	e012      	b.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	3324      	adds	r3, #36	; 0x24
 8002c42:	2101      	movs	r1, #1
 8002c44:	4618      	mov	r0, r3
 8002c46:	f001 f82d 	bl	8003ca4 <RCCEx_PLL3_Config>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002c4e:	e009      	b.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	75fb      	strb	r3, [r7, #23]
      break;
 8002c54:	e006      	b.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002c56:	bf00      	nop
 8002c58:	e004      	b.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002c5a:	bf00      	nop
 8002c5c:	e002      	b.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002c5e:	bf00      	nop
 8002c60:	e000      	b.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002c62:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c64:	7dfb      	ldrb	r3, [r7, #23]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d10c      	bne.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002c6a:	4b05      	ldr	r3, [pc, #20]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002c6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c6e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002c78:	4901      	ldr	r1, [pc, #4]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	658b      	str	r3, [r1, #88]	; 0x58
 8002c7e:	e003      	b.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8002c80:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c84:	7dfb      	ldrb	r3, [r7, #23]
 8002c86:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d02f      	beq.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c9c:	d00e      	beq.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x584>
 8002c9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ca2:	d814      	bhi.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x596>
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d015      	beq.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8002ca8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002cac:	d10f      	bne.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002cae:	4baf      	ldr	r3, [pc, #700]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb2:	4aae      	ldr	r2, [pc, #696]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002cb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cb8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002cba:	e00c      	b.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	3304      	adds	r3, #4
 8002cc0:	2101      	movs	r1, #1
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f000 ff3c 	bl	8003b40 <RCCEx_PLL2_Config>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002ccc:	e003      	b.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	75fb      	strb	r3, [r7, #23]
      break;
 8002cd2:	e000      	b.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8002cd4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002cd6:	7dfb      	ldrb	r3, [r7, #23]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d109      	bne.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002cdc:	4ba3      	ldr	r3, [pc, #652]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002cde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ce0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ce8:	49a0      	ldr	r1, [pc, #640]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002cea:	4313      	orrs	r3, r2
 8002cec:	650b      	str	r3, [r1, #80]	; 0x50
 8002cee:	e001      	b.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cf0:	7dfb      	ldrb	r3, [r7, #23]
 8002cf2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d032      	beq.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d04:	2b03      	cmp	r3, #3
 8002d06:	d81b      	bhi.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8002d08:	a201      	add	r2, pc, #4	; (adr r2, 8002d10 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8002d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d0e:	bf00      	nop
 8002d10:	08002d47 	.word	0x08002d47
 8002d14:	08002d21 	.word	0x08002d21
 8002d18:	08002d2f 	.word	0x08002d2f
 8002d1c:	08002d47 	.word	0x08002d47
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d20:	4b92      	ldr	r3, [pc, #584]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d24:	4a91      	ldr	r2, [pc, #580]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002d26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d2a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002d2c:	e00c      	b.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	3304      	adds	r3, #4
 8002d32:	2102      	movs	r1, #2
 8002d34:	4618      	mov	r0, r3
 8002d36:	f000 ff03 	bl	8003b40 <RCCEx_PLL2_Config>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002d3e:	e003      	b.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	75fb      	strb	r3, [r7, #23]
      break;
 8002d44:	e000      	b.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8002d46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d48:	7dfb      	ldrb	r3, [r7, #23]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d109      	bne.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002d4e:	4b87      	ldr	r3, [pc, #540]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002d50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d52:	f023 0203 	bic.w	r2, r3, #3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d5a:	4984      	ldr	r1, [pc, #528]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002d60:	e001      	b.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d62:	7dfb      	ldrb	r3, [r7, #23]
 8002d64:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	f000 8086 	beq.w	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d74:	4b7e      	ldr	r3, [pc, #504]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a7d      	ldr	r2, [pc, #500]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8002d7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d7e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d80:	f7fe f994 	bl	80010ac <HAL_GetTick>
 8002d84:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d86:	e009      	b.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d88:	f7fe f990 	bl	80010ac <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	2b64      	cmp	r3, #100	; 0x64
 8002d94:	d902      	bls.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	75fb      	strb	r3, [r7, #23]
        break;
 8002d9a:	e005      	b.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d9c:	4b74      	ldr	r3, [pc, #464]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d0ef      	beq.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8002da8:	7dfb      	ldrb	r3, [r7, #23]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d166      	bne.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002dae:	4b6f      	ldr	r3, [pc, #444]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002db0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002db8:	4053      	eors	r3, r2
 8002dba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d013      	beq.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002dc2:	4b6a      	ldr	r3, [pc, #424]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dca:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002dcc:	4b67      	ldr	r3, [pc, #412]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002dce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dd0:	4a66      	ldr	r2, [pc, #408]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002dd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dd6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002dd8:	4b64      	ldr	r3, [pc, #400]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ddc:	4a63      	ldr	r2, [pc, #396]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002dde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002de2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002de4:	4a61      	ldr	r2, [pc, #388]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002df0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002df4:	d115      	bne.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002df6:	f7fe f959 	bl	80010ac <HAL_GetTick>
 8002dfa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002dfc:	e00b      	b.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dfe:	f7fe f955 	bl	80010ac <HAL_GetTick>
 8002e02:	4602      	mov	r2, r0
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d902      	bls.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8002e10:	2303      	movs	r3, #3
 8002e12:	75fb      	strb	r3, [r7, #23]
            break;
 8002e14:	e005      	b.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e16:	4b55      	ldr	r3, [pc, #340]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e1a:	f003 0302 	and.w	r3, r3, #2
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d0ed      	beq.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8002e22:	7dfb      	ldrb	r3, [r7, #23]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d126      	bne.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002e2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e36:	d10d      	bne.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8002e38:	4b4c      	ldr	r3, [pc, #304]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002e3a:	691b      	ldr	r3, [r3, #16]
 8002e3c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002e46:	0919      	lsrs	r1, r3, #4
 8002e48:	4b4a      	ldr	r3, [pc, #296]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8002e4a:	400b      	ands	r3, r1
 8002e4c:	4947      	ldr	r1, [pc, #284]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	610b      	str	r3, [r1, #16]
 8002e52:	e005      	b.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8002e54:	4b45      	ldr	r3, [pc, #276]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002e56:	691b      	ldr	r3, [r3, #16]
 8002e58:	4a44      	ldr	r2, [pc, #272]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002e5a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002e5e:	6113      	str	r3, [r2, #16]
 8002e60:	4b42      	ldr	r3, [pc, #264]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002e62:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002e6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e6e:	493f      	ldr	r1, [pc, #252]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002e70:	4313      	orrs	r3, r2
 8002e72:	670b      	str	r3, [r1, #112]	; 0x70
 8002e74:	e004      	b.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002e76:	7dfb      	ldrb	r3, [r7, #23]
 8002e78:	75bb      	strb	r3, [r7, #22]
 8002e7a:	e001      	b.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e7c:	7dfb      	ldrb	r3, [r7, #23]
 8002e7e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0301 	and.w	r3, r3, #1
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	f000 8085 	beq.w	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e92:	2b28      	cmp	r3, #40	; 0x28
 8002e94:	d866      	bhi.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8002e96:	a201      	add	r2, pc, #4	; (adr r2, 8002e9c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8002e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e9c:	08002f79 	.word	0x08002f79
 8002ea0:	08002f65 	.word	0x08002f65
 8002ea4:	08002f65 	.word	0x08002f65
 8002ea8:	08002f65 	.word	0x08002f65
 8002eac:	08002f65 	.word	0x08002f65
 8002eb0:	08002f65 	.word	0x08002f65
 8002eb4:	08002f65 	.word	0x08002f65
 8002eb8:	08002f65 	.word	0x08002f65
 8002ebc:	08002f41 	.word	0x08002f41
 8002ec0:	08002f65 	.word	0x08002f65
 8002ec4:	08002f65 	.word	0x08002f65
 8002ec8:	08002f65 	.word	0x08002f65
 8002ecc:	08002f65 	.word	0x08002f65
 8002ed0:	08002f65 	.word	0x08002f65
 8002ed4:	08002f65 	.word	0x08002f65
 8002ed8:	08002f65 	.word	0x08002f65
 8002edc:	08002f53 	.word	0x08002f53
 8002ee0:	08002f65 	.word	0x08002f65
 8002ee4:	08002f65 	.word	0x08002f65
 8002ee8:	08002f65 	.word	0x08002f65
 8002eec:	08002f65 	.word	0x08002f65
 8002ef0:	08002f65 	.word	0x08002f65
 8002ef4:	08002f65 	.word	0x08002f65
 8002ef8:	08002f65 	.word	0x08002f65
 8002efc:	08002f79 	.word	0x08002f79
 8002f00:	08002f65 	.word	0x08002f65
 8002f04:	08002f65 	.word	0x08002f65
 8002f08:	08002f65 	.word	0x08002f65
 8002f0c:	08002f65 	.word	0x08002f65
 8002f10:	08002f65 	.word	0x08002f65
 8002f14:	08002f65 	.word	0x08002f65
 8002f18:	08002f65 	.word	0x08002f65
 8002f1c:	08002f79 	.word	0x08002f79
 8002f20:	08002f65 	.word	0x08002f65
 8002f24:	08002f65 	.word	0x08002f65
 8002f28:	08002f65 	.word	0x08002f65
 8002f2c:	08002f65 	.word	0x08002f65
 8002f30:	08002f65 	.word	0x08002f65
 8002f34:	08002f65 	.word	0x08002f65
 8002f38:	08002f65 	.word	0x08002f65
 8002f3c:	08002f79 	.word	0x08002f79
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	3304      	adds	r3, #4
 8002f44:	2101      	movs	r1, #1
 8002f46:	4618      	mov	r0, r3
 8002f48:	f000 fdfa 	bl	8003b40 <RCCEx_PLL2_Config>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002f50:	e013      	b.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	3324      	adds	r3, #36	; 0x24
 8002f56:	2101      	movs	r1, #1
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f000 fea3 	bl	8003ca4 <RCCEx_PLL3_Config>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002f62:	e00a      	b.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	75fb      	strb	r3, [r7, #23]
      break;
 8002f68:	e007      	b.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002f6a:	bf00      	nop
 8002f6c:	58024400 	.word	0x58024400
 8002f70:	58024800 	.word	0x58024800
 8002f74:	00ffffcf 	.word	0x00ffffcf
      break;
 8002f78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f7a:	7dfb      	ldrb	r3, [r7, #23]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d109      	bne.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002f80:	4b96      	ldr	r3, [pc, #600]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002f82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f84:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f8c:	4993      	ldr	r1, [pc, #588]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	654b      	str	r3, [r1, #84]	; 0x54
 8002f92:	e001      	b.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f94:	7dfb      	ldrb	r3, [r7, #23]
 8002f96:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 0302 	and.w	r3, r3, #2
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d038      	beq.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fa8:	2b05      	cmp	r3, #5
 8002faa:	d821      	bhi.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8002fac:	a201      	add	r2, pc, #4	; (adr r2, 8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8002fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fb2:	bf00      	nop
 8002fb4:	08002ff7 	.word	0x08002ff7
 8002fb8:	08002fcd 	.word	0x08002fcd
 8002fbc:	08002fdf 	.word	0x08002fdf
 8002fc0:	08002ff7 	.word	0x08002ff7
 8002fc4:	08002ff7 	.word	0x08002ff7
 8002fc8:	08002ff7 	.word	0x08002ff7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	3304      	adds	r3, #4
 8002fd0:	2101      	movs	r1, #1
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f000 fdb4 	bl	8003b40 <RCCEx_PLL2_Config>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002fdc:	e00c      	b.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	3324      	adds	r3, #36	; 0x24
 8002fe2:	2101      	movs	r1, #1
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f000 fe5d 	bl	8003ca4 <RCCEx_PLL3_Config>
 8002fea:	4603      	mov	r3, r0
 8002fec:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002fee:	e003      	b.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	75fb      	strb	r3, [r7, #23]
      break;
 8002ff4:	e000      	b.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8002ff6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ff8:	7dfb      	ldrb	r3, [r7, #23]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d109      	bne.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002ffe:	4b77      	ldr	r3, [pc, #476]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003002:	f023 0207 	bic.w	r2, r3, #7
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800300a:	4974      	ldr	r1, [pc, #464]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800300c:	4313      	orrs	r3, r2
 800300e:	654b      	str	r3, [r1, #84]	; 0x54
 8003010:	e001      	b.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003012:	7dfb      	ldrb	r3, [r7, #23]
 8003014:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 0304 	and.w	r3, r3, #4
 800301e:	2b00      	cmp	r3, #0
 8003020:	d03a      	beq.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003028:	2b05      	cmp	r3, #5
 800302a:	d821      	bhi.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x938>
 800302c:	a201      	add	r2, pc, #4	; (adr r2, 8003034 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 800302e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003032:	bf00      	nop
 8003034:	08003077 	.word	0x08003077
 8003038:	0800304d 	.word	0x0800304d
 800303c:	0800305f 	.word	0x0800305f
 8003040:	08003077 	.word	0x08003077
 8003044:	08003077 	.word	0x08003077
 8003048:	08003077 	.word	0x08003077
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	3304      	adds	r3, #4
 8003050:	2101      	movs	r1, #1
 8003052:	4618      	mov	r0, r3
 8003054:	f000 fd74 	bl	8003b40 <RCCEx_PLL2_Config>
 8003058:	4603      	mov	r3, r0
 800305a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800305c:	e00c      	b.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	3324      	adds	r3, #36	; 0x24
 8003062:	2101      	movs	r1, #1
 8003064:	4618      	mov	r0, r3
 8003066:	f000 fe1d 	bl	8003ca4 <RCCEx_PLL3_Config>
 800306a:	4603      	mov	r3, r0
 800306c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800306e:	e003      	b.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	75fb      	strb	r3, [r7, #23]
      break;
 8003074:	e000      	b.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8003076:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003078:	7dfb      	ldrb	r3, [r7, #23]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d10a      	bne.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800307e:	4b57      	ldr	r3, [pc, #348]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003082:	f023 0207 	bic.w	r2, r3, #7
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800308c:	4953      	ldr	r1, [pc, #332]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800308e:	4313      	orrs	r3, r2
 8003090:	658b      	str	r3, [r1, #88]	; 0x58
 8003092:	e001      	b.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003094:	7dfb      	ldrb	r3, [r7, #23]
 8003096:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0320 	and.w	r3, r3, #32
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d04b      	beq.n	800313c <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030ae:	d02e      	beq.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80030b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030b4:	d828      	bhi.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80030b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030ba:	d02a      	beq.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80030bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030c0:	d822      	bhi.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80030c2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80030c6:	d026      	beq.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80030c8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80030cc:	d81c      	bhi.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80030ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80030d2:	d010      	beq.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 80030d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80030d8:	d816      	bhi.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d01d      	beq.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 80030de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80030e2:	d111      	bne.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	3304      	adds	r3, #4
 80030e8:	2100      	movs	r1, #0
 80030ea:	4618      	mov	r0, r3
 80030ec:	f000 fd28 	bl	8003b40 <RCCEx_PLL2_Config>
 80030f0:	4603      	mov	r3, r0
 80030f2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80030f4:	e012      	b.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	3324      	adds	r3, #36	; 0x24
 80030fa:	2102      	movs	r1, #2
 80030fc:	4618      	mov	r0, r3
 80030fe:	f000 fdd1 	bl	8003ca4 <RCCEx_PLL3_Config>
 8003102:	4603      	mov	r3, r0
 8003104:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003106:	e009      	b.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	75fb      	strb	r3, [r7, #23]
      break;
 800310c:	e006      	b.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800310e:	bf00      	nop
 8003110:	e004      	b.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003112:	bf00      	nop
 8003114:	e002      	b.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003116:	bf00      	nop
 8003118:	e000      	b.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800311a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800311c:	7dfb      	ldrb	r3, [r7, #23]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d10a      	bne.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003122:	4b2e      	ldr	r3, [pc, #184]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003126:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003130:	492a      	ldr	r1, [pc, #168]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003132:	4313      	orrs	r3, r2
 8003134:	654b      	str	r3, [r1, #84]	; 0x54
 8003136:	e001      	b.n	800313c <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003138:	7dfb      	ldrb	r3, [r7, #23]
 800313a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003144:	2b00      	cmp	r3, #0
 8003146:	d04d      	beq.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800314e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003152:	d02e      	beq.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8003154:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003158:	d828      	bhi.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800315a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800315e:	d02a      	beq.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8003160:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003164:	d822      	bhi.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003166:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800316a:	d026      	beq.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800316c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003170:	d81c      	bhi.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003172:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003176:	d010      	beq.n	800319a <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8003178:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800317c:	d816      	bhi.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800317e:	2b00      	cmp	r3, #0
 8003180:	d01d      	beq.n	80031be <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8003182:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003186:	d111      	bne.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	3304      	adds	r3, #4
 800318c:	2100      	movs	r1, #0
 800318e:	4618      	mov	r0, r3
 8003190:	f000 fcd6 	bl	8003b40 <RCCEx_PLL2_Config>
 8003194:	4603      	mov	r3, r0
 8003196:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003198:	e012      	b.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	3324      	adds	r3, #36	; 0x24
 800319e:	2102      	movs	r1, #2
 80031a0:	4618      	mov	r0, r3
 80031a2:	f000 fd7f 	bl	8003ca4 <RCCEx_PLL3_Config>
 80031a6:	4603      	mov	r3, r0
 80031a8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80031aa:	e009      	b.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	75fb      	strb	r3, [r7, #23]
      break;
 80031b0:	e006      	b.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80031b2:	bf00      	nop
 80031b4:	e004      	b.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80031b6:	bf00      	nop
 80031b8:	e002      	b.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80031ba:	bf00      	nop
 80031bc:	e000      	b.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80031be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031c0:	7dfb      	ldrb	r3, [r7, #23]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d10c      	bne.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80031c6:	4b05      	ldr	r3, [pc, #20]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80031c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ca:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031d4:	4901      	ldr	r1, [pc, #4]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80031d6:	4313      	orrs	r3, r2
 80031d8:	658b      	str	r3, [r1, #88]	; 0x58
 80031da:	e003      	b.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80031dc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031e0:	7dfb      	ldrb	r3, [r7, #23]
 80031e2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d04b      	beq.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80031f6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80031fa:	d02e      	beq.n	800325a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80031fc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003200:	d828      	bhi.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003202:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003206:	d02a      	beq.n	800325e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8003208:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800320c:	d822      	bhi.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800320e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003212:	d026      	beq.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8003214:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003218:	d81c      	bhi.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800321a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800321e:	d010      	beq.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8003220:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003224:	d816      	bhi.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003226:	2b00      	cmp	r3, #0
 8003228:	d01d      	beq.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800322a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800322e:	d111      	bne.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	3304      	adds	r3, #4
 8003234:	2100      	movs	r1, #0
 8003236:	4618      	mov	r0, r3
 8003238:	f000 fc82 	bl	8003b40 <RCCEx_PLL2_Config>
 800323c:	4603      	mov	r3, r0
 800323e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003240:	e012      	b.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	3324      	adds	r3, #36	; 0x24
 8003246:	2102      	movs	r1, #2
 8003248:	4618      	mov	r0, r3
 800324a:	f000 fd2b 	bl	8003ca4 <RCCEx_PLL3_Config>
 800324e:	4603      	mov	r3, r0
 8003250:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003252:	e009      	b.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	75fb      	strb	r3, [r7, #23]
      break;
 8003258:	e006      	b.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800325a:	bf00      	nop
 800325c:	e004      	b.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800325e:	bf00      	nop
 8003260:	e002      	b.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003262:	bf00      	nop
 8003264:	e000      	b.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003266:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003268:	7dfb      	ldrb	r3, [r7, #23]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d10a      	bne.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800326e:	4b9d      	ldr	r3, [pc, #628]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003272:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800327c:	4999      	ldr	r1, [pc, #612]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800327e:	4313      	orrs	r3, r2
 8003280:	658b      	str	r3, [r1, #88]	; 0x58
 8003282:	e001      	b.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003284:	7dfb      	ldrb	r3, [r7, #23]
 8003286:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 0308 	and.w	r3, r3, #8
 8003290:	2b00      	cmp	r3, #0
 8003292:	d01a      	beq.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800329a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800329e:	d10a      	bne.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	3324      	adds	r3, #36	; 0x24
 80032a4:	2102      	movs	r1, #2
 80032a6:	4618      	mov	r0, r3
 80032a8:	f000 fcfc 	bl	8003ca4 <RCCEx_PLL3_Config>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d001      	beq.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80032b6:	4b8b      	ldr	r3, [pc, #556]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80032b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032ba:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032c4:	4987      	ldr	r1, [pc, #540]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80032c6:	4313      	orrs	r3, r2
 80032c8:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0310 	and.w	r3, r3, #16
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d01a      	beq.n	800330c <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032e0:	d10a      	bne.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	3324      	adds	r3, #36	; 0x24
 80032e6:	2102      	movs	r1, #2
 80032e8:	4618      	mov	r0, r3
 80032ea:	f000 fcdb 	bl	8003ca4 <RCCEx_PLL3_Config>
 80032ee:	4603      	mov	r3, r0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d001      	beq.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80032f8:	4b7a      	ldr	r3, [pc, #488]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80032fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003306:	4977      	ldr	r1, [pc, #476]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003308:	4313      	orrs	r3, r2
 800330a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003314:	2b00      	cmp	r3, #0
 8003316:	d034      	beq.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800331e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003322:	d01d      	beq.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8003324:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003328:	d817      	bhi.n	800335a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800332a:	2b00      	cmp	r3, #0
 800332c:	d003      	beq.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800332e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003332:	d009      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8003334:	e011      	b.n	800335a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	3304      	adds	r3, #4
 800333a:	2100      	movs	r1, #0
 800333c:	4618      	mov	r0, r3
 800333e:	f000 fbff 	bl	8003b40 <RCCEx_PLL2_Config>
 8003342:	4603      	mov	r3, r0
 8003344:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003346:	e00c      	b.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	3324      	adds	r3, #36	; 0x24
 800334c:	2102      	movs	r1, #2
 800334e:	4618      	mov	r0, r3
 8003350:	f000 fca8 	bl	8003ca4 <RCCEx_PLL3_Config>
 8003354:	4603      	mov	r3, r0
 8003356:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003358:	e003      	b.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	75fb      	strb	r3, [r7, #23]
      break;
 800335e:	e000      	b.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8003360:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003362:	7dfb      	ldrb	r3, [r7, #23]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d10a      	bne.n	800337e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003368:	4b5e      	ldr	r3, [pc, #376]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800336a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800336c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003376:	495b      	ldr	r1, [pc, #364]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003378:	4313      	orrs	r3, r2
 800337a:	658b      	str	r3, [r1, #88]	; 0x58
 800337c:	e001      	b.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800337e:	7dfb      	ldrb	r3, [r7, #23]
 8003380:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800338a:	2b00      	cmp	r3, #0
 800338c:	d033      	beq.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003394:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003398:	d01c      	beq.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800339a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800339e:	d816      	bhi.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0xc96>
 80033a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033a4:	d003      	beq.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80033a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80033aa:	d007      	beq.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0xc84>
 80033ac:	e00f      	b.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033ae:	4b4d      	ldr	r3, [pc, #308]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80033b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b2:	4a4c      	ldr	r2, [pc, #304]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80033b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033b8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80033ba:	e00c      	b.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	3324      	adds	r3, #36	; 0x24
 80033c0:	2101      	movs	r1, #1
 80033c2:	4618      	mov	r0, r3
 80033c4:	f000 fc6e 	bl	8003ca4 <RCCEx_PLL3_Config>
 80033c8:	4603      	mov	r3, r0
 80033ca:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80033cc:	e003      	b.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	75fb      	strb	r3, [r7, #23]
      break;
 80033d2:	e000      	b.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 80033d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033d6:	7dfb      	ldrb	r3, [r7, #23]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d10a      	bne.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80033dc:	4b41      	ldr	r3, [pc, #260]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80033de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033e0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033ea:	493e      	ldr	r1, [pc, #248]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80033ec:	4313      	orrs	r3, r2
 80033ee:	654b      	str	r3, [r1, #84]	; 0x54
 80033f0:	e001      	b.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033f2:	7dfb      	ldrb	r3, [r7, #23]
 80033f4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d029      	beq.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003406:	2b00      	cmp	r3, #0
 8003408:	d003      	beq.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800340a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800340e:	d007      	beq.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8003410:	e00f      	b.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003412:	4b34      	ldr	r3, [pc, #208]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003416:	4a33      	ldr	r2, [pc, #204]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003418:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800341c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800341e:	e00b      	b.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	3304      	adds	r3, #4
 8003424:	2102      	movs	r1, #2
 8003426:	4618      	mov	r0, r3
 8003428:	f000 fb8a 	bl	8003b40 <RCCEx_PLL2_Config>
 800342c:	4603      	mov	r3, r0
 800342e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003430:	e002      	b.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	75fb      	strb	r3, [r7, #23]
      break;
 8003436:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003438:	7dfb      	ldrb	r3, [r7, #23]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d109      	bne.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800343e:	4b29      	ldr	r3, [pc, #164]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003442:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800344a:	4926      	ldr	r1, [pc, #152]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800344c:	4313      	orrs	r3, r2
 800344e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003450:	e001      	b.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003452:	7dfb      	ldrb	r3, [r7, #23]
 8003454:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d00a      	beq.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	3324      	adds	r3, #36	; 0x24
 8003466:	2102      	movs	r1, #2
 8003468:	4618      	mov	r0, r3
 800346a:	f000 fc1b 	bl	8003ca4 <RCCEx_PLL3_Config>
 800346e:	4603      	mov	r3, r0
 8003470:	2b00      	cmp	r3, #0
 8003472:	d001      	beq.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003480:	2b00      	cmp	r3, #0
 8003482:	d033      	beq.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003488:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800348c:	d017      	beq.n	80034be <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800348e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003492:	d811      	bhi.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8003494:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003498:	d013      	beq.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800349a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800349e:	d80b      	bhi.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d010      	beq.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 80034a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034a8:	d106      	bne.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034aa:	4b0e      	ldr	r3, [pc, #56]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80034ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ae:	4a0d      	ldr	r2, [pc, #52]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80034b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034b4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80034b6:	e007      	b.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	75fb      	strb	r3, [r7, #23]
      break;
 80034bc:	e004      	b.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80034be:	bf00      	nop
 80034c0:	e002      	b.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80034c2:	bf00      	nop
 80034c4:	e000      	b.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80034c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034c8:	7dfb      	ldrb	r3, [r7, #23]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d10c      	bne.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80034ce:	4b05      	ldr	r3, [pc, #20]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80034d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034d2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80034da:	4902      	ldr	r1, [pc, #8]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80034dc:	4313      	orrs	r3, r2
 80034de:	654b      	str	r3, [r1, #84]	; 0x54
 80034e0:	e004      	b.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 80034e2:	bf00      	nop
 80034e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034e8:	7dfb      	ldrb	r3, [r7, #23]
 80034ea:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d008      	beq.n	800350a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80034f8:	4b31      	ldr	r3, [pc, #196]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80034fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034fc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003504:	492e      	ldr	r1, [pc, #184]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003506:	4313      	orrs	r3, r2
 8003508:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d009      	beq.n	800352a <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003516:	4b2a      	ldr	r3, [pc, #168]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003518:	691b      	ldr	r3, [r3, #16]
 800351a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003524:	4926      	ldr	r1, [pc, #152]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003526:	4313      	orrs	r3, r2
 8003528:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d008      	beq.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003536:	4b22      	ldr	r3, [pc, #136]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003538:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800353a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003542:	491f      	ldr	r1, [pc, #124]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003544:	4313      	orrs	r3, r2
 8003546:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003550:	2b00      	cmp	r3, #0
 8003552:	d00d      	beq.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003554:	4b1a      	ldr	r3, [pc, #104]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003556:	691b      	ldr	r3, [r3, #16]
 8003558:	4a19      	ldr	r2, [pc, #100]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800355a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800355e:	6113      	str	r3, [r2, #16]
 8003560:	4b17      	ldr	r3, [pc, #92]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003562:	691a      	ldr	r2, [r3, #16]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800356a:	4915      	ldr	r1, [pc, #84]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800356c:	4313      	orrs	r3, r2
 800356e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	2b00      	cmp	r3, #0
 8003576:	da08      	bge.n	800358a <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003578:	4b11      	ldr	r3, [pc, #68]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800357a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800357c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003584:	490e      	ldr	r1, [pc, #56]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003586:	4313      	orrs	r3, r2
 8003588:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d009      	beq.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003596:	4b0a      	ldr	r3, [pc, #40]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003598:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800359a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035a4:	4906      	ldr	r1, [pc, #24]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80035a6:	4313      	orrs	r3, r2
 80035a8:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80035aa:	7dbb      	ldrb	r3, [r7, #22]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d101      	bne.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 80035b0:	2300      	movs	r3, #0
 80035b2:	e000      	b.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3718      	adds	r7, #24
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	58024400 	.word	0x58024400

080035c4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80035c8:	f7ff f85a 	bl	8002680 <HAL_RCC_GetHCLKFreq>
 80035cc:	4602      	mov	r2, r0
 80035ce:	4b06      	ldr	r3, [pc, #24]	; (80035e8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80035d0:	6a1b      	ldr	r3, [r3, #32]
 80035d2:	091b      	lsrs	r3, r3, #4
 80035d4:	f003 0307 	and.w	r3, r3, #7
 80035d8:	4904      	ldr	r1, [pc, #16]	; (80035ec <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80035da:	5ccb      	ldrb	r3, [r1, r3]
 80035dc:	f003 031f 	and.w	r3, r3, #31
 80035e0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	58024400 	.word	0x58024400
 80035ec:	08005fd8 	.word	0x08005fd8

080035f0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b089      	sub	sp, #36	; 0x24
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80035f8:	4ba1      	ldr	r3, [pc, #644]	; (8003880 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80035fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035fc:	f003 0303 	and.w	r3, r3, #3
 8003600:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8003602:	4b9f      	ldr	r3, [pc, #636]	; (8003880 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003606:	0b1b      	lsrs	r3, r3, #12
 8003608:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800360c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800360e:	4b9c      	ldr	r3, [pc, #624]	; (8003880 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003612:	091b      	lsrs	r3, r3, #4
 8003614:	f003 0301 	and.w	r3, r3, #1
 8003618:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800361a:	4b99      	ldr	r3, [pc, #612]	; (8003880 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800361c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800361e:	08db      	lsrs	r3, r3, #3
 8003620:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003624:	693a      	ldr	r2, [r7, #16]
 8003626:	fb02 f303 	mul.w	r3, r2, r3
 800362a:	ee07 3a90 	vmov	s15, r3
 800362e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003632:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	2b00      	cmp	r3, #0
 800363a:	f000 8111 	beq.w	8003860 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800363e:	69bb      	ldr	r3, [r7, #24]
 8003640:	2b02      	cmp	r3, #2
 8003642:	f000 8083 	beq.w	800374c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	2b02      	cmp	r3, #2
 800364a:	f200 80a1 	bhi.w	8003790 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800364e:	69bb      	ldr	r3, [r7, #24]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d003      	beq.n	800365c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003654:	69bb      	ldr	r3, [r7, #24]
 8003656:	2b01      	cmp	r3, #1
 8003658:	d056      	beq.n	8003708 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800365a:	e099      	b.n	8003790 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800365c:	4b88      	ldr	r3, [pc, #544]	; (8003880 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 0320 	and.w	r3, r3, #32
 8003664:	2b00      	cmp	r3, #0
 8003666:	d02d      	beq.n	80036c4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003668:	4b85      	ldr	r3, [pc, #532]	; (8003880 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	08db      	lsrs	r3, r3, #3
 800366e:	f003 0303 	and.w	r3, r3, #3
 8003672:	4a84      	ldr	r2, [pc, #528]	; (8003884 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003674:	fa22 f303 	lsr.w	r3, r2, r3
 8003678:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	ee07 3a90 	vmov	s15, r3
 8003680:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	ee07 3a90 	vmov	s15, r3
 800368a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800368e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003692:	4b7b      	ldr	r3, [pc, #492]	; (8003880 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003696:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800369a:	ee07 3a90 	vmov	s15, r3
 800369e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80036a6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003888 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80036aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80036b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036be:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80036c2:	e087      	b.n	80037d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	ee07 3a90 	vmov	s15, r3
 80036ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036ce:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800388c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80036d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036d6:	4b6a      	ldr	r3, [pc, #424]	; (8003880 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80036d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036de:	ee07 3a90 	vmov	s15, r3
 80036e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80036ea:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003888 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80036ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80036fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003702:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003706:	e065      	b.n	80037d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	ee07 3a90 	vmov	s15, r3
 800370e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003712:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003890 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003716:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800371a:	4b59      	ldr	r3, [pc, #356]	; (8003880 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800371c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800371e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003722:	ee07 3a90 	vmov	s15, r3
 8003726:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800372a:	ed97 6a03 	vldr	s12, [r7, #12]
 800372e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003888 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003732:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003736:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800373a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800373e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003742:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003746:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800374a:	e043      	b.n	80037d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	ee07 3a90 	vmov	s15, r3
 8003752:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003756:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003894 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800375a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800375e:	4b48      	ldr	r3, [pc, #288]	; (8003880 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003762:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003766:	ee07 3a90 	vmov	s15, r3
 800376a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800376e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003772:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003888 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003776:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800377a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800377e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003782:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003786:	ee67 7a27 	vmul.f32	s15, s14, s15
 800378a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800378e:	e021      	b.n	80037d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	ee07 3a90 	vmov	s15, r3
 8003796:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800379a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003890 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800379e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037a2:	4b37      	ldr	r3, [pc, #220]	; (8003880 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80037a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037aa:	ee07 3a90 	vmov	s15, r3
 80037ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80037b6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003888 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80037ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037ce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80037d2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80037d4:	4b2a      	ldr	r3, [pc, #168]	; (8003880 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80037d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037d8:	0a5b      	lsrs	r3, r3, #9
 80037da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037de:	ee07 3a90 	vmov	s15, r3
 80037e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80037ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80037ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80037f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80037fa:	ee17 2a90 	vmov	r2, s15
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8003802:	4b1f      	ldr	r3, [pc, #124]	; (8003880 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003806:	0c1b      	lsrs	r3, r3, #16
 8003808:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800380c:	ee07 3a90 	vmov	s15, r3
 8003810:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003814:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003818:	ee37 7a87 	vadd.f32	s14, s15, s14
 800381c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003820:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003824:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003828:	ee17 2a90 	vmov	r2, s15
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8003830:	4b13      	ldr	r3, [pc, #76]	; (8003880 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003834:	0e1b      	lsrs	r3, r3, #24
 8003836:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800383a:	ee07 3a90 	vmov	s15, r3
 800383e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003842:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003846:	ee37 7a87 	vadd.f32	s14, s15, s14
 800384a:	edd7 6a07 	vldr	s13, [r7, #28]
 800384e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003852:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003856:	ee17 2a90 	vmov	r2, s15
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800385e:	e008      	b.n	8003872 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2200      	movs	r2, #0
 8003870:	609a      	str	r2, [r3, #8]
}
 8003872:	bf00      	nop
 8003874:	3724      	adds	r7, #36	; 0x24
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr
 800387e:	bf00      	nop
 8003880:	58024400 	.word	0x58024400
 8003884:	03d09000 	.word	0x03d09000
 8003888:	46000000 	.word	0x46000000
 800388c:	4c742400 	.word	0x4c742400
 8003890:	4a742400 	.word	0x4a742400
 8003894:	4af42400 	.word	0x4af42400

08003898 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8003898:	b480      	push	{r7}
 800389a:	b089      	sub	sp, #36	; 0x24
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80038a0:	4ba1      	ldr	r3, [pc, #644]	; (8003b28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80038a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a4:	f003 0303 	and.w	r3, r3, #3
 80038a8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80038aa:	4b9f      	ldr	r3, [pc, #636]	; (8003b28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80038ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ae:	0d1b      	lsrs	r3, r3, #20
 80038b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038b4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80038b6:	4b9c      	ldr	r3, [pc, #624]	; (8003b28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80038b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ba:	0a1b      	lsrs	r3, r3, #8
 80038bc:	f003 0301 	and.w	r3, r3, #1
 80038c0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80038c2:	4b99      	ldr	r3, [pc, #612]	; (8003b28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80038c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038c6:	08db      	lsrs	r3, r3, #3
 80038c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80038cc:	693a      	ldr	r2, [r7, #16]
 80038ce:	fb02 f303 	mul.w	r3, r2, r3
 80038d2:	ee07 3a90 	vmov	s15, r3
 80038d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038da:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	f000 8111 	beq.w	8003b08 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80038e6:	69bb      	ldr	r3, [r7, #24]
 80038e8:	2b02      	cmp	r3, #2
 80038ea:	f000 8083 	beq.w	80039f4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80038ee:	69bb      	ldr	r3, [r7, #24]
 80038f0:	2b02      	cmp	r3, #2
 80038f2:	f200 80a1 	bhi.w	8003a38 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80038f6:	69bb      	ldr	r3, [r7, #24]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d003      	beq.n	8003904 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80038fc:	69bb      	ldr	r3, [r7, #24]
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d056      	beq.n	80039b0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003902:	e099      	b.n	8003a38 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003904:	4b88      	ldr	r3, [pc, #544]	; (8003b28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0320 	and.w	r3, r3, #32
 800390c:	2b00      	cmp	r3, #0
 800390e:	d02d      	beq.n	800396c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003910:	4b85      	ldr	r3, [pc, #532]	; (8003b28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	08db      	lsrs	r3, r3, #3
 8003916:	f003 0303 	and.w	r3, r3, #3
 800391a:	4a84      	ldr	r2, [pc, #528]	; (8003b2c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800391c:	fa22 f303 	lsr.w	r3, r2, r3
 8003920:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	ee07 3a90 	vmov	s15, r3
 8003928:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	ee07 3a90 	vmov	s15, r3
 8003932:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003936:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800393a:	4b7b      	ldr	r3, [pc, #492]	; (8003b28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800393c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003942:	ee07 3a90 	vmov	s15, r3
 8003946:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800394a:	ed97 6a03 	vldr	s12, [r7, #12]
 800394e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003b30 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003952:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003956:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800395a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800395e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003962:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003966:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800396a:	e087      	b.n	8003a7c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	ee07 3a90 	vmov	s15, r3
 8003972:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003976:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003b34 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800397a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800397e:	4b6a      	ldr	r3, [pc, #424]	; (8003b28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003982:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003986:	ee07 3a90 	vmov	s15, r3
 800398a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800398e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003992:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003b30 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003996:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800399a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800399e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039aa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80039ae:	e065      	b.n	8003a7c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	ee07 3a90 	vmov	s15, r3
 80039b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039ba:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003b38 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80039be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039c2:	4b59      	ldr	r3, [pc, #356]	; (8003b28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80039c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039ca:	ee07 3a90 	vmov	s15, r3
 80039ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80039d6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003b30 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80039da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039ee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80039f2:	e043      	b.n	8003a7c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	ee07 3a90 	vmov	s15, r3
 80039fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039fe:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003b3c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003a02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a06:	4b48      	ldr	r3, [pc, #288]	; (8003b28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a0e:	ee07 3a90 	vmov	s15, r3
 8003a12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a16:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a1a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003b30 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003a1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a32:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003a36:	e021      	b.n	8003a7c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	ee07 3a90 	vmov	s15, r3
 8003a3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a42:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003b38 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003a46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a4a:	4b37      	ldr	r3, [pc, #220]	; (8003b28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a52:	ee07 3a90 	vmov	s15, r3
 8003a56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a5e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003b30 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003a62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a76:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003a7a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8003a7c:	4b2a      	ldr	r3, [pc, #168]	; (8003b28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a80:	0a5b      	lsrs	r3, r3, #9
 8003a82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a86:	ee07 3a90 	vmov	s15, r3
 8003a8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a8e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003a92:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003a96:	edd7 6a07 	vldr	s13, [r7, #28]
 8003a9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003aa2:	ee17 2a90 	vmov	r2, s15
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8003aaa:	4b1f      	ldr	r3, [pc, #124]	; (8003b28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aae:	0c1b      	lsrs	r3, r3, #16
 8003ab0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ab4:	ee07 3a90 	vmov	s15, r3
 8003ab8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003abc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003ac0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003ac4:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ac8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003acc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ad0:	ee17 2a90 	vmov	r2, s15
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8003ad8:	4b13      	ldr	r3, [pc, #76]	; (8003b28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003adc:	0e1b      	lsrs	r3, r3, #24
 8003ade:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ae2:	ee07 3a90 	vmov	s15, r3
 8003ae6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003aea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003aee:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003af2:	edd7 6a07 	vldr	s13, [r7, #28]
 8003af6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003afa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003afe:	ee17 2a90 	vmov	r2, s15
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003b06:	e008      	b.n	8003b1a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2200      	movs	r2, #0
 8003b12:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2200      	movs	r2, #0
 8003b18:	609a      	str	r2, [r3, #8]
}
 8003b1a:	bf00      	nop
 8003b1c:	3724      	adds	r7, #36	; 0x24
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b24:	4770      	bx	lr
 8003b26:	bf00      	nop
 8003b28:	58024400 	.word	0x58024400
 8003b2c:	03d09000 	.word	0x03d09000
 8003b30:	46000000 	.word	0x46000000
 8003b34:	4c742400 	.word	0x4c742400
 8003b38:	4a742400 	.word	0x4a742400
 8003b3c:	4af42400 	.word	0x4af42400

08003b40 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b084      	sub	sp, #16
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003b4e:	4b53      	ldr	r3, [pc, #332]	; (8003c9c <RCCEx_PLL2_Config+0x15c>)
 8003b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b52:	f003 0303 	and.w	r3, r3, #3
 8003b56:	2b03      	cmp	r3, #3
 8003b58:	d101      	bne.n	8003b5e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e099      	b.n	8003c92 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003b5e:	4b4f      	ldr	r3, [pc, #316]	; (8003c9c <RCCEx_PLL2_Config+0x15c>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a4e      	ldr	r2, [pc, #312]	; (8003c9c <RCCEx_PLL2_Config+0x15c>)
 8003b64:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003b68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b6a:	f7fd fa9f 	bl	80010ac <HAL_GetTick>
 8003b6e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003b70:	e008      	b.n	8003b84 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003b72:	f7fd fa9b 	bl	80010ac <HAL_GetTick>
 8003b76:	4602      	mov	r2, r0
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	1ad3      	subs	r3, r2, r3
 8003b7c:	2b02      	cmp	r3, #2
 8003b7e:	d901      	bls.n	8003b84 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003b80:	2303      	movs	r3, #3
 8003b82:	e086      	b.n	8003c92 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003b84:	4b45      	ldr	r3, [pc, #276]	; (8003c9c <RCCEx_PLL2_Config+0x15c>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d1f0      	bne.n	8003b72 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003b90:	4b42      	ldr	r3, [pc, #264]	; (8003c9c <RCCEx_PLL2_Config+0x15c>)
 8003b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b94:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	031b      	lsls	r3, r3, #12
 8003b9e:	493f      	ldr	r1, [pc, #252]	; (8003c9c <RCCEx_PLL2_Config+0x15c>)
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	628b      	str	r3, [r1, #40]	; 0x28
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	3b01      	subs	r3, #1
 8003baa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	3b01      	subs	r3, #1
 8003bb4:	025b      	lsls	r3, r3, #9
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	431a      	orrs	r2, r3
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	3b01      	subs	r3, #1
 8003bc0:	041b      	lsls	r3, r3, #16
 8003bc2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003bc6:	431a      	orrs	r2, r3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	691b      	ldr	r3, [r3, #16]
 8003bcc:	3b01      	subs	r3, #1
 8003bce:	061b      	lsls	r3, r3, #24
 8003bd0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003bd4:	4931      	ldr	r1, [pc, #196]	; (8003c9c <RCCEx_PLL2_Config+0x15c>)
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003bda:	4b30      	ldr	r3, [pc, #192]	; (8003c9c <RCCEx_PLL2_Config+0x15c>)
 8003bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bde:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	695b      	ldr	r3, [r3, #20]
 8003be6:	492d      	ldr	r1, [pc, #180]	; (8003c9c <RCCEx_PLL2_Config+0x15c>)
 8003be8:	4313      	orrs	r3, r2
 8003bea:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003bec:	4b2b      	ldr	r3, [pc, #172]	; (8003c9c <RCCEx_PLL2_Config+0x15c>)
 8003bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf0:	f023 0220 	bic.w	r2, r3, #32
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	699b      	ldr	r3, [r3, #24]
 8003bf8:	4928      	ldr	r1, [pc, #160]	; (8003c9c <RCCEx_PLL2_Config+0x15c>)
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003bfe:	4b27      	ldr	r3, [pc, #156]	; (8003c9c <RCCEx_PLL2_Config+0x15c>)
 8003c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c02:	4a26      	ldr	r2, [pc, #152]	; (8003c9c <RCCEx_PLL2_Config+0x15c>)
 8003c04:	f023 0310 	bic.w	r3, r3, #16
 8003c08:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003c0a:	4b24      	ldr	r3, [pc, #144]	; (8003c9c <RCCEx_PLL2_Config+0x15c>)
 8003c0c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c0e:	4b24      	ldr	r3, [pc, #144]	; (8003ca0 <RCCEx_PLL2_Config+0x160>)
 8003c10:	4013      	ands	r3, r2
 8003c12:	687a      	ldr	r2, [r7, #4]
 8003c14:	69d2      	ldr	r2, [r2, #28]
 8003c16:	00d2      	lsls	r2, r2, #3
 8003c18:	4920      	ldr	r1, [pc, #128]	; (8003c9c <RCCEx_PLL2_Config+0x15c>)
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003c1e:	4b1f      	ldr	r3, [pc, #124]	; (8003c9c <RCCEx_PLL2_Config+0x15c>)
 8003c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c22:	4a1e      	ldr	r2, [pc, #120]	; (8003c9c <RCCEx_PLL2_Config+0x15c>)
 8003c24:	f043 0310 	orr.w	r3, r3, #16
 8003c28:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d106      	bne.n	8003c3e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003c30:	4b1a      	ldr	r3, [pc, #104]	; (8003c9c <RCCEx_PLL2_Config+0x15c>)
 8003c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c34:	4a19      	ldr	r2, [pc, #100]	; (8003c9c <RCCEx_PLL2_Config+0x15c>)
 8003c36:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003c3a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003c3c:	e00f      	b.n	8003c5e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d106      	bne.n	8003c52 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003c44:	4b15      	ldr	r3, [pc, #84]	; (8003c9c <RCCEx_PLL2_Config+0x15c>)
 8003c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c48:	4a14      	ldr	r2, [pc, #80]	; (8003c9c <RCCEx_PLL2_Config+0x15c>)
 8003c4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c4e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003c50:	e005      	b.n	8003c5e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003c52:	4b12      	ldr	r3, [pc, #72]	; (8003c9c <RCCEx_PLL2_Config+0x15c>)
 8003c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c56:	4a11      	ldr	r2, [pc, #68]	; (8003c9c <RCCEx_PLL2_Config+0x15c>)
 8003c58:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003c5c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003c5e:	4b0f      	ldr	r3, [pc, #60]	; (8003c9c <RCCEx_PLL2_Config+0x15c>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a0e      	ldr	r2, [pc, #56]	; (8003c9c <RCCEx_PLL2_Config+0x15c>)
 8003c64:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003c68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c6a:	f7fd fa1f 	bl	80010ac <HAL_GetTick>
 8003c6e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003c70:	e008      	b.n	8003c84 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003c72:	f7fd fa1b 	bl	80010ac <HAL_GetTick>
 8003c76:	4602      	mov	r2, r0
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	1ad3      	subs	r3, r2, r3
 8003c7c:	2b02      	cmp	r3, #2
 8003c7e:	d901      	bls.n	8003c84 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003c80:	2303      	movs	r3, #3
 8003c82:	e006      	b.n	8003c92 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003c84:	4b05      	ldr	r3, [pc, #20]	; (8003c9c <RCCEx_PLL2_Config+0x15c>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d0f0      	beq.n	8003c72 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003c90:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3710      	adds	r7, #16
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}
 8003c9a:	bf00      	nop
 8003c9c:	58024400 	.word	0x58024400
 8003ca0:	ffff0007 	.word	0xffff0007

08003ca4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b084      	sub	sp, #16
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
 8003cac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003cb2:	4b53      	ldr	r3, [pc, #332]	; (8003e00 <RCCEx_PLL3_Config+0x15c>)
 8003cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cb6:	f003 0303 	and.w	r3, r3, #3
 8003cba:	2b03      	cmp	r3, #3
 8003cbc:	d101      	bne.n	8003cc2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e099      	b.n	8003df6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003cc2:	4b4f      	ldr	r3, [pc, #316]	; (8003e00 <RCCEx_PLL3_Config+0x15c>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a4e      	ldr	r2, [pc, #312]	; (8003e00 <RCCEx_PLL3_Config+0x15c>)
 8003cc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ccc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cce:	f7fd f9ed 	bl	80010ac <HAL_GetTick>
 8003cd2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003cd4:	e008      	b.n	8003ce8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003cd6:	f7fd f9e9 	bl	80010ac <HAL_GetTick>
 8003cda:	4602      	mov	r2, r0
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	1ad3      	subs	r3, r2, r3
 8003ce0:	2b02      	cmp	r3, #2
 8003ce2:	d901      	bls.n	8003ce8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003ce4:	2303      	movs	r3, #3
 8003ce6:	e086      	b.n	8003df6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003ce8:	4b45      	ldr	r3, [pc, #276]	; (8003e00 <RCCEx_PLL3_Config+0x15c>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d1f0      	bne.n	8003cd6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003cf4:	4b42      	ldr	r3, [pc, #264]	; (8003e00 <RCCEx_PLL3_Config+0x15c>)
 8003cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cf8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	051b      	lsls	r3, r3, #20
 8003d02:	493f      	ldr	r1, [pc, #252]	; (8003e00 <RCCEx_PLL3_Config+0x15c>)
 8003d04:	4313      	orrs	r3, r2
 8003d06:	628b      	str	r3, [r1, #40]	; 0x28
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	3b01      	subs	r3, #1
 8003d0e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	3b01      	subs	r3, #1
 8003d18:	025b      	lsls	r3, r3, #9
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	431a      	orrs	r2, r3
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	68db      	ldr	r3, [r3, #12]
 8003d22:	3b01      	subs	r3, #1
 8003d24:	041b      	lsls	r3, r3, #16
 8003d26:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003d2a:	431a      	orrs	r2, r3
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	691b      	ldr	r3, [r3, #16]
 8003d30:	3b01      	subs	r3, #1
 8003d32:	061b      	lsls	r3, r3, #24
 8003d34:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003d38:	4931      	ldr	r1, [pc, #196]	; (8003e00 <RCCEx_PLL3_Config+0x15c>)
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003d3e:	4b30      	ldr	r3, [pc, #192]	; (8003e00 <RCCEx_PLL3_Config+0x15c>)
 8003d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d42:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	695b      	ldr	r3, [r3, #20]
 8003d4a:	492d      	ldr	r1, [pc, #180]	; (8003e00 <RCCEx_PLL3_Config+0x15c>)
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003d50:	4b2b      	ldr	r3, [pc, #172]	; (8003e00 <RCCEx_PLL3_Config+0x15c>)
 8003d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d54:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	699b      	ldr	r3, [r3, #24]
 8003d5c:	4928      	ldr	r1, [pc, #160]	; (8003e00 <RCCEx_PLL3_Config+0x15c>)
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003d62:	4b27      	ldr	r3, [pc, #156]	; (8003e00 <RCCEx_PLL3_Config+0x15c>)
 8003d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d66:	4a26      	ldr	r2, [pc, #152]	; (8003e00 <RCCEx_PLL3_Config+0x15c>)
 8003d68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d6c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003d6e:	4b24      	ldr	r3, [pc, #144]	; (8003e00 <RCCEx_PLL3_Config+0x15c>)
 8003d70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d72:	4b24      	ldr	r3, [pc, #144]	; (8003e04 <RCCEx_PLL3_Config+0x160>)
 8003d74:	4013      	ands	r3, r2
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	69d2      	ldr	r2, [r2, #28]
 8003d7a:	00d2      	lsls	r2, r2, #3
 8003d7c:	4920      	ldr	r1, [pc, #128]	; (8003e00 <RCCEx_PLL3_Config+0x15c>)
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003d82:	4b1f      	ldr	r3, [pc, #124]	; (8003e00 <RCCEx_PLL3_Config+0x15c>)
 8003d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d86:	4a1e      	ldr	r2, [pc, #120]	; (8003e00 <RCCEx_PLL3_Config+0x15c>)
 8003d88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d8c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d106      	bne.n	8003da2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003d94:	4b1a      	ldr	r3, [pc, #104]	; (8003e00 <RCCEx_PLL3_Config+0x15c>)
 8003d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d98:	4a19      	ldr	r2, [pc, #100]	; (8003e00 <RCCEx_PLL3_Config+0x15c>)
 8003d9a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003d9e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003da0:	e00f      	b.n	8003dc2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d106      	bne.n	8003db6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003da8:	4b15      	ldr	r3, [pc, #84]	; (8003e00 <RCCEx_PLL3_Config+0x15c>)
 8003daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dac:	4a14      	ldr	r2, [pc, #80]	; (8003e00 <RCCEx_PLL3_Config+0x15c>)
 8003dae:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003db2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003db4:	e005      	b.n	8003dc2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003db6:	4b12      	ldr	r3, [pc, #72]	; (8003e00 <RCCEx_PLL3_Config+0x15c>)
 8003db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dba:	4a11      	ldr	r2, [pc, #68]	; (8003e00 <RCCEx_PLL3_Config+0x15c>)
 8003dbc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003dc0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003dc2:	4b0f      	ldr	r3, [pc, #60]	; (8003e00 <RCCEx_PLL3_Config+0x15c>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a0e      	ldr	r2, [pc, #56]	; (8003e00 <RCCEx_PLL3_Config+0x15c>)
 8003dc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dcc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dce:	f7fd f96d 	bl	80010ac <HAL_GetTick>
 8003dd2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003dd4:	e008      	b.n	8003de8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003dd6:	f7fd f969 	bl	80010ac <HAL_GetTick>
 8003dda:	4602      	mov	r2, r0
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	1ad3      	subs	r3, r2, r3
 8003de0:	2b02      	cmp	r3, #2
 8003de2:	d901      	bls.n	8003de8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003de4:	2303      	movs	r3, #3
 8003de6:	e006      	b.n	8003df6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003de8:	4b05      	ldr	r3, [pc, #20]	; (8003e00 <RCCEx_PLL3_Config+0x15c>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d0f0      	beq.n	8003dd6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3710      	adds	r7, #16
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	58024400 	.word	0x58024400
 8003e04:	ffff0007 	.word	0xffff0007

08003e08 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b082      	sub	sp, #8
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d101      	bne.n	8003e1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e042      	b.n	8003ea0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d106      	bne.n	8003e32 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2200      	movs	r2, #0
 8003e28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f7fc ff0f 	bl	8000c50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2224      	movs	r2, #36	; 0x24
 8003e36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f022 0201 	bic.w	r2, r2, #1
 8003e48:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f000 f8c2 	bl	8003fd4 <UART_SetConfig>
 8003e50:	4603      	mov	r3, r0
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d101      	bne.n	8003e5a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e022      	b.n	8003ea0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d002      	beq.n	8003e68 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f000 fe1e 	bl	8004aa4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	685a      	ldr	r2, [r3, #4]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e76:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	689a      	ldr	r2, [r3, #8]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e86:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f042 0201 	orr.w	r2, r2, #1
 8003e96:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003e98:	6878      	ldr	r0, [r7, #4]
 8003e9a:	f000 fea5 	bl	8004be8 <UART_CheckIdleState>
 8003e9e:	4603      	mov	r3, r0
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3708      	adds	r7, #8
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}

08003ea8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b08a      	sub	sp, #40	; 0x28
 8003eac:	af02      	add	r7, sp, #8
 8003eae:	60f8      	str	r0, [r7, #12]
 8003eb0:	60b9      	str	r1, [r7, #8]
 8003eb2:	603b      	str	r3, [r7, #0]
 8003eb4:	4613      	mov	r3, r2
 8003eb6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ebe:	2b20      	cmp	r3, #32
 8003ec0:	f040 8083 	bne.w	8003fca <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d002      	beq.n	8003ed0 <HAL_UART_Transmit+0x28>
 8003eca:	88fb      	ldrh	r3, [r7, #6]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d101      	bne.n	8003ed4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e07b      	b.n	8003fcc <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d101      	bne.n	8003ee2 <HAL_UART_Transmit+0x3a>
 8003ede:	2302      	movs	r3, #2
 8003ee0:	e074      	b.n	8003fcc <HAL_UART_Transmit+0x124>
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2200      	movs	r2, #0
 8003eee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2221      	movs	r2, #33	; 0x21
 8003ef6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003efa:	f7fd f8d7 	bl	80010ac <HAL_GetTick>
 8003efe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	88fa      	ldrh	r2, [r7, #6]
 8003f04:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	88fa      	ldrh	r2, [r7, #6]
 8003f0c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f18:	d108      	bne.n	8003f2c <HAL_UART_Transmit+0x84>
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	691b      	ldr	r3, [r3, #16]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d104      	bne.n	8003f2c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8003f22:	2300      	movs	r3, #0
 8003f24:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	61bb      	str	r3, [r7, #24]
 8003f2a:	e003      	b.n	8003f34 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f30:	2300      	movs	r3, #0
 8003f32:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2200      	movs	r2, #0
 8003f38:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8003f3c:	e02c      	b.n	8003f98 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	9300      	str	r3, [sp, #0]
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	2200      	movs	r2, #0
 8003f46:	2180      	movs	r1, #128	; 0x80
 8003f48:	68f8      	ldr	r0, [r7, #12]
 8003f4a:	f000 fe98 	bl	8004c7e <UART_WaitOnFlagUntilTimeout>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d001      	beq.n	8003f58 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8003f54:	2303      	movs	r3, #3
 8003f56:	e039      	b.n	8003fcc <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d10b      	bne.n	8003f76 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f5e:	69bb      	ldr	r3, [r7, #24]
 8003f60:	881b      	ldrh	r3, [r3, #0]
 8003f62:	461a      	mov	r2, r3
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f6c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003f6e:	69bb      	ldr	r3, [r7, #24]
 8003f70:	3302      	adds	r3, #2
 8003f72:	61bb      	str	r3, [r7, #24]
 8003f74:	e007      	b.n	8003f86 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f76:	69fb      	ldr	r3, [r7, #28]
 8003f78:	781a      	ldrb	r2, [r3, #0]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003f80:	69fb      	ldr	r3, [r7, #28]
 8003f82:	3301      	adds	r3, #1
 8003f84:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003f8c:	b29b      	uxth	r3, r3
 8003f8e:	3b01      	subs	r3, #1
 8003f90:	b29a      	uxth	r2, r3
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d1cc      	bne.n	8003f3e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	9300      	str	r3, [sp, #0]
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	2200      	movs	r2, #0
 8003fac:	2140      	movs	r1, #64	; 0x40
 8003fae:	68f8      	ldr	r0, [r7, #12]
 8003fb0:	f000 fe65 	bl	8004c7e <UART_WaitOnFlagUntilTimeout>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d001      	beq.n	8003fbe <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8003fba:	2303      	movs	r3, #3
 8003fbc:	e006      	b.n	8003fcc <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2220      	movs	r2, #32
 8003fc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	e000      	b.n	8003fcc <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8003fca:	2302      	movs	r3, #2
  }
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	3720      	adds	r7, #32
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}

08003fd4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fd8:	b092      	sub	sp, #72	; 0x48
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	689a      	ldr	r2, [r3, #8]
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	691b      	ldr	r3, [r3, #16]
 8003fec:	431a      	orrs	r2, r3
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	695b      	ldr	r3, [r3, #20]
 8003ff2:	431a      	orrs	r2, r3
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	69db      	ldr	r3, [r3, #28]
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	4bbe      	ldr	r3, [pc, #760]	; (80042fc <UART_SetConfig+0x328>)
 8004004:	4013      	ands	r3, r2
 8004006:	697a      	ldr	r2, [r7, #20]
 8004008:	6812      	ldr	r2, [r2, #0]
 800400a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800400c:	430b      	orrs	r3, r1
 800400e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	68da      	ldr	r2, [r3, #12]
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	430a      	orrs	r2, r1
 8004024:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	699b      	ldr	r3, [r3, #24]
 800402a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4ab3      	ldr	r2, [pc, #716]	; (8004300 <UART_SetConfig+0x32c>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d004      	beq.n	8004040 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	6a1b      	ldr	r3, [r3, #32]
 800403a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800403c:	4313      	orrs	r3, r2
 800403e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	689a      	ldr	r2, [r3, #8]
 8004046:	4baf      	ldr	r3, [pc, #700]	; (8004304 <UART_SetConfig+0x330>)
 8004048:	4013      	ands	r3, r2
 800404a:	697a      	ldr	r2, [r7, #20]
 800404c:	6812      	ldr	r2, [r2, #0]
 800404e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004050:	430b      	orrs	r3, r1
 8004052:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800405a:	f023 010f 	bic.w	r1, r3, #15
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	430a      	orrs	r2, r1
 8004068:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4aa6      	ldr	r2, [pc, #664]	; (8004308 <UART_SetConfig+0x334>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d177      	bne.n	8004164 <UART_SetConfig+0x190>
 8004074:	4ba5      	ldr	r3, [pc, #660]	; (800430c <UART_SetConfig+0x338>)
 8004076:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004078:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800407c:	2b28      	cmp	r3, #40	; 0x28
 800407e:	d86d      	bhi.n	800415c <UART_SetConfig+0x188>
 8004080:	a201      	add	r2, pc, #4	; (adr r2, 8004088 <UART_SetConfig+0xb4>)
 8004082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004086:	bf00      	nop
 8004088:	0800412d 	.word	0x0800412d
 800408c:	0800415d 	.word	0x0800415d
 8004090:	0800415d 	.word	0x0800415d
 8004094:	0800415d 	.word	0x0800415d
 8004098:	0800415d 	.word	0x0800415d
 800409c:	0800415d 	.word	0x0800415d
 80040a0:	0800415d 	.word	0x0800415d
 80040a4:	0800415d 	.word	0x0800415d
 80040a8:	08004135 	.word	0x08004135
 80040ac:	0800415d 	.word	0x0800415d
 80040b0:	0800415d 	.word	0x0800415d
 80040b4:	0800415d 	.word	0x0800415d
 80040b8:	0800415d 	.word	0x0800415d
 80040bc:	0800415d 	.word	0x0800415d
 80040c0:	0800415d 	.word	0x0800415d
 80040c4:	0800415d 	.word	0x0800415d
 80040c8:	0800413d 	.word	0x0800413d
 80040cc:	0800415d 	.word	0x0800415d
 80040d0:	0800415d 	.word	0x0800415d
 80040d4:	0800415d 	.word	0x0800415d
 80040d8:	0800415d 	.word	0x0800415d
 80040dc:	0800415d 	.word	0x0800415d
 80040e0:	0800415d 	.word	0x0800415d
 80040e4:	0800415d 	.word	0x0800415d
 80040e8:	08004145 	.word	0x08004145
 80040ec:	0800415d 	.word	0x0800415d
 80040f0:	0800415d 	.word	0x0800415d
 80040f4:	0800415d 	.word	0x0800415d
 80040f8:	0800415d 	.word	0x0800415d
 80040fc:	0800415d 	.word	0x0800415d
 8004100:	0800415d 	.word	0x0800415d
 8004104:	0800415d 	.word	0x0800415d
 8004108:	0800414d 	.word	0x0800414d
 800410c:	0800415d 	.word	0x0800415d
 8004110:	0800415d 	.word	0x0800415d
 8004114:	0800415d 	.word	0x0800415d
 8004118:	0800415d 	.word	0x0800415d
 800411c:	0800415d 	.word	0x0800415d
 8004120:	0800415d 	.word	0x0800415d
 8004124:	0800415d 	.word	0x0800415d
 8004128:	08004155 	.word	0x08004155
 800412c:	2301      	movs	r3, #1
 800412e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004132:	e222      	b.n	800457a <UART_SetConfig+0x5a6>
 8004134:	2304      	movs	r3, #4
 8004136:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800413a:	e21e      	b.n	800457a <UART_SetConfig+0x5a6>
 800413c:	2308      	movs	r3, #8
 800413e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004142:	e21a      	b.n	800457a <UART_SetConfig+0x5a6>
 8004144:	2310      	movs	r3, #16
 8004146:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800414a:	e216      	b.n	800457a <UART_SetConfig+0x5a6>
 800414c:	2320      	movs	r3, #32
 800414e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004152:	e212      	b.n	800457a <UART_SetConfig+0x5a6>
 8004154:	2340      	movs	r3, #64	; 0x40
 8004156:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800415a:	e20e      	b.n	800457a <UART_SetConfig+0x5a6>
 800415c:	2380      	movs	r3, #128	; 0x80
 800415e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004162:	e20a      	b.n	800457a <UART_SetConfig+0x5a6>
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a69      	ldr	r2, [pc, #420]	; (8004310 <UART_SetConfig+0x33c>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d130      	bne.n	80041d0 <UART_SetConfig+0x1fc>
 800416e:	4b67      	ldr	r3, [pc, #412]	; (800430c <UART_SetConfig+0x338>)
 8004170:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004172:	f003 0307 	and.w	r3, r3, #7
 8004176:	2b05      	cmp	r3, #5
 8004178:	d826      	bhi.n	80041c8 <UART_SetConfig+0x1f4>
 800417a:	a201      	add	r2, pc, #4	; (adr r2, 8004180 <UART_SetConfig+0x1ac>)
 800417c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004180:	08004199 	.word	0x08004199
 8004184:	080041a1 	.word	0x080041a1
 8004188:	080041a9 	.word	0x080041a9
 800418c:	080041b1 	.word	0x080041b1
 8004190:	080041b9 	.word	0x080041b9
 8004194:	080041c1 	.word	0x080041c1
 8004198:	2300      	movs	r3, #0
 800419a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800419e:	e1ec      	b.n	800457a <UART_SetConfig+0x5a6>
 80041a0:	2304      	movs	r3, #4
 80041a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80041a6:	e1e8      	b.n	800457a <UART_SetConfig+0x5a6>
 80041a8:	2308      	movs	r3, #8
 80041aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80041ae:	e1e4      	b.n	800457a <UART_SetConfig+0x5a6>
 80041b0:	2310      	movs	r3, #16
 80041b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80041b6:	e1e0      	b.n	800457a <UART_SetConfig+0x5a6>
 80041b8:	2320      	movs	r3, #32
 80041ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80041be:	e1dc      	b.n	800457a <UART_SetConfig+0x5a6>
 80041c0:	2340      	movs	r3, #64	; 0x40
 80041c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80041c6:	e1d8      	b.n	800457a <UART_SetConfig+0x5a6>
 80041c8:	2380      	movs	r3, #128	; 0x80
 80041ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80041ce:	e1d4      	b.n	800457a <UART_SetConfig+0x5a6>
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a4f      	ldr	r2, [pc, #316]	; (8004314 <UART_SetConfig+0x340>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d130      	bne.n	800423c <UART_SetConfig+0x268>
 80041da:	4b4c      	ldr	r3, [pc, #304]	; (800430c <UART_SetConfig+0x338>)
 80041dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041de:	f003 0307 	and.w	r3, r3, #7
 80041e2:	2b05      	cmp	r3, #5
 80041e4:	d826      	bhi.n	8004234 <UART_SetConfig+0x260>
 80041e6:	a201      	add	r2, pc, #4	; (adr r2, 80041ec <UART_SetConfig+0x218>)
 80041e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ec:	08004205 	.word	0x08004205
 80041f0:	0800420d 	.word	0x0800420d
 80041f4:	08004215 	.word	0x08004215
 80041f8:	0800421d 	.word	0x0800421d
 80041fc:	08004225 	.word	0x08004225
 8004200:	0800422d 	.word	0x0800422d
 8004204:	2300      	movs	r3, #0
 8004206:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800420a:	e1b6      	b.n	800457a <UART_SetConfig+0x5a6>
 800420c:	2304      	movs	r3, #4
 800420e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004212:	e1b2      	b.n	800457a <UART_SetConfig+0x5a6>
 8004214:	2308      	movs	r3, #8
 8004216:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800421a:	e1ae      	b.n	800457a <UART_SetConfig+0x5a6>
 800421c:	2310      	movs	r3, #16
 800421e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004222:	e1aa      	b.n	800457a <UART_SetConfig+0x5a6>
 8004224:	2320      	movs	r3, #32
 8004226:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800422a:	e1a6      	b.n	800457a <UART_SetConfig+0x5a6>
 800422c:	2340      	movs	r3, #64	; 0x40
 800422e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004232:	e1a2      	b.n	800457a <UART_SetConfig+0x5a6>
 8004234:	2380      	movs	r3, #128	; 0x80
 8004236:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800423a:	e19e      	b.n	800457a <UART_SetConfig+0x5a6>
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a35      	ldr	r2, [pc, #212]	; (8004318 <UART_SetConfig+0x344>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d130      	bne.n	80042a8 <UART_SetConfig+0x2d4>
 8004246:	4b31      	ldr	r3, [pc, #196]	; (800430c <UART_SetConfig+0x338>)
 8004248:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800424a:	f003 0307 	and.w	r3, r3, #7
 800424e:	2b05      	cmp	r3, #5
 8004250:	d826      	bhi.n	80042a0 <UART_SetConfig+0x2cc>
 8004252:	a201      	add	r2, pc, #4	; (adr r2, 8004258 <UART_SetConfig+0x284>)
 8004254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004258:	08004271 	.word	0x08004271
 800425c:	08004279 	.word	0x08004279
 8004260:	08004281 	.word	0x08004281
 8004264:	08004289 	.word	0x08004289
 8004268:	08004291 	.word	0x08004291
 800426c:	08004299 	.word	0x08004299
 8004270:	2300      	movs	r3, #0
 8004272:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004276:	e180      	b.n	800457a <UART_SetConfig+0x5a6>
 8004278:	2304      	movs	r3, #4
 800427a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800427e:	e17c      	b.n	800457a <UART_SetConfig+0x5a6>
 8004280:	2308      	movs	r3, #8
 8004282:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004286:	e178      	b.n	800457a <UART_SetConfig+0x5a6>
 8004288:	2310      	movs	r3, #16
 800428a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800428e:	e174      	b.n	800457a <UART_SetConfig+0x5a6>
 8004290:	2320      	movs	r3, #32
 8004292:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004296:	e170      	b.n	800457a <UART_SetConfig+0x5a6>
 8004298:	2340      	movs	r3, #64	; 0x40
 800429a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800429e:	e16c      	b.n	800457a <UART_SetConfig+0x5a6>
 80042a0:	2380      	movs	r3, #128	; 0x80
 80042a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80042a6:	e168      	b.n	800457a <UART_SetConfig+0x5a6>
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a1b      	ldr	r2, [pc, #108]	; (800431c <UART_SetConfig+0x348>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d142      	bne.n	8004338 <UART_SetConfig+0x364>
 80042b2:	4b16      	ldr	r3, [pc, #88]	; (800430c <UART_SetConfig+0x338>)
 80042b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042b6:	f003 0307 	and.w	r3, r3, #7
 80042ba:	2b05      	cmp	r3, #5
 80042bc:	d838      	bhi.n	8004330 <UART_SetConfig+0x35c>
 80042be:	a201      	add	r2, pc, #4	; (adr r2, 80042c4 <UART_SetConfig+0x2f0>)
 80042c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042c4:	080042dd 	.word	0x080042dd
 80042c8:	080042e5 	.word	0x080042e5
 80042cc:	080042ed 	.word	0x080042ed
 80042d0:	080042f5 	.word	0x080042f5
 80042d4:	08004321 	.word	0x08004321
 80042d8:	08004329 	.word	0x08004329
 80042dc:	2300      	movs	r3, #0
 80042de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80042e2:	e14a      	b.n	800457a <UART_SetConfig+0x5a6>
 80042e4:	2304      	movs	r3, #4
 80042e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80042ea:	e146      	b.n	800457a <UART_SetConfig+0x5a6>
 80042ec:	2308      	movs	r3, #8
 80042ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80042f2:	e142      	b.n	800457a <UART_SetConfig+0x5a6>
 80042f4:	2310      	movs	r3, #16
 80042f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80042fa:	e13e      	b.n	800457a <UART_SetConfig+0x5a6>
 80042fc:	cfff69f3 	.word	0xcfff69f3
 8004300:	58000c00 	.word	0x58000c00
 8004304:	11fff4ff 	.word	0x11fff4ff
 8004308:	40011000 	.word	0x40011000
 800430c:	58024400 	.word	0x58024400
 8004310:	40004400 	.word	0x40004400
 8004314:	40004800 	.word	0x40004800
 8004318:	40004c00 	.word	0x40004c00
 800431c:	40005000 	.word	0x40005000
 8004320:	2320      	movs	r3, #32
 8004322:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004326:	e128      	b.n	800457a <UART_SetConfig+0x5a6>
 8004328:	2340      	movs	r3, #64	; 0x40
 800432a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800432e:	e124      	b.n	800457a <UART_SetConfig+0x5a6>
 8004330:	2380      	movs	r3, #128	; 0x80
 8004332:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004336:	e120      	b.n	800457a <UART_SetConfig+0x5a6>
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4acb      	ldr	r2, [pc, #812]	; (800466c <UART_SetConfig+0x698>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d176      	bne.n	8004430 <UART_SetConfig+0x45c>
 8004342:	4bcb      	ldr	r3, [pc, #812]	; (8004670 <UART_SetConfig+0x69c>)
 8004344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004346:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800434a:	2b28      	cmp	r3, #40	; 0x28
 800434c:	d86c      	bhi.n	8004428 <UART_SetConfig+0x454>
 800434e:	a201      	add	r2, pc, #4	; (adr r2, 8004354 <UART_SetConfig+0x380>)
 8004350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004354:	080043f9 	.word	0x080043f9
 8004358:	08004429 	.word	0x08004429
 800435c:	08004429 	.word	0x08004429
 8004360:	08004429 	.word	0x08004429
 8004364:	08004429 	.word	0x08004429
 8004368:	08004429 	.word	0x08004429
 800436c:	08004429 	.word	0x08004429
 8004370:	08004429 	.word	0x08004429
 8004374:	08004401 	.word	0x08004401
 8004378:	08004429 	.word	0x08004429
 800437c:	08004429 	.word	0x08004429
 8004380:	08004429 	.word	0x08004429
 8004384:	08004429 	.word	0x08004429
 8004388:	08004429 	.word	0x08004429
 800438c:	08004429 	.word	0x08004429
 8004390:	08004429 	.word	0x08004429
 8004394:	08004409 	.word	0x08004409
 8004398:	08004429 	.word	0x08004429
 800439c:	08004429 	.word	0x08004429
 80043a0:	08004429 	.word	0x08004429
 80043a4:	08004429 	.word	0x08004429
 80043a8:	08004429 	.word	0x08004429
 80043ac:	08004429 	.word	0x08004429
 80043b0:	08004429 	.word	0x08004429
 80043b4:	08004411 	.word	0x08004411
 80043b8:	08004429 	.word	0x08004429
 80043bc:	08004429 	.word	0x08004429
 80043c0:	08004429 	.word	0x08004429
 80043c4:	08004429 	.word	0x08004429
 80043c8:	08004429 	.word	0x08004429
 80043cc:	08004429 	.word	0x08004429
 80043d0:	08004429 	.word	0x08004429
 80043d4:	08004419 	.word	0x08004419
 80043d8:	08004429 	.word	0x08004429
 80043dc:	08004429 	.word	0x08004429
 80043e0:	08004429 	.word	0x08004429
 80043e4:	08004429 	.word	0x08004429
 80043e8:	08004429 	.word	0x08004429
 80043ec:	08004429 	.word	0x08004429
 80043f0:	08004429 	.word	0x08004429
 80043f4:	08004421 	.word	0x08004421
 80043f8:	2301      	movs	r3, #1
 80043fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043fe:	e0bc      	b.n	800457a <UART_SetConfig+0x5a6>
 8004400:	2304      	movs	r3, #4
 8004402:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004406:	e0b8      	b.n	800457a <UART_SetConfig+0x5a6>
 8004408:	2308      	movs	r3, #8
 800440a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800440e:	e0b4      	b.n	800457a <UART_SetConfig+0x5a6>
 8004410:	2310      	movs	r3, #16
 8004412:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004416:	e0b0      	b.n	800457a <UART_SetConfig+0x5a6>
 8004418:	2320      	movs	r3, #32
 800441a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800441e:	e0ac      	b.n	800457a <UART_SetConfig+0x5a6>
 8004420:	2340      	movs	r3, #64	; 0x40
 8004422:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004426:	e0a8      	b.n	800457a <UART_SetConfig+0x5a6>
 8004428:	2380      	movs	r3, #128	; 0x80
 800442a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800442e:	e0a4      	b.n	800457a <UART_SetConfig+0x5a6>
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a8f      	ldr	r2, [pc, #572]	; (8004674 <UART_SetConfig+0x6a0>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d130      	bne.n	800449c <UART_SetConfig+0x4c8>
 800443a:	4b8d      	ldr	r3, [pc, #564]	; (8004670 <UART_SetConfig+0x69c>)
 800443c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800443e:	f003 0307 	and.w	r3, r3, #7
 8004442:	2b05      	cmp	r3, #5
 8004444:	d826      	bhi.n	8004494 <UART_SetConfig+0x4c0>
 8004446:	a201      	add	r2, pc, #4	; (adr r2, 800444c <UART_SetConfig+0x478>)
 8004448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800444c:	08004465 	.word	0x08004465
 8004450:	0800446d 	.word	0x0800446d
 8004454:	08004475 	.word	0x08004475
 8004458:	0800447d 	.word	0x0800447d
 800445c:	08004485 	.word	0x08004485
 8004460:	0800448d 	.word	0x0800448d
 8004464:	2300      	movs	r3, #0
 8004466:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800446a:	e086      	b.n	800457a <UART_SetConfig+0x5a6>
 800446c:	2304      	movs	r3, #4
 800446e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004472:	e082      	b.n	800457a <UART_SetConfig+0x5a6>
 8004474:	2308      	movs	r3, #8
 8004476:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800447a:	e07e      	b.n	800457a <UART_SetConfig+0x5a6>
 800447c:	2310      	movs	r3, #16
 800447e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004482:	e07a      	b.n	800457a <UART_SetConfig+0x5a6>
 8004484:	2320      	movs	r3, #32
 8004486:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800448a:	e076      	b.n	800457a <UART_SetConfig+0x5a6>
 800448c:	2340      	movs	r3, #64	; 0x40
 800448e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004492:	e072      	b.n	800457a <UART_SetConfig+0x5a6>
 8004494:	2380      	movs	r3, #128	; 0x80
 8004496:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800449a:	e06e      	b.n	800457a <UART_SetConfig+0x5a6>
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a75      	ldr	r2, [pc, #468]	; (8004678 <UART_SetConfig+0x6a4>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d130      	bne.n	8004508 <UART_SetConfig+0x534>
 80044a6:	4b72      	ldr	r3, [pc, #456]	; (8004670 <UART_SetConfig+0x69c>)
 80044a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044aa:	f003 0307 	and.w	r3, r3, #7
 80044ae:	2b05      	cmp	r3, #5
 80044b0:	d826      	bhi.n	8004500 <UART_SetConfig+0x52c>
 80044b2:	a201      	add	r2, pc, #4	; (adr r2, 80044b8 <UART_SetConfig+0x4e4>)
 80044b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044b8:	080044d1 	.word	0x080044d1
 80044bc:	080044d9 	.word	0x080044d9
 80044c0:	080044e1 	.word	0x080044e1
 80044c4:	080044e9 	.word	0x080044e9
 80044c8:	080044f1 	.word	0x080044f1
 80044cc:	080044f9 	.word	0x080044f9
 80044d0:	2300      	movs	r3, #0
 80044d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044d6:	e050      	b.n	800457a <UART_SetConfig+0x5a6>
 80044d8:	2304      	movs	r3, #4
 80044da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044de:	e04c      	b.n	800457a <UART_SetConfig+0x5a6>
 80044e0:	2308      	movs	r3, #8
 80044e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044e6:	e048      	b.n	800457a <UART_SetConfig+0x5a6>
 80044e8:	2310      	movs	r3, #16
 80044ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044ee:	e044      	b.n	800457a <UART_SetConfig+0x5a6>
 80044f0:	2320      	movs	r3, #32
 80044f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044f6:	e040      	b.n	800457a <UART_SetConfig+0x5a6>
 80044f8:	2340      	movs	r3, #64	; 0x40
 80044fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044fe:	e03c      	b.n	800457a <UART_SetConfig+0x5a6>
 8004500:	2380      	movs	r3, #128	; 0x80
 8004502:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004506:	e038      	b.n	800457a <UART_SetConfig+0x5a6>
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a5b      	ldr	r2, [pc, #364]	; (800467c <UART_SetConfig+0x6a8>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d130      	bne.n	8004574 <UART_SetConfig+0x5a0>
 8004512:	4b57      	ldr	r3, [pc, #348]	; (8004670 <UART_SetConfig+0x69c>)
 8004514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004516:	f003 0307 	and.w	r3, r3, #7
 800451a:	2b05      	cmp	r3, #5
 800451c:	d826      	bhi.n	800456c <UART_SetConfig+0x598>
 800451e:	a201      	add	r2, pc, #4	; (adr r2, 8004524 <UART_SetConfig+0x550>)
 8004520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004524:	0800453d 	.word	0x0800453d
 8004528:	08004545 	.word	0x08004545
 800452c:	0800454d 	.word	0x0800454d
 8004530:	08004555 	.word	0x08004555
 8004534:	0800455d 	.word	0x0800455d
 8004538:	08004565 	.word	0x08004565
 800453c:	2302      	movs	r3, #2
 800453e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004542:	e01a      	b.n	800457a <UART_SetConfig+0x5a6>
 8004544:	2304      	movs	r3, #4
 8004546:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800454a:	e016      	b.n	800457a <UART_SetConfig+0x5a6>
 800454c:	2308      	movs	r3, #8
 800454e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004552:	e012      	b.n	800457a <UART_SetConfig+0x5a6>
 8004554:	2310      	movs	r3, #16
 8004556:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800455a:	e00e      	b.n	800457a <UART_SetConfig+0x5a6>
 800455c:	2320      	movs	r3, #32
 800455e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004562:	e00a      	b.n	800457a <UART_SetConfig+0x5a6>
 8004564:	2340      	movs	r3, #64	; 0x40
 8004566:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800456a:	e006      	b.n	800457a <UART_SetConfig+0x5a6>
 800456c:	2380      	movs	r3, #128	; 0x80
 800456e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004572:	e002      	b.n	800457a <UART_SetConfig+0x5a6>
 8004574:	2380      	movs	r3, #128	; 0x80
 8004576:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a3f      	ldr	r2, [pc, #252]	; (800467c <UART_SetConfig+0x6a8>)
 8004580:	4293      	cmp	r3, r2
 8004582:	f040 80f8 	bne.w	8004776 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004586:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800458a:	2b20      	cmp	r3, #32
 800458c:	dc46      	bgt.n	800461c <UART_SetConfig+0x648>
 800458e:	2b02      	cmp	r3, #2
 8004590:	f2c0 8082 	blt.w	8004698 <UART_SetConfig+0x6c4>
 8004594:	3b02      	subs	r3, #2
 8004596:	2b1e      	cmp	r3, #30
 8004598:	d87e      	bhi.n	8004698 <UART_SetConfig+0x6c4>
 800459a:	a201      	add	r2, pc, #4	; (adr r2, 80045a0 <UART_SetConfig+0x5cc>)
 800459c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045a0:	08004623 	.word	0x08004623
 80045a4:	08004699 	.word	0x08004699
 80045a8:	0800462b 	.word	0x0800462b
 80045ac:	08004699 	.word	0x08004699
 80045b0:	08004699 	.word	0x08004699
 80045b4:	08004699 	.word	0x08004699
 80045b8:	0800463b 	.word	0x0800463b
 80045bc:	08004699 	.word	0x08004699
 80045c0:	08004699 	.word	0x08004699
 80045c4:	08004699 	.word	0x08004699
 80045c8:	08004699 	.word	0x08004699
 80045cc:	08004699 	.word	0x08004699
 80045d0:	08004699 	.word	0x08004699
 80045d4:	08004699 	.word	0x08004699
 80045d8:	0800464b 	.word	0x0800464b
 80045dc:	08004699 	.word	0x08004699
 80045e0:	08004699 	.word	0x08004699
 80045e4:	08004699 	.word	0x08004699
 80045e8:	08004699 	.word	0x08004699
 80045ec:	08004699 	.word	0x08004699
 80045f0:	08004699 	.word	0x08004699
 80045f4:	08004699 	.word	0x08004699
 80045f8:	08004699 	.word	0x08004699
 80045fc:	08004699 	.word	0x08004699
 8004600:	08004699 	.word	0x08004699
 8004604:	08004699 	.word	0x08004699
 8004608:	08004699 	.word	0x08004699
 800460c:	08004699 	.word	0x08004699
 8004610:	08004699 	.word	0x08004699
 8004614:	08004699 	.word	0x08004699
 8004618:	0800468b 	.word	0x0800468b
 800461c:	2b40      	cmp	r3, #64	; 0x40
 800461e:	d037      	beq.n	8004690 <UART_SetConfig+0x6bc>
 8004620:	e03a      	b.n	8004698 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8004622:	f7fe ffcf 	bl	80035c4 <HAL_RCCEx_GetD3PCLK1Freq>
 8004626:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004628:	e03c      	b.n	80046a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800462a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800462e:	4618      	mov	r0, r3
 8004630:	f7fe ffde 	bl	80035f0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004636:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004638:	e034      	b.n	80046a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800463a:	f107 0318 	add.w	r3, r7, #24
 800463e:	4618      	mov	r0, r3
 8004640:	f7ff f92a 	bl	8003898 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004644:	69fb      	ldr	r3, [r7, #28]
 8004646:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004648:	e02c      	b.n	80046a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800464a:	4b09      	ldr	r3, [pc, #36]	; (8004670 <UART_SetConfig+0x69c>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 0320 	and.w	r3, r3, #32
 8004652:	2b00      	cmp	r3, #0
 8004654:	d016      	beq.n	8004684 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004656:	4b06      	ldr	r3, [pc, #24]	; (8004670 <UART_SetConfig+0x69c>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	08db      	lsrs	r3, r3, #3
 800465c:	f003 0303 	and.w	r3, r3, #3
 8004660:	4a07      	ldr	r2, [pc, #28]	; (8004680 <UART_SetConfig+0x6ac>)
 8004662:	fa22 f303 	lsr.w	r3, r2, r3
 8004666:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004668:	e01c      	b.n	80046a4 <UART_SetConfig+0x6d0>
 800466a:	bf00      	nop
 800466c:	40011400 	.word	0x40011400
 8004670:	58024400 	.word	0x58024400
 8004674:	40007800 	.word	0x40007800
 8004678:	40007c00 	.word	0x40007c00
 800467c:	58000c00 	.word	0x58000c00
 8004680:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8004684:	4b9d      	ldr	r3, [pc, #628]	; (80048fc <UART_SetConfig+0x928>)
 8004686:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004688:	e00c      	b.n	80046a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800468a:	4b9d      	ldr	r3, [pc, #628]	; (8004900 <UART_SetConfig+0x92c>)
 800468c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800468e:	e009      	b.n	80046a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004690:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004694:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004696:	e005      	b.n	80046a4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8004698:	2300      	movs	r3, #0
 800469a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80046a2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80046a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	f000 81de 	beq.w	8004a68 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b0:	4a94      	ldr	r2, [pc, #592]	; (8004904 <UART_SetConfig+0x930>)
 80046b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80046b6:	461a      	mov	r2, r3
 80046b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80046be:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	685a      	ldr	r2, [r3, #4]
 80046c4:	4613      	mov	r3, r2
 80046c6:	005b      	lsls	r3, r3, #1
 80046c8:	4413      	add	r3, r2
 80046ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d305      	bcc.n	80046dc <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80046d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046d8:	429a      	cmp	r2, r3
 80046da:	d903      	bls.n	80046e4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80046e2:	e1c1      	b.n	8004a68 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80046e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046e6:	2200      	movs	r2, #0
 80046e8:	60bb      	str	r3, [r7, #8]
 80046ea:	60fa      	str	r2, [r7, #12]
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f0:	4a84      	ldr	r2, [pc, #528]	; (8004904 <UART_SetConfig+0x930>)
 80046f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80046f6:	b29b      	uxth	r3, r3
 80046f8:	2200      	movs	r2, #0
 80046fa:	603b      	str	r3, [r7, #0]
 80046fc:	607a      	str	r2, [r7, #4]
 80046fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004702:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004706:	f7fb fe43 	bl	8000390 <__aeabi_uldivmod>
 800470a:	4602      	mov	r2, r0
 800470c:	460b      	mov	r3, r1
 800470e:	4610      	mov	r0, r2
 8004710:	4619      	mov	r1, r3
 8004712:	f04f 0200 	mov.w	r2, #0
 8004716:	f04f 0300 	mov.w	r3, #0
 800471a:	020b      	lsls	r3, r1, #8
 800471c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004720:	0202      	lsls	r2, r0, #8
 8004722:	6979      	ldr	r1, [r7, #20]
 8004724:	6849      	ldr	r1, [r1, #4]
 8004726:	0849      	lsrs	r1, r1, #1
 8004728:	2000      	movs	r0, #0
 800472a:	460c      	mov	r4, r1
 800472c:	4605      	mov	r5, r0
 800472e:	eb12 0804 	adds.w	r8, r2, r4
 8004732:	eb43 0905 	adc.w	r9, r3, r5
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	2200      	movs	r2, #0
 800473c:	469a      	mov	sl, r3
 800473e:	4693      	mov	fp, r2
 8004740:	4652      	mov	r2, sl
 8004742:	465b      	mov	r3, fp
 8004744:	4640      	mov	r0, r8
 8004746:	4649      	mov	r1, r9
 8004748:	f7fb fe22 	bl	8000390 <__aeabi_uldivmod>
 800474c:	4602      	mov	r2, r0
 800474e:	460b      	mov	r3, r1
 8004750:	4613      	mov	r3, r2
 8004752:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004756:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800475a:	d308      	bcc.n	800476e <UART_SetConfig+0x79a>
 800475c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800475e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004762:	d204      	bcs.n	800476e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800476a:	60da      	str	r2, [r3, #12]
 800476c:	e17c      	b.n	8004a68 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8004774:	e178      	b.n	8004a68 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	69db      	ldr	r3, [r3, #28]
 800477a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800477e:	f040 80c5 	bne.w	800490c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8004782:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004786:	2b20      	cmp	r3, #32
 8004788:	dc48      	bgt.n	800481c <UART_SetConfig+0x848>
 800478a:	2b00      	cmp	r3, #0
 800478c:	db7b      	blt.n	8004886 <UART_SetConfig+0x8b2>
 800478e:	2b20      	cmp	r3, #32
 8004790:	d879      	bhi.n	8004886 <UART_SetConfig+0x8b2>
 8004792:	a201      	add	r2, pc, #4	; (adr r2, 8004798 <UART_SetConfig+0x7c4>)
 8004794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004798:	08004823 	.word	0x08004823
 800479c:	0800482b 	.word	0x0800482b
 80047a0:	08004887 	.word	0x08004887
 80047a4:	08004887 	.word	0x08004887
 80047a8:	08004833 	.word	0x08004833
 80047ac:	08004887 	.word	0x08004887
 80047b0:	08004887 	.word	0x08004887
 80047b4:	08004887 	.word	0x08004887
 80047b8:	08004843 	.word	0x08004843
 80047bc:	08004887 	.word	0x08004887
 80047c0:	08004887 	.word	0x08004887
 80047c4:	08004887 	.word	0x08004887
 80047c8:	08004887 	.word	0x08004887
 80047cc:	08004887 	.word	0x08004887
 80047d0:	08004887 	.word	0x08004887
 80047d4:	08004887 	.word	0x08004887
 80047d8:	08004853 	.word	0x08004853
 80047dc:	08004887 	.word	0x08004887
 80047e0:	08004887 	.word	0x08004887
 80047e4:	08004887 	.word	0x08004887
 80047e8:	08004887 	.word	0x08004887
 80047ec:	08004887 	.word	0x08004887
 80047f0:	08004887 	.word	0x08004887
 80047f4:	08004887 	.word	0x08004887
 80047f8:	08004887 	.word	0x08004887
 80047fc:	08004887 	.word	0x08004887
 8004800:	08004887 	.word	0x08004887
 8004804:	08004887 	.word	0x08004887
 8004808:	08004887 	.word	0x08004887
 800480c:	08004887 	.word	0x08004887
 8004810:	08004887 	.word	0x08004887
 8004814:	08004887 	.word	0x08004887
 8004818:	08004879 	.word	0x08004879
 800481c:	2b40      	cmp	r3, #64	; 0x40
 800481e:	d02e      	beq.n	800487e <UART_SetConfig+0x8aa>
 8004820:	e031      	b.n	8004886 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004822:	f7fd ff5d 	bl	80026e0 <HAL_RCC_GetPCLK1Freq>
 8004826:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004828:	e033      	b.n	8004892 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800482a:	f7fd ff6f 	bl	800270c <HAL_RCC_GetPCLK2Freq>
 800482e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004830:	e02f      	b.n	8004892 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004832:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004836:	4618      	mov	r0, r3
 8004838:	f7fe feda 	bl	80035f0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800483c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800483e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004840:	e027      	b.n	8004892 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004842:	f107 0318 	add.w	r3, r7, #24
 8004846:	4618      	mov	r0, r3
 8004848:	f7ff f826 	bl	8003898 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800484c:	69fb      	ldr	r3, [r7, #28]
 800484e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004850:	e01f      	b.n	8004892 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004852:	4b2d      	ldr	r3, [pc, #180]	; (8004908 <UART_SetConfig+0x934>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f003 0320 	and.w	r3, r3, #32
 800485a:	2b00      	cmp	r3, #0
 800485c:	d009      	beq.n	8004872 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800485e:	4b2a      	ldr	r3, [pc, #168]	; (8004908 <UART_SetConfig+0x934>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	08db      	lsrs	r3, r3, #3
 8004864:	f003 0303 	and.w	r3, r3, #3
 8004868:	4a24      	ldr	r2, [pc, #144]	; (80048fc <UART_SetConfig+0x928>)
 800486a:	fa22 f303 	lsr.w	r3, r2, r3
 800486e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004870:	e00f      	b.n	8004892 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8004872:	4b22      	ldr	r3, [pc, #136]	; (80048fc <UART_SetConfig+0x928>)
 8004874:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004876:	e00c      	b.n	8004892 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004878:	4b21      	ldr	r3, [pc, #132]	; (8004900 <UART_SetConfig+0x92c>)
 800487a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800487c:	e009      	b.n	8004892 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800487e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004882:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004884:	e005      	b.n	8004892 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8004886:	2300      	movs	r3, #0
 8004888:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8004890:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004892:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004894:	2b00      	cmp	r3, #0
 8004896:	f000 80e7 	beq.w	8004a68 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800489e:	4a19      	ldr	r2, [pc, #100]	; (8004904 <UART_SetConfig+0x930>)
 80048a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80048a4:	461a      	mov	r2, r3
 80048a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80048ac:	005a      	lsls	r2, r3, #1
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	085b      	lsrs	r3, r3, #1
 80048b4:	441a      	add	r2, r3
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80048be:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048c2:	2b0f      	cmp	r3, #15
 80048c4:	d916      	bls.n	80048f4 <UART_SetConfig+0x920>
 80048c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048cc:	d212      	bcs.n	80048f4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80048ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	f023 030f 	bic.w	r3, r3, #15
 80048d6:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80048d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048da:	085b      	lsrs	r3, r3, #1
 80048dc:	b29b      	uxth	r3, r3
 80048de:	f003 0307 	and.w	r3, r3, #7
 80048e2:	b29a      	uxth	r2, r3
 80048e4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80048e6:	4313      	orrs	r3, r2
 80048e8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80048f0:	60da      	str	r2, [r3, #12]
 80048f2:	e0b9      	b.n	8004a68 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80048fa:	e0b5      	b.n	8004a68 <UART_SetConfig+0xa94>
 80048fc:	03d09000 	.word	0x03d09000
 8004900:	003d0900 	.word	0x003d0900
 8004904:	08005fe8 	.word	0x08005fe8
 8004908:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800490c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004910:	2b20      	cmp	r3, #32
 8004912:	dc49      	bgt.n	80049a8 <UART_SetConfig+0x9d4>
 8004914:	2b00      	cmp	r3, #0
 8004916:	db7c      	blt.n	8004a12 <UART_SetConfig+0xa3e>
 8004918:	2b20      	cmp	r3, #32
 800491a:	d87a      	bhi.n	8004a12 <UART_SetConfig+0xa3e>
 800491c:	a201      	add	r2, pc, #4	; (adr r2, 8004924 <UART_SetConfig+0x950>)
 800491e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004922:	bf00      	nop
 8004924:	080049af 	.word	0x080049af
 8004928:	080049b7 	.word	0x080049b7
 800492c:	08004a13 	.word	0x08004a13
 8004930:	08004a13 	.word	0x08004a13
 8004934:	080049bf 	.word	0x080049bf
 8004938:	08004a13 	.word	0x08004a13
 800493c:	08004a13 	.word	0x08004a13
 8004940:	08004a13 	.word	0x08004a13
 8004944:	080049cf 	.word	0x080049cf
 8004948:	08004a13 	.word	0x08004a13
 800494c:	08004a13 	.word	0x08004a13
 8004950:	08004a13 	.word	0x08004a13
 8004954:	08004a13 	.word	0x08004a13
 8004958:	08004a13 	.word	0x08004a13
 800495c:	08004a13 	.word	0x08004a13
 8004960:	08004a13 	.word	0x08004a13
 8004964:	080049df 	.word	0x080049df
 8004968:	08004a13 	.word	0x08004a13
 800496c:	08004a13 	.word	0x08004a13
 8004970:	08004a13 	.word	0x08004a13
 8004974:	08004a13 	.word	0x08004a13
 8004978:	08004a13 	.word	0x08004a13
 800497c:	08004a13 	.word	0x08004a13
 8004980:	08004a13 	.word	0x08004a13
 8004984:	08004a13 	.word	0x08004a13
 8004988:	08004a13 	.word	0x08004a13
 800498c:	08004a13 	.word	0x08004a13
 8004990:	08004a13 	.word	0x08004a13
 8004994:	08004a13 	.word	0x08004a13
 8004998:	08004a13 	.word	0x08004a13
 800499c:	08004a13 	.word	0x08004a13
 80049a0:	08004a13 	.word	0x08004a13
 80049a4:	08004a05 	.word	0x08004a05
 80049a8:	2b40      	cmp	r3, #64	; 0x40
 80049aa:	d02e      	beq.n	8004a0a <UART_SetConfig+0xa36>
 80049ac:	e031      	b.n	8004a12 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049ae:	f7fd fe97 	bl	80026e0 <HAL_RCC_GetPCLK1Freq>
 80049b2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80049b4:	e033      	b.n	8004a1e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049b6:	f7fd fea9 	bl	800270c <HAL_RCC_GetPCLK2Freq>
 80049ba:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80049bc:	e02f      	b.n	8004a1e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80049be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80049c2:	4618      	mov	r0, r3
 80049c4:	f7fe fe14 	bl	80035f0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80049c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80049cc:	e027      	b.n	8004a1e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80049ce:	f107 0318 	add.w	r3, r7, #24
 80049d2:	4618      	mov	r0, r3
 80049d4:	f7fe ff60 	bl	8003898 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80049d8:	69fb      	ldr	r3, [r7, #28]
 80049da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80049dc:	e01f      	b.n	8004a1e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80049de:	4b2d      	ldr	r3, [pc, #180]	; (8004a94 <UART_SetConfig+0xac0>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 0320 	and.w	r3, r3, #32
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d009      	beq.n	80049fe <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80049ea:	4b2a      	ldr	r3, [pc, #168]	; (8004a94 <UART_SetConfig+0xac0>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	08db      	lsrs	r3, r3, #3
 80049f0:	f003 0303 	and.w	r3, r3, #3
 80049f4:	4a28      	ldr	r2, [pc, #160]	; (8004a98 <UART_SetConfig+0xac4>)
 80049f6:	fa22 f303 	lsr.w	r3, r2, r3
 80049fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80049fc:	e00f      	b.n	8004a1e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80049fe:	4b26      	ldr	r3, [pc, #152]	; (8004a98 <UART_SetConfig+0xac4>)
 8004a00:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004a02:	e00c      	b.n	8004a1e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004a04:	4b25      	ldr	r3, [pc, #148]	; (8004a9c <UART_SetConfig+0xac8>)
 8004a06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004a08:	e009      	b.n	8004a1e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004a10:	e005      	b.n	8004a1e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8004a12:	2300      	movs	r3, #0
 8004a14:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8004a1c:	bf00      	nop
    }

    if (pclk != 0U)
 8004a1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d021      	beq.n	8004a68 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a28:	4a1d      	ldr	r2, [pc, #116]	; (8004aa0 <UART_SetConfig+0xacc>)
 8004a2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a2e:	461a      	mov	r2, r3
 8004a30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a32:	fbb3 f2f2 	udiv	r2, r3, r2
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	085b      	lsrs	r3, r3, #1
 8004a3c:	441a      	add	r2, r3
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a46:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a4a:	2b0f      	cmp	r3, #15
 8004a4c:	d909      	bls.n	8004a62 <UART_SetConfig+0xa8e>
 8004a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a54:	d205      	bcs.n	8004a62 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a58:	b29a      	uxth	r2, r3
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	60da      	str	r2, [r3, #12]
 8004a60:	e002      	b.n	8004a68 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	2201      	movs	r2, #1
 8004a74:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	2200      	movs	r2, #0
 8004a82:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004a84:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	3748      	adds	r7, #72	; 0x48
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a92:	bf00      	nop
 8004a94:	58024400 	.word	0x58024400
 8004a98:	03d09000 	.word	0x03d09000
 8004a9c:	003d0900 	.word	0x003d0900
 8004aa0:	08005fe8 	.word	0x08005fe8

08004aa4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b083      	sub	sp, #12
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ab0:	f003 0301 	and.w	r3, r3, #1
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d00a      	beq.n	8004ace <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	430a      	orrs	r2, r1
 8004acc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ad2:	f003 0302 	and.w	r3, r3, #2
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d00a      	beq.n	8004af0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	430a      	orrs	r2, r1
 8004aee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004af4:	f003 0304 	and.w	r3, r3, #4
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d00a      	beq.n	8004b12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	430a      	orrs	r2, r1
 8004b10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b16:	f003 0308 	and.w	r3, r3, #8
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d00a      	beq.n	8004b34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	430a      	orrs	r2, r1
 8004b32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b38:	f003 0310 	and.w	r3, r3, #16
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d00a      	beq.n	8004b56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	430a      	orrs	r2, r1
 8004b54:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b5a:	f003 0320 	and.w	r3, r3, #32
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d00a      	beq.n	8004b78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	430a      	orrs	r2, r1
 8004b76:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d01a      	beq.n	8004bba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	430a      	orrs	r2, r1
 8004b98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ba2:	d10a      	bne.n	8004bba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	430a      	orrs	r2, r1
 8004bb8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d00a      	beq.n	8004bdc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	430a      	orrs	r2, r1
 8004bda:	605a      	str	r2, [r3, #4]
  }
}
 8004bdc:	bf00      	nop
 8004bde:	370c      	adds	r7, #12
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr

08004be8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b086      	sub	sp, #24
 8004bec:	af02      	add	r7, sp, #8
 8004bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004bf8:	f7fc fa58 	bl	80010ac <HAL_GetTick>
 8004bfc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f003 0308 	and.w	r3, r3, #8
 8004c08:	2b08      	cmp	r3, #8
 8004c0a:	d10e      	bne.n	8004c2a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c0c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c10:	9300      	str	r3, [sp, #0]
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2200      	movs	r2, #0
 8004c16:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f000 f82f 	bl	8004c7e <UART_WaitOnFlagUntilTimeout>
 8004c20:	4603      	mov	r3, r0
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d001      	beq.n	8004c2a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c26:	2303      	movs	r3, #3
 8004c28:	e025      	b.n	8004c76 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 0304 	and.w	r3, r3, #4
 8004c34:	2b04      	cmp	r3, #4
 8004c36:	d10e      	bne.n	8004c56 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c38:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c3c:	9300      	str	r3, [sp, #0]
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2200      	movs	r2, #0
 8004c42:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f000 f819 	bl	8004c7e <UART_WaitOnFlagUntilTimeout>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d001      	beq.n	8004c56 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c52:	2303      	movs	r3, #3
 8004c54:	e00f      	b.n	8004c76 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2220      	movs	r2, #32
 8004c5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2220      	movs	r2, #32
 8004c62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004c74:	2300      	movs	r3, #0
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3710      	adds	r7, #16
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}

08004c7e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004c7e:	b580      	push	{r7, lr}
 8004c80:	b09c      	sub	sp, #112	; 0x70
 8004c82:	af00      	add	r7, sp, #0
 8004c84:	60f8      	str	r0, [r7, #12]
 8004c86:	60b9      	str	r1, [r7, #8]
 8004c88:	603b      	str	r3, [r7, #0]
 8004c8a:	4613      	mov	r3, r2
 8004c8c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c8e:	e0a9      	b.n	8004de4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c96:	f000 80a5 	beq.w	8004de4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c9a:	f7fc fa07 	bl	80010ac <HAL_GetTick>
 8004c9e:	4602      	mov	r2, r0
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	1ad3      	subs	r3, r2, r3
 8004ca4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	d302      	bcc.n	8004cb0 <UART_WaitOnFlagUntilTimeout+0x32>
 8004caa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d140      	bne.n	8004d32 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004cb8:	e853 3f00 	ldrex	r3, [r3]
 8004cbc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004cbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cc0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004cc4:	667b      	str	r3, [r7, #100]	; 0x64
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	461a      	mov	r2, r3
 8004ccc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004cce:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004cd0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cd2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004cd4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004cd6:	e841 2300 	strex	r3, r2, [r1]
 8004cda:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004cdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d1e6      	bne.n	8004cb0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	3308      	adds	r3, #8
 8004ce8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cec:	e853 3f00 	ldrex	r3, [r3]
 8004cf0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cf4:	f023 0301 	bic.w	r3, r3, #1
 8004cf8:	663b      	str	r3, [r7, #96]	; 0x60
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	3308      	adds	r3, #8
 8004d00:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004d02:	64ba      	str	r2, [r7, #72]	; 0x48
 8004d04:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d06:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004d08:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d0a:	e841 2300 	strex	r3, r2, [r1]
 8004d0e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004d10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d1e5      	bne.n	8004ce2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2220      	movs	r2, #32
 8004d1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2220      	movs	r2, #32
 8004d22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004d2e:	2303      	movs	r3, #3
 8004d30:	e069      	b.n	8004e06 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 0304 	and.w	r3, r3, #4
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d051      	beq.n	8004de4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	69db      	ldr	r3, [r3, #28]
 8004d46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d4e:	d149      	bne.n	8004de4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d58:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d62:	e853 3f00 	ldrex	r3, [r3]
 8004d66:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004d6e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	461a      	mov	r2, r3
 8004d76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d78:	637b      	str	r3, [r7, #52]	; 0x34
 8004d7a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d7c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004d7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d80:	e841 2300 	strex	r3, r2, [r1]
 8004d84:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d1e6      	bne.n	8004d5a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	3308      	adds	r3, #8
 8004d92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	e853 3f00 	ldrex	r3, [r3]
 8004d9a:	613b      	str	r3, [r7, #16]
   return(result);
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	f023 0301 	bic.w	r3, r3, #1
 8004da2:	66bb      	str	r3, [r7, #104]	; 0x68
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	3308      	adds	r3, #8
 8004daa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004dac:	623a      	str	r2, [r7, #32]
 8004dae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004db0:	69f9      	ldr	r1, [r7, #28]
 8004db2:	6a3a      	ldr	r2, [r7, #32]
 8004db4:	e841 2300 	strex	r3, r2, [r1]
 8004db8:	61bb      	str	r3, [r7, #24]
   return(result);
 8004dba:	69bb      	ldr	r3, [r7, #24]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d1e5      	bne.n	8004d8c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2220      	movs	r2, #32
 8004dc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2220      	movs	r2, #32
 8004dcc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2220      	movs	r2, #32
 8004dd4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004de0:	2303      	movs	r3, #3
 8004de2:	e010      	b.n	8004e06 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	69da      	ldr	r2, [r3, #28]
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	4013      	ands	r3, r2
 8004dee:	68ba      	ldr	r2, [r7, #8]
 8004df0:	429a      	cmp	r2, r3
 8004df2:	bf0c      	ite	eq
 8004df4:	2301      	moveq	r3, #1
 8004df6:	2300      	movne	r3, #0
 8004df8:	b2db      	uxtb	r3, r3
 8004dfa:	461a      	mov	r2, r3
 8004dfc:	79fb      	ldrb	r3, [r7, #7]
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	f43f af46 	beq.w	8004c90 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e04:	2300      	movs	r3, #0
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	3770      	adds	r7, #112	; 0x70
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}

08004e0e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004e0e:	b480      	push	{r7}
 8004e10:	b085      	sub	sp, #20
 8004e12:	af00      	add	r7, sp, #0
 8004e14:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d101      	bne.n	8004e24 <HAL_UARTEx_DisableFifoMode+0x16>
 8004e20:	2302      	movs	r3, #2
 8004e22:	e027      	b.n	8004e74 <HAL_UARTEx_DisableFifoMode+0x66>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2201      	movs	r2, #1
 8004e28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2224      	movs	r2, #36	; 0x24
 8004e30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	681a      	ldr	r2, [r3, #0]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f022 0201 	bic.w	r2, r2, #1
 8004e4a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004e52:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2200      	movs	r2, #0
 8004e58:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	68fa      	ldr	r2, [r7, #12]
 8004e60:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2220      	movs	r2, #32
 8004e66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004e72:	2300      	movs	r3, #0
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	3714      	adds	r7, #20
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7e:	4770      	bx	lr

08004e80 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b084      	sub	sp, #16
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
 8004e88:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d101      	bne.n	8004e98 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004e94:	2302      	movs	r3, #2
 8004e96:	e02d      	b.n	8004ef4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2224      	movs	r2, #36	; 0x24
 8004ea4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	681a      	ldr	r2, [r3, #0]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f022 0201 	bic.w	r2, r2, #1
 8004ebe:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	683a      	ldr	r2, [r7, #0]
 8004ed0:	430a      	orrs	r2, r1
 8004ed2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	f000 f84f 	bl	8004f78 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	68fa      	ldr	r2, [r7, #12]
 8004ee0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2220      	movs	r2, #32
 8004ee6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2200      	movs	r2, #0
 8004eee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004ef2:	2300      	movs	r3, #0
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3710      	adds	r7, #16
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}

08004efc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b084      	sub	sp, #16
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d101      	bne.n	8004f14 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004f10:	2302      	movs	r3, #2
 8004f12:	e02d      	b.n	8004f70 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2201      	movs	r2, #1
 8004f18:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2224      	movs	r2, #36	; 0x24
 8004f20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f022 0201 	bic.w	r2, r2, #1
 8004f3a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	683a      	ldr	r2, [r7, #0]
 8004f4c:	430a      	orrs	r2, r1
 8004f4e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	f000 f811 	bl	8004f78 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	68fa      	ldr	r2, [r7, #12]
 8004f5c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2220      	movs	r2, #32
 8004f62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004f6e:	2300      	movs	r3, #0
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	3710      	adds	r7, #16
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}

08004f78 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b085      	sub	sp, #20
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d108      	bne.n	8004f9a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004f98:	e031      	b.n	8004ffe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004f9a:	2310      	movs	r3, #16
 8004f9c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004f9e:	2310      	movs	r3, #16
 8004fa0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	0e5b      	lsrs	r3, r3, #25
 8004faa:	b2db      	uxtb	r3, r3
 8004fac:	f003 0307 	and.w	r3, r3, #7
 8004fb0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	0f5b      	lsrs	r3, r3, #29
 8004fba:	b2db      	uxtb	r3, r3
 8004fbc:	f003 0307 	and.w	r3, r3, #7
 8004fc0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004fc2:	7bbb      	ldrb	r3, [r7, #14]
 8004fc4:	7b3a      	ldrb	r2, [r7, #12]
 8004fc6:	4911      	ldr	r1, [pc, #68]	; (800500c <UARTEx_SetNbDataToProcess+0x94>)
 8004fc8:	5c8a      	ldrb	r2, [r1, r2]
 8004fca:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004fce:	7b3a      	ldrb	r2, [r7, #12]
 8004fd0:	490f      	ldr	r1, [pc, #60]	; (8005010 <UARTEx_SetNbDataToProcess+0x98>)
 8004fd2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004fd4:	fb93 f3f2 	sdiv	r3, r3, r2
 8004fd8:	b29a      	uxth	r2, r3
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004fe0:	7bfb      	ldrb	r3, [r7, #15]
 8004fe2:	7b7a      	ldrb	r2, [r7, #13]
 8004fe4:	4909      	ldr	r1, [pc, #36]	; (800500c <UARTEx_SetNbDataToProcess+0x94>)
 8004fe6:	5c8a      	ldrb	r2, [r1, r2]
 8004fe8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004fec:	7b7a      	ldrb	r2, [r7, #13]
 8004fee:	4908      	ldr	r1, [pc, #32]	; (8005010 <UARTEx_SetNbDataToProcess+0x98>)
 8004ff0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004ff2:	fb93 f3f2 	sdiv	r3, r3, r2
 8004ff6:	b29a      	uxth	r2, r3
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004ffe:	bf00      	nop
 8005000:	3714      	adds	r7, #20
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr
 800500a:	bf00      	nop
 800500c:	08006000 	.word	0x08006000
 8005010:	08006008 	.word	0x08006008

08005014 <__errno>:
 8005014:	4b01      	ldr	r3, [pc, #4]	; (800501c <__errno+0x8>)
 8005016:	6818      	ldr	r0, [r3, #0]
 8005018:	4770      	bx	lr
 800501a:	bf00      	nop
 800501c:	24000010 	.word	0x24000010

08005020 <__libc_init_array>:
 8005020:	b570      	push	{r4, r5, r6, lr}
 8005022:	4d0d      	ldr	r5, [pc, #52]	; (8005058 <__libc_init_array+0x38>)
 8005024:	4c0d      	ldr	r4, [pc, #52]	; (800505c <__libc_init_array+0x3c>)
 8005026:	1b64      	subs	r4, r4, r5
 8005028:	10a4      	asrs	r4, r4, #2
 800502a:	2600      	movs	r6, #0
 800502c:	42a6      	cmp	r6, r4
 800502e:	d109      	bne.n	8005044 <__libc_init_array+0x24>
 8005030:	4d0b      	ldr	r5, [pc, #44]	; (8005060 <__libc_init_array+0x40>)
 8005032:	4c0c      	ldr	r4, [pc, #48]	; (8005064 <__libc_init_array+0x44>)
 8005034:	f000 ffae 	bl	8005f94 <_init>
 8005038:	1b64      	subs	r4, r4, r5
 800503a:	10a4      	asrs	r4, r4, #2
 800503c:	2600      	movs	r6, #0
 800503e:	42a6      	cmp	r6, r4
 8005040:	d105      	bne.n	800504e <__libc_init_array+0x2e>
 8005042:	bd70      	pop	{r4, r5, r6, pc}
 8005044:	f855 3b04 	ldr.w	r3, [r5], #4
 8005048:	4798      	blx	r3
 800504a:	3601      	adds	r6, #1
 800504c:	e7ee      	b.n	800502c <__libc_init_array+0xc>
 800504e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005052:	4798      	blx	r3
 8005054:	3601      	adds	r6, #1
 8005056:	e7f2      	b.n	800503e <__libc_init_array+0x1e>
 8005058:	080060b0 	.word	0x080060b0
 800505c:	080060b0 	.word	0x080060b0
 8005060:	080060b0 	.word	0x080060b0
 8005064:	080060b4 	.word	0x080060b4

08005068 <memset>:
 8005068:	4402      	add	r2, r0
 800506a:	4603      	mov	r3, r0
 800506c:	4293      	cmp	r3, r2
 800506e:	d100      	bne.n	8005072 <memset+0xa>
 8005070:	4770      	bx	lr
 8005072:	f803 1b01 	strb.w	r1, [r3], #1
 8005076:	e7f9      	b.n	800506c <memset+0x4>

08005078 <iprintf>:
 8005078:	b40f      	push	{r0, r1, r2, r3}
 800507a:	4b0a      	ldr	r3, [pc, #40]	; (80050a4 <iprintf+0x2c>)
 800507c:	b513      	push	{r0, r1, r4, lr}
 800507e:	681c      	ldr	r4, [r3, #0]
 8005080:	b124      	cbz	r4, 800508c <iprintf+0x14>
 8005082:	69a3      	ldr	r3, [r4, #24]
 8005084:	b913      	cbnz	r3, 800508c <iprintf+0x14>
 8005086:	4620      	mov	r0, r4
 8005088:	f000 f866 	bl	8005158 <__sinit>
 800508c:	ab05      	add	r3, sp, #20
 800508e:	9a04      	ldr	r2, [sp, #16]
 8005090:	68a1      	ldr	r1, [r4, #8]
 8005092:	9301      	str	r3, [sp, #4]
 8005094:	4620      	mov	r0, r4
 8005096:	f000 f9bd 	bl	8005414 <_vfiprintf_r>
 800509a:	b002      	add	sp, #8
 800509c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050a0:	b004      	add	sp, #16
 80050a2:	4770      	bx	lr
 80050a4:	24000010 	.word	0x24000010

080050a8 <std>:
 80050a8:	2300      	movs	r3, #0
 80050aa:	b510      	push	{r4, lr}
 80050ac:	4604      	mov	r4, r0
 80050ae:	e9c0 3300 	strd	r3, r3, [r0]
 80050b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80050b6:	6083      	str	r3, [r0, #8]
 80050b8:	8181      	strh	r1, [r0, #12]
 80050ba:	6643      	str	r3, [r0, #100]	; 0x64
 80050bc:	81c2      	strh	r2, [r0, #14]
 80050be:	6183      	str	r3, [r0, #24]
 80050c0:	4619      	mov	r1, r3
 80050c2:	2208      	movs	r2, #8
 80050c4:	305c      	adds	r0, #92	; 0x5c
 80050c6:	f7ff ffcf 	bl	8005068 <memset>
 80050ca:	4b05      	ldr	r3, [pc, #20]	; (80050e0 <std+0x38>)
 80050cc:	6263      	str	r3, [r4, #36]	; 0x24
 80050ce:	4b05      	ldr	r3, [pc, #20]	; (80050e4 <std+0x3c>)
 80050d0:	62a3      	str	r3, [r4, #40]	; 0x28
 80050d2:	4b05      	ldr	r3, [pc, #20]	; (80050e8 <std+0x40>)
 80050d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80050d6:	4b05      	ldr	r3, [pc, #20]	; (80050ec <std+0x44>)
 80050d8:	6224      	str	r4, [r4, #32]
 80050da:	6323      	str	r3, [r4, #48]	; 0x30
 80050dc:	bd10      	pop	{r4, pc}
 80050de:	bf00      	nop
 80050e0:	080059bd 	.word	0x080059bd
 80050e4:	080059df 	.word	0x080059df
 80050e8:	08005a17 	.word	0x08005a17
 80050ec:	08005a3b 	.word	0x08005a3b

080050f0 <_cleanup_r>:
 80050f0:	4901      	ldr	r1, [pc, #4]	; (80050f8 <_cleanup_r+0x8>)
 80050f2:	f000 b8af 	b.w	8005254 <_fwalk_reent>
 80050f6:	bf00      	nop
 80050f8:	08005d15 	.word	0x08005d15

080050fc <__sfmoreglue>:
 80050fc:	b570      	push	{r4, r5, r6, lr}
 80050fe:	2268      	movs	r2, #104	; 0x68
 8005100:	1e4d      	subs	r5, r1, #1
 8005102:	4355      	muls	r5, r2
 8005104:	460e      	mov	r6, r1
 8005106:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800510a:	f000 f8e5 	bl	80052d8 <_malloc_r>
 800510e:	4604      	mov	r4, r0
 8005110:	b140      	cbz	r0, 8005124 <__sfmoreglue+0x28>
 8005112:	2100      	movs	r1, #0
 8005114:	e9c0 1600 	strd	r1, r6, [r0]
 8005118:	300c      	adds	r0, #12
 800511a:	60a0      	str	r0, [r4, #8]
 800511c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005120:	f7ff ffa2 	bl	8005068 <memset>
 8005124:	4620      	mov	r0, r4
 8005126:	bd70      	pop	{r4, r5, r6, pc}

08005128 <__sfp_lock_acquire>:
 8005128:	4801      	ldr	r0, [pc, #4]	; (8005130 <__sfp_lock_acquire+0x8>)
 800512a:	f000 b8b3 	b.w	8005294 <__retarget_lock_acquire_recursive>
 800512e:	bf00      	nop
 8005130:	240001b9 	.word	0x240001b9

08005134 <__sfp_lock_release>:
 8005134:	4801      	ldr	r0, [pc, #4]	; (800513c <__sfp_lock_release+0x8>)
 8005136:	f000 b8ae 	b.w	8005296 <__retarget_lock_release_recursive>
 800513a:	bf00      	nop
 800513c:	240001b9 	.word	0x240001b9

08005140 <__sinit_lock_acquire>:
 8005140:	4801      	ldr	r0, [pc, #4]	; (8005148 <__sinit_lock_acquire+0x8>)
 8005142:	f000 b8a7 	b.w	8005294 <__retarget_lock_acquire_recursive>
 8005146:	bf00      	nop
 8005148:	240001ba 	.word	0x240001ba

0800514c <__sinit_lock_release>:
 800514c:	4801      	ldr	r0, [pc, #4]	; (8005154 <__sinit_lock_release+0x8>)
 800514e:	f000 b8a2 	b.w	8005296 <__retarget_lock_release_recursive>
 8005152:	bf00      	nop
 8005154:	240001ba 	.word	0x240001ba

08005158 <__sinit>:
 8005158:	b510      	push	{r4, lr}
 800515a:	4604      	mov	r4, r0
 800515c:	f7ff fff0 	bl	8005140 <__sinit_lock_acquire>
 8005160:	69a3      	ldr	r3, [r4, #24]
 8005162:	b11b      	cbz	r3, 800516c <__sinit+0x14>
 8005164:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005168:	f7ff bff0 	b.w	800514c <__sinit_lock_release>
 800516c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005170:	6523      	str	r3, [r4, #80]	; 0x50
 8005172:	4b13      	ldr	r3, [pc, #76]	; (80051c0 <__sinit+0x68>)
 8005174:	4a13      	ldr	r2, [pc, #76]	; (80051c4 <__sinit+0x6c>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	62a2      	str	r2, [r4, #40]	; 0x28
 800517a:	42a3      	cmp	r3, r4
 800517c:	bf04      	itt	eq
 800517e:	2301      	moveq	r3, #1
 8005180:	61a3      	streq	r3, [r4, #24]
 8005182:	4620      	mov	r0, r4
 8005184:	f000 f820 	bl	80051c8 <__sfp>
 8005188:	6060      	str	r0, [r4, #4]
 800518a:	4620      	mov	r0, r4
 800518c:	f000 f81c 	bl	80051c8 <__sfp>
 8005190:	60a0      	str	r0, [r4, #8]
 8005192:	4620      	mov	r0, r4
 8005194:	f000 f818 	bl	80051c8 <__sfp>
 8005198:	2200      	movs	r2, #0
 800519a:	60e0      	str	r0, [r4, #12]
 800519c:	2104      	movs	r1, #4
 800519e:	6860      	ldr	r0, [r4, #4]
 80051a0:	f7ff ff82 	bl	80050a8 <std>
 80051a4:	68a0      	ldr	r0, [r4, #8]
 80051a6:	2201      	movs	r2, #1
 80051a8:	2109      	movs	r1, #9
 80051aa:	f7ff ff7d 	bl	80050a8 <std>
 80051ae:	68e0      	ldr	r0, [r4, #12]
 80051b0:	2202      	movs	r2, #2
 80051b2:	2112      	movs	r1, #18
 80051b4:	f7ff ff78 	bl	80050a8 <std>
 80051b8:	2301      	movs	r3, #1
 80051ba:	61a3      	str	r3, [r4, #24]
 80051bc:	e7d2      	b.n	8005164 <__sinit+0xc>
 80051be:	bf00      	nop
 80051c0:	08006010 	.word	0x08006010
 80051c4:	080050f1 	.word	0x080050f1

080051c8 <__sfp>:
 80051c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051ca:	4607      	mov	r7, r0
 80051cc:	f7ff ffac 	bl	8005128 <__sfp_lock_acquire>
 80051d0:	4b1e      	ldr	r3, [pc, #120]	; (800524c <__sfp+0x84>)
 80051d2:	681e      	ldr	r6, [r3, #0]
 80051d4:	69b3      	ldr	r3, [r6, #24]
 80051d6:	b913      	cbnz	r3, 80051de <__sfp+0x16>
 80051d8:	4630      	mov	r0, r6
 80051da:	f7ff ffbd 	bl	8005158 <__sinit>
 80051de:	3648      	adds	r6, #72	; 0x48
 80051e0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80051e4:	3b01      	subs	r3, #1
 80051e6:	d503      	bpl.n	80051f0 <__sfp+0x28>
 80051e8:	6833      	ldr	r3, [r6, #0]
 80051ea:	b30b      	cbz	r3, 8005230 <__sfp+0x68>
 80051ec:	6836      	ldr	r6, [r6, #0]
 80051ee:	e7f7      	b.n	80051e0 <__sfp+0x18>
 80051f0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80051f4:	b9d5      	cbnz	r5, 800522c <__sfp+0x64>
 80051f6:	4b16      	ldr	r3, [pc, #88]	; (8005250 <__sfp+0x88>)
 80051f8:	60e3      	str	r3, [r4, #12]
 80051fa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80051fe:	6665      	str	r5, [r4, #100]	; 0x64
 8005200:	f000 f847 	bl	8005292 <__retarget_lock_init_recursive>
 8005204:	f7ff ff96 	bl	8005134 <__sfp_lock_release>
 8005208:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800520c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005210:	6025      	str	r5, [r4, #0]
 8005212:	61a5      	str	r5, [r4, #24]
 8005214:	2208      	movs	r2, #8
 8005216:	4629      	mov	r1, r5
 8005218:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800521c:	f7ff ff24 	bl	8005068 <memset>
 8005220:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005224:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005228:	4620      	mov	r0, r4
 800522a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800522c:	3468      	adds	r4, #104	; 0x68
 800522e:	e7d9      	b.n	80051e4 <__sfp+0x1c>
 8005230:	2104      	movs	r1, #4
 8005232:	4638      	mov	r0, r7
 8005234:	f7ff ff62 	bl	80050fc <__sfmoreglue>
 8005238:	4604      	mov	r4, r0
 800523a:	6030      	str	r0, [r6, #0]
 800523c:	2800      	cmp	r0, #0
 800523e:	d1d5      	bne.n	80051ec <__sfp+0x24>
 8005240:	f7ff ff78 	bl	8005134 <__sfp_lock_release>
 8005244:	230c      	movs	r3, #12
 8005246:	603b      	str	r3, [r7, #0]
 8005248:	e7ee      	b.n	8005228 <__sfp+0x60>
 800524a:	bf00      	nop
 800524c:	08006010 	.word	0x08006010
 8005250:	ffff0001 	.word	0xffff0001

08005254 <_fwalk_reent>:
 8005254:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005258:	4606      	mov	r6, r0
 800525a:	4688      	mov	r8, r1
 800525c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005260:	2700      	movs	r7, #0
 8005262:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005266:	f1b9 0901 	subs.w	r9, r9, #1
 800526a:	d505      	bpl.n	8005278 <_fwalk_reent+0x24>
 800526c:	6824      	ldr	r4, [r4, #0]
 800526e:	2c00      	cmp	r4, #0
 8005270:	d1f7      	bne.n	8005262 <_fwalk_reent+0xe>
 8005272:	4638      	mov	r0, r7
 8005274:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005278:	89ab      	ldrh	r3, [r5, #12]
 800527a:	2b01      	cmp	r3, #1
 800527c:	d907      	bls.n	800528e <_fwalk_reent+0x3a>
 800527e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005282:	3301      	adds	r3, #1
 8005284:	d003      	beq.n	800528e <_fwalk_reent+0x3a>
 8005286:	4629      	mov	r1, r5
 8005288:	4630      	mov	r0, r6
 800528a:	47c0      	blx	r8
 800528c:	4307      	orrs	r7, r0
 800528e:	3568      	adds	r5, #104	; 0x68
 8005290:	e7e9      	b.n	8005266 <_fwalk_reent+0x12>

08005292 <__retarget_lock_init_recursive>:
 8005292:	4770      	bx	lr

08005294 <__retarget_lock_acquire_recursive>:
 8005294:	4770      	bx	lr

08005296 <__retarget_lock_release_recursive>:
 8005296:	4770      	bx	lr

08005298 <sbrk_aligned>:
 8005298:	b570      	push	{r4, r5, r6, lr}
 800529a:	4e0e      	ldr	r6, [pc, #56]	; (80052d4 <sbrk_aligned+0x3c>)
 800529c:	460c      	mov	r4, r1
 800529e:	6831      	ldr	r1, [r6, #0]
 80052a0:	4605      	mov	r5, r0
 80052a2:	b911      	cbnz	r1, 80052aa <sbrk_aligned+0x12>
 80052a4:	f000 fb7a 	bl	800599c <_sbrk_r>
 80052a8:	6030      	str	r0, [r6, #0]
 80052aa:	4621      	mov	r1, r4
 80052ac:	4628      	mov	r0, r5
 80052ae:	f000 fb75 	bl	800599c <_sbrk_r>
 80052b2:	1c43      	adds	r3, r0, #1
 80052b4:	d00a      	beq.n	80052cc <sbrk_aligned+0x34>
 80052b6:	1cc4      	adds	r4, r0, #3
 80052b8:	f024 0403 	bic.w	r4, r4, #3
 80052bc:	42a0      	cmp	r0, r4
 80052be:	d007      	beq.n	80052d0 <sbrk_aligned+0x38>
 80052c0:	1a21      	subs	r1, r4, r0
 80052c2:	4628      	mov	r0, r5
 80052c4:	f000 fb6a 	bl	800599c <_sbrk_r>
 80052c8:	3001      	adds	r0, #1
 80052ca:	d101      	bne.n	80052d0 <sbrk_aligned+0x38>
 80052cc:	f04f 34ff 	mov.w	r4, #4294967295
 80052d0:	4620      	mov	r0, r4
 80052d2:	bd70      	pop	{r4, r5, r6, pc}
 80052d4:	240001c0 	.word	0x240001c0

080052d8 <_malloc_r>:
 80052d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052dc:	1ccd      	adds	r5, r1, #3
 80052de:	f025 0503 	bic.w	r5, r5, #3
 80052e2:	3508      	adds	r5, #8
 80052e4:	2d0c      	cmp	r5, #12
 80052e6:	bf38      	it	cc
 80052e8:	250c      	movcc	r5, #12
 80052ea:	2d00      	cmp	r5, #0
 80052ec:	4607      	mov	r7, r0
 80052ee:	db01      	blt.n	80052f4 <_malloc_r+0x1c>
 80052f0:	42a9      	cmp	r1, r5
 80052f2:	d905      	bls.n	8005300 <_malloc_r+0x28>
 80052f4:	230c      	movs	r3, #12
 80052f6:	603b      	str	r3, [r7, #0]
 80052f8:	2600      	movs	r6, #0
 80052fa:	4630      	mov	r0, r6
 80052fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005300:	4e2e      	ldr	r6, [pc, #184]	; (80053bc <_malloc_r+0xe4>)
 8005302:	f000 fdbb 	bl	8005e7c <__malloc_lock>
 8005306:	6833      	ldr	r3, [r6, #0]
 8005308:	461c      	mov	r4, r3
 800530a:	bb34      	cbnz	r4, 800535a <_malloc_r+0x82>
 800530c:	4629      	mov	r1, r5
 800530e:	4638      	mov	r0, r7
 8005310:	f7ff ffc2 	bl	8005298 <sbrk_aligned>
 8005314:	1c43      	adds	r3, r0, #1
 8005316:	4604      	mov	r4, r0
 8005318:	d14d      	bne.n	80053b6 <_malloc_r+0xde>
 800531a:	6834      	ldr	r4, [r6, #0]
 800531c:	4626      	mov	r6, r4
 800531e:	2e00      	cmp	r6, #0
 8005320:	d140      	bne.n	80053a4 <_malloc_r+0xcc>
 8005322:	6823      	ldr	r3, [r4, #0]
 8005324:	4631      	mov	r1, r6
 8005326:	4638      	mov	r0, r7
 8005328:	eb04 0803 	add.w	r8, r4, r3
 800532c:	f000 fb36 	bl	800599c <_sbrk_r>
 8005330:	4580      	cmp	r8, r0
 8005332:	d13a      	bne.n	80053aa <_malloc_r+0xd2>
 8005334:	6821      	ldr	r1, [r4, #0]
 8005336:	3503      	adds	r5, #3
 8005338:	1a6d      	subs	r5, r5, r1
 800533a:	f025 0503 	bic.w	r5, r5, #3
 800533e:	3508      	adds	r5, #8
 8005340:	2d0c      	cmp	r5, #12
 8005342:	bf38      	it	cc
 8005344:	250c      	movcc	r5, #12
 8005346:	4629      	mov	r1, r5
 8005348:	4638      	mov	r0, r7
 800534a:	f7ff ffa5 	bl	8005298 <sbrk_aligned>
 800534e:	3001      	adds	r0, #1
 8005350:	d02b      	beq.n	80053aa <_malloc_r+0xd2>
 8005352:	6823      	ldr	r3, [r4, #0]
 8005354:	442b      	add	r3, r5
 8005356:	6023      	str	r3, [r4, #0]
 8005358:	e00e      	b.n	8005378 <_malloc_r+0xa0>
 800535a:	6822      	ldr	r2, [r4, #0]
 800535c:	1b52      	subs	r2, r2, r5
 800535e:	d41e      	bmi.n	800539e <_malloc_r+0xc6>
 8005360:	2a0b      	cmp	r2, #11
 8005362:	d916      	bls.n	8005392 <_malloc_r+0xba>
 8005364:	1961      	adds	r1, r4, r5
 8005366:	42a3      	cmp	r3, r4
 8005368:	6025      	str	r5, [r4, #0]
 800536a:	bf18      	it	ne
 800536c:	6059      	strne	r1, [r3, #4]
 800536e:	6863      	ldr	r3, [r4, #4]
 8005370:	bf08      	it	eq
 8005372:	6031      	streq	r1, [r6, #0]
 8005374:	5162      	str	r2, [r4, r5]
 8005376:	604b      	str	r3, [r1, #4]
 8005378:	4638      	mov	r0, r7
 800537a:	f104 060b 	add.w	r6, r4, #11
 800537e:	f000 fd83 	bl	8005e88 <__malloc_unlock>
 8005382:	f026 0607 	bic.w	r6, r6, #7
 8005386:	1d23      	adds	r3, r4, #4
 8005388:	1af2      	subs	r2, r6, r3
 800538a:	d0b6      	beq.n	80052fa <_malloc_r+0x22>
 800538c:	1b9b      	subs	r3, r3, r6
 800538e:	50a3      	str	r3, [r4, r2]
 8005390:	e7b3      	b.n	80052fa <_malloc_r+0x22>
 8005392:	6862      	ldr	r2, [r4, #4]
 8005394:	42a3      	cmp	r3, r4
 8005396:	bf0c      	ite	eq
 8005398:	6032      	streq	r2, [r6, #0]
 800539a:	605a      	strne	r2, [r3, #4]
 800539c:	e7ec      	b.n	8005378 <_malloc_r+0xa0>
 800539e:	4623      	mov	r3, r4
 80053a0:	6864      	ldr	r4, [r4, #4]
 80053a2:	e7b2      	b.n	800530a <_malloc_r+0x32>
 80053a4:	4634      	mov	r4, r6
 80053a6:	6876      	ldr	r6, [r6, #4]
 80053a8:	e7b9      	b.n	800531e <_malloc_r+0x46>
 80053aa:	230c      	movs	r3, #12
 80053ac:	603b      	str	r3, [r7, #0]
 80053ae:	4638      	mov	r0, r7
 80053b0:	f000 fd6a 	bl	8005e88 <__malloc_unlock>
 80053b4:	e7a1      	b.n	80052fa <_malloc_r+0x22>
 80053b6:	6025      	str	r5, [r4, #0]
 80053b8:	e7de      	b.n	8005378 <_malloc_r+0xa0>
 80053ba:	bf00      	nop
 80053bc:	240001bc 	.word	0x240001bc

080053c0 <__sfputc_r>:
 80053c0:	6893      	ldr	r3, [r2, #8]
 80053c2:	3b01      	subs	r3, #1
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	b410      	push	{r4}
 80053c8:	6093      	str	r3, [r2, #8]
 80053ca:	da08      	bge.n	80053de <__sfputc_r+0x1e>
 80053cc:	6994      	ldr	r4, [r2, #24]
 80053ce:	42a3      	cmp	r3, r4
 80053d0:	db01      	blt.n	80053d6 <__sfputc_r+0x16>
 80053d2:	290a      	cmp	r1, #10
 80053d4:	d103      	bne.n	80053de <__sfputc_r+0x1e>
 80053d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80053da:	f000 bb33 	b.w	8005a44 <__swbuf_r>
 80053de:	6813      	ldr	r3, [r2, #0]
 80053e0:	1c58      	adds	r0, r3, #1
 80053e2:	6010      	str	r0, [r2, #0]
 80053e4:	7019      	strb	r1, [r3, #0]
 80053e6:	4608      	mov	r0, r1
 80053e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80053ec:	4770      	bx	lr

080053ee <__sfputs_r>:
 80053ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053f0:	4606      	mov	r6, r0
 80053f2:	460f      	mov	r7, r1
 80053f4:	4614      	mov	r4, r2
 80053f6:	18d5      	adds	r5, r2, r3
 80053f8:	42ac      	cmp	r4, r5
 80053fa:	d101      	bne.n	8005400 <__sfputs_r+0x12>
 80053fc:	2000      	movs	r0, #0
 80053fe:	e007      	b.n	8005410 <__sfputs_r+0x22>
 8005400:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005404:	463a      	mov	r2, r7
 8005406:	4630      	mov	r0, r6
 8005408:	f7ff ffda 	bl	80053c0 <__sfputc_r>
 800540c:	1c43      	adds	r3, r0, #1
 800540e:	d1f3      	bne.n	80053f8 <__sfputs_r+0xa>
 8005410:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005414 <_vfiprintf_r>:
 8005414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005418:	460d      	mov	r5, r1
 800541a:	b09d      	sub	sp, #116	; 0x74
 800541c:	4614      	mov	r4, r2
 800541e:	4698      	mov	r8, r3
 8005420:	4606      	mov	r6, r0
 8005422:	b118      	cbz	r0, 800542c <_vfiprintf_r+0x18>
 8005424:	6983      	ldr	r3, [r0, #24]
 8005426:	b90b      	cbnz	r3, 800542c <_vfiprintf_r+0x18>
 8005428:	f7ff fe96 	bl	8005158 <__sinit>
 800542c:	4b89      	ldr	r3, [pc, #548]	; (8005654 <_vfiprintf_r+0x240>)
 800542e:	429d      	cmp	r5, r3
 8005430:	d11b      	bne.n	800546a <_vfiprintf_r+0x56>
 8005432:	6875      	ldr	r5, [r6, #4]
 8005434:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005436:	07d9      	lsls	r1, r3, #31
 8005438:	d405      	bmi.n	8005446 <_vfiprintf_r+0x32>
 800543a:	89ab      	ldrh	r3, [r5, #12]
 800543c:	059a      	lsls	r2, r3, #22
 800543e:	d402      	bmi.n	8005446 <_vfiprintf_r+0x32>
 8005440:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005442:	f7ff ff27 	bl	8005294 <__retarget_lock_acquire_recursive>
 8005446:	89ab      	ldrh	r3, [r5, #12]
 8005448:	071b      	lsls	r3, r3, #28
 800544a:	d501      	bpl.n	8005450 <_vfiprintf_r+0x3c>
 800544c:	692b      	ldr	r3, [r5, #16]
 800544e:	b9eb      	cbnz	r3, 800548c <_vfiprintf_r+0x78>
 8005450:	4629      	mov	r1, r5
 8005452:	4630      	mov	r0, r6
 8005454:	f000 fb5a 	bl	8005b0c <__swsetup_r>
 8005458:	b1c0      	cbz	r0, 800548c <_vfiprintf_r+0x78>
 800545a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800545c:	07dc      	lsls	r4, r3, #31
 800545e:	d50e      	bpl.n	800547e <_vfiprintf_r+0x6a>
 8005460:	f04f 30ff 	mov.w	r0, #4294967295
 8005464:	b01d      	add	sp, #116	; 0x74
 8005466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800546a:	4b7b      	ldr	r3, [pc, #492]	; (8005658 <_vfiprintf_r+0x244>)
 800546c:	429d      	cmp	r5, r3
 800546e:	d101      	bne.n	8005474 <_vfiprintf_r+0x60>
 8005470:	68b5      	ldr	r5, [r6, #8]
 8005472:	e7df      	b.n	8005434 <_vfiprintf_r+0x20>
 8005474:	4b79      	ldr	r3, [pc, #484]	; (800565c <_vfiprintf_r+0x248>)
 8005476:	429d      	cmp	r5, r3
 8005478:	bf08      	it	eq
 800547a:	68f5      	ldreq	r5, [r6, #12]
 800547c:	e7da      	b.n	8005434 <_vfiprintf_r+0x20>
 800547e:	89ab      	ldrh	r3, [r5, #12]
 8005480:	0598      	lsls	r0, r3, #22
 8005482:	d4ed      	bmi.n	8005460 <_vfiprintf_r+0x4c>
 8005484:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005486:	f7ff ff06 	bl	8005296 <__retarget_lock_release_recursive>
 800548a:	e7e9      	b.n	8005460 <_vfiprintf_r+0x4c>
 800548c:	2300      	movs	r3, #0
 800548e:	9309      	str	r3, [sp, #36]	; 0x24
 8005490:	2320      	movs	r3, #32
 8005492:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005496:	f8cd 800c 	str.w	r8, [sp, #12]
 800549a:	2330      	movs	r3, #48	; 0x30
 800549c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005660 <_vfiprintf_r+0x24c>
 80054a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80054a4:	f04f 0901 	mov.w	r9, #1
 80054a8:	4623      	mov	r3, r4
 80054aa:	469a      	mov	sl, r3
 80054ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80054b0:	b10a      	cbz	r2, 80054b6 <_vfiprintf_r+0xa2>
 80054b2:	2a25      	cmp	r2, #37	; 0x25
 80054b4:	d1f9      	bne.n	80054aa <_vfiprintf_r+0x96>
 80054b6:	ebba 0b04 	subs.w	fp, sl, r4
 80054ba:	d00b      	beq.n	80054d4 <_vfiprintf_r+0xc0>
 80054bc:	465b      	mov	r3, fp
 80054be:	4622      	mov	r2, r4
 80054c0:	4629      	mov	r1, r5
 80054c2:	4630      	mov	r0, r6
 80054c4:	f7ff ff93 	bl	80053ee <__sfputs_r>
 80054c8:	3001      	adds	r0, #1
 80054ca:	f000 80aa 	beq.w	8005622 <_vfiprintf_r+0x20e>
 80054ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80054d0:	445a      	add	r2, fp
 80054d2:	9209      	str	r2, [sp, #36]	; 0x24
 80054d4:	f89a 3000 	ldrb.w	r3, [sl]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	f000 80a2 	beq.w	8005622 <_vfiprintf_r+0x20e>
 80054de:	2300      	movs	r3, #0
 80054e0:	f04f 32ff 	mov.w	r2, #4294967295
 80054e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80054e8:	f10a 0a01 	add.w	sl, sl, #1
 80054ec:	9304      	str	r3, [sp, #16]
 80054ee:	9307      	str	r3, [sp, #28]
 80054f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80054f4:	931a      	str	r3, [sp, #104]	; 0x68
 80054f6:	4654      	mov	r4, sl
 80054f8:	2205      	movs	r2, #5
 80054fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054fe:	4858      	ldr	r0, [pc, #352]	; (8005660 <_vfiprintf_r+0x24c>)
 8005500:	f7fa fef6 	bl	80002f0 <memchr>
 8005504:	9a04      	ldr	r2, [sp, #16]
 8005506:	b9d8      	cbnz	r0, 8005540 <_vfiprintf_r+0x12c>
 8005508:	06d1      	lsls	r1, r2, #27
 800550a:	bf44      	itt	mi
 800550c:	2320      	movmi	r3, #32
 800550e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005512:	0713      	lsls	r3, r2, #28
 8005514:	bf44      	itt	mi
 8005516:	232b      	movmi	r3, #43	; 0x2b
 8005518:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800551c:	f89a 3000 	ldrb.w	r3, [sl]
 8005520:	2b2a      	cmp	r3, #42	; 0x2a
 8005522:	d015      	beq.n	8005550 <_vfiprintf_r+0x13c>
 8005524:	9a07      	ldr	r2, [sp, #28]
 8005526:	4654      	mov	r4, sl
 8005528:	2000      	movs	r0, #0
 800552a:	f04f 0c0a 	mov.w	ip, #10
 800552e:	4621      	mov	r1, r4
 8005530:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005534:	3b30      	subs	r3, #48	; 0x30
 8005536:	2b09      	cmp	r3, #9
 8005538:	d94e      	bls.n	80055d8 <_vfiprintf_r+0x1c4>
 800553a:	b1b0      	cbz	r0, 800556a <_vfiprintf_r+0x156>
 800553c:	9207      	str	r2, [sp, #28]
 800553e:	e014      	b.n	800556a <_vfiprintf_r+0x156>
 8005540:	eba0 0308 	sub.w	r3, r0, r8
 8005544:	fa09 f303 	lsl.w	r3, r9, r3
 8005548:	4313      	orrs	r3, r2
 800554a:	9304      	str	r3, [sp, #16]
 800554c:	46a2      	mov	sl, r4
 800554e:	e7d2      	b.n	80054f6 <_vfiprintf_r+0xe2>
 8005550:	9b03      	ldr	r3, [sp, #12]
 8005552:	1d19      	adds	r1, r3, #4
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	9103      	str	r1, [sp, #12]
 8005558:	2b00      	cmp	r3, #0
 800555a:	bfbb      	ittet	lt
 800555c:	425b      	neglt	r3, r3
 800555e:	f042 0202 	orrlt.w	r2, r2, #2
 8005562:	9307      	strge	r3, [sp, #28]
 8005564:	9307      	strlt	r3, [sp, #28]
 8005566:	bfb8      	it	lt
 8005568:	9204      	strlt	r2, [sp, #16]
 800556a:	7823      	ldrb	r3, [r4, #0]
 800556c:	2b2e      	cmp	r3, #46	; 0x2e
 800556e:	d10c      	bne.n	800558a <_vfiprintf_r+0x176>
 8005570:	7863      	ldrb	r3, [r4, #1]
 8005572:	2b2a      	cmp	r3, #42	; 0x2a
 8005574:	d135      	bne.n	80055e2 <_vfiprintf_r+0x1ce>
 8005576:	9b03      	ldr	r3, [sp, #12]
 8005578:	1d1a      	adds	r2, r3, #4
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	9203      	str	r2, [sp, #12]
 800557e:	2b00      	cmp	r3, #0
 8005580:	bfb8      	it	lt
 8005582:	f04f 33ff 	movlt.w	r3, #4294967295
 8005586:	3402      	adds	r4, #2
 8005588:	9305      	str	r3, [sp, #20]
 800558a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005670 <_vfiprintf_r+0x25c>
 800558e:	7821      	ldrb	r1, [r4, #0]
 8005590:	2203      	movs	r2, #3
 8005592:	4650      	mov	r0, sl
 8005594:	f7fa feac 	bl	80002f0 <memchr>
 8005598:	b140      	cbz	r0, 80055ac <_vfiprintf_r+0x198>
 800559a:	2340      	movs	r3, #64	; 0x40
 800559c:	eba0 000a 	sub.w	r0, r0, sl
 80055a0:	fa03 f000 	lsl.w	r0, r3, r0
 80055a4:	9b04      	ldr	r3, [sp, #16]
 80055a6:	4303      	orrs	r3, r0
 80055a8:	3401      	adds	r4, #1
 80055aa:	9304      	str	r3, [sp, #16]
 80055ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055b0:	482c      	ldr	r0, [pc, #176]	; (8005664 <_vfiprintf_r+0x250>)
 80055b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80055b6:	2206      	movs	r2, #6
 80055b8:	f7fa fe9a 	bl	80002f0 <memchr>
 80055bc:	2800      	cmp	r0, #0
 80055be:	d03f      	beq.n	8005640 <_vfiprintf_r+0x22c>
 80055c0:	4b29      	ldr	r3, [pc, #164]	; (8005668 <_vfiprintf_r+0x254>)
 80055c2:	bb1b      	cbnz	r3, 800560c <_vfiprintf_r+0x1f8>
 80055c4:	9b03      	ldr	r3, [sp, #12]
 80055c6:	3307      	adds	r3, #7
 80055c8:	f023 0307 	bic.w	r3, r3, #7
 80055cc:	3308      	adds	r3, #8
 80055ce:	9303      	str	r3, [sp, #12]
 80055d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055d2:	443b      	add	r3, r7
 80055d4:	9309      	str	r3, [sp, #36]	; 0x24
 80055d6:	e767      	b.n	80054a8 <_vfiprintf_r+0x94>
 80055d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80055dc:	460c      	mov	r4, r1
 80055de:	2001      	movs	r0, #1
 80055e0:	e7a5      	b.n	800552e <_vfiprintf_r+0x11a>
 80055e2:	2300      	movs	r3, #0
 80055e4:	3401      	adds	r4, #1
 80055e6:	9305      	str	r3, [sp, #20]
 80055e8:	4619      	mov	r1, r3
 80055ea:	f04f 0c0a 	mov.w	ip, #10
 80055ee:	4620      	mov	r0, r4
 80055f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80055f4:	3a30      	subs	r2, #48	; 0x30
 80055f6:	2a09      	cmp	r2, #9
 80055f8:	d903      	bls.n	8005602 <_vfiprintf_r+0x1ee>
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d0c5      	beq.n	800558a <_vfiprintf_r+0x176>
 80055fe:	9105      	str	r1, [sp, #20]
 8005600:	e7c3      	b.n	800558a <_vfiprintf_r+0x176>
 8005602:	fb0c 2101 	mla	r1, ip, r1, r2
 8005606:	4604      	mov	r4, r0
 8005608:	2301      	movs	r3, #1
 800560a:	e7f0      	b.n	80055ee <_vfiprintf_r+0x1da>
 800560c:	ab03      	add	r3, sp, #12
 800560e:	9300      	str	r3, [sp, #0]
 8005610:	462a      	mov	r2, r5
 8005612:	4b16      	ldr	r3, [pc, #88]	; (800566c <_vfiprintf_r+0x258>)
 8005614:	a904      	add	r1, sp, #16
 8005616:	4630      	mov	r0, r6
 8005618:	f3af 8000 	nop.w
 800561c:	4607      	mov	r7, r0
 800561e:	1c78      	adds	r0, r7, #1
 8005620:	d1d6      	bne.n	80055d0 <_vfiprintf_r+0x1bc>
 8005622:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005624:	07d9      	lsls	r1, r3, #31
 8005626:	d405      	bmi.n	8005634 <_vfiprintf_r+0x220>
 8005628:	89ab      	ldrh	r3, [r5, #12]
 800562a:	059a      	lsls	r2, r3, #22
 800562c:	d402      	bmi.n	8005634 <_vfiprintf_r+0x220>
 800562e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005630:	f7ff fe31 	bl	8005296 <__retarget_lock_release_recursive>
 8005634:	89ab      	ldrh	r3, [r5, #12]
 8005636:	065b      	lsls	r3, r3, #25
 8005638:	f53f af12 	bmi.w	8005460 <_vfiprintf_r+0x4c>
 800563c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800563e:	e711      	b.n	8005464 <_vfiprintf_r+0x50>
 8005640:	ab03      	add	r3, sp, #12
 8005642:	9300      	str	r3, [sp, #0]
 8005644:	462a      	mov	r2, r5
 8005646:	4b09      	ldr	r3, [pc, #36]	; (800566c <_vfiprintf_r+0x258>)
 8005648:	a904      	add	r1, sp, #16
 800564a:	4630      	mov	r0, r6
 800564c:	f000 f880 	bl	8005750 <_printf_i>
 8005650:	e7e4      	b.n	800561c <_vfiprintf_r+0x208>
 8005652:	bf00      	nop
 8005654:	08006034 	.word	0x08006034
 8005658:	08006054 	.word	0x08006054
 800565c:	08006014 	.word	0x08006014
 8005660:	08006074 	.word	0x08006074
 8005664:	0800607e 	.word	0x0800607e
 8005668:	00000000 	.word	0x00000000
 800566c:	080053ef 	.word	0x080053ef
 8005670:	0800607a 	.word	0x0800607a

08005674 <_printf_common>:
 8005674:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005678:	4616      	mov	r6, r2
 800567a:	4699      	mov	r9, r3
 800567c:	688a      	ldr	r2, [r1, #8]
 800567e:	690b      	ldr	r3, [r1, #16]
 8005680:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005684:	4293      	cmp	r3, r2
 8005686:	bfb8      	it	lt
 8005688:	4613      	movlt	r3, r2
 800568a:	6033      	str	r3, [r6, #0]
 800568c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005690:	4607      	mov	r7, r0
 8005692:	460c      	mov	r4, r1
 8005694:	b10a      	cbz	r2, 800569a <_printf_common+0x26>
 8005696:	3301      	adds	r3, #1
 8005698:	6033      	str	r3, [r6, #0]
 800569a:	6823      	ldr	r3, [r4, #0]
 800569c:	0699      	lsls	r1, r3, #26
 800569e:	bf42      	ittt	mi
 80056a0:	6833      	ldrmi	r3, [r6, #0]
 80056a2:	3302      	addmi	r3, #2
 80056a4:	6033      	strmi	r3, [r6, #0]
 80056a6:	6825      	ldr	r5, [r4, #0]
 80056a8:	f015 0506 	ands.w	r5, r5, #6
 80056ac:	d106      	bne.n	80056bc <_printf_common+0x48>
 80056ae:	f104 0a19 	add.w	sl, r4, #25
 80056b2:	68e3      	ldr	r3, [r4, #12]
 80056b4:	6832      	ldr	r2, [r6, #0]
 80056b6:	1a9b      	subs	r3, r3, r2
 80056b8:	42ab      	cmp	r3, r5
 80056ba:	dc26      	bgt.n	800570a <_printf_common+0x96>
 80056bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80056c0:	1e13      	subs	r3, r2, #0
 80056c2:	6822      	ldr	r2, [r4, #0]
 80056c4:	bf18      	it	ne
 80056c6:	2301      	movne	r3, #1
 80056c8:	0692      	lsls	r2, r2, #26
 80056ca:	d42b      	bmi.n	8005724 <_printf_common+0xb0>
 80056cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80056d0:	4649      	mov	r1, r9
 80056d2:	4638      	mov	r0, r7
 80056d4:	47c0      	blx	r8
 80056d6:	3001      	adds	r0, #1
 80056d8:	d01e      	beq.n	8005718 <_printf_common+0xa4>
 80056da:	6823      	ldr	r3, [r4, #0]
 80056dc:	68e5      	ldr	r5, [r4, #12]
 80056de:	6832      	ldr	r2, [r6, #0]
 80056e0:	f003 0306 	and.w	r3, r3, #6
 80056e4:	2b04      	cmp	r3, #4
 80056e6:	bf08      	it	eq
 80056e8:	1aad      	subeq	r5, r5, r2
 80056ea:	68a3      	ldr	r3, [r4, #8]
 80056ec:	6922      	ldr	r2, [r4, #16]
 80056ee:	bf0c      	ite	eq
 80056f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80056f4:	2500      	movne	r5, #0
 80056f6:	4293      	cmp	r3, r2
 80056f8:	bfc4      	itt	gt
 80056fa:	1a9b      	subgt	r3, r3, r2
 80056fc:	18ed      	addgt	r5, r5, r3
 80056fe:	2600      	movs	r6, #0
 8005700:	341a      	adds	r4, #26
 8005702:	42b5      	cmp	r5, r6
 8005704:	d11a      	bne.n	800573c <_printf_common+0xc8>
 8005706:	2000      	movs	r0, #0
 8005708:	e008      	b.n	800571c <_printf_common+0xa8>
 800570a:	2301      	movs	r3, #1
 800570c:	4652      	mov	r2, sl
 800570e:	4649      	mov	r1, r9
 8005710:	4638      	mov	r0, r7
 8005712:	47c0      	blx	r8
 8005714:	3001      	adds	r0, #1
 8005716:	d103      	bne.n	8005720 <_printf_common+0xac>
 8005718:	f04f 30ff 	mov.w	r0, #4294967295
 800571c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005720:	3501      	adds	r5, #1
 8005722:	e7c6      	b.n	80056b2 <_printf_common+0x3e>
 8005724:	18e1      	adds	r1, r4, r3
 8005726:	1c5a      	adds	r2, r3, #1
 8005728:	2030      	movs	r0, #48	; 0x30
 800572a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800572e:	4422      	add	r2, r4
 8005730:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005734:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005738:	3302      	adds	r3, #2
 800573a:	e7c7      	b.n	80056cc <_printf_common+0x58>
 800573c:	2301      	movs	r3, #1
 800573e:	4622      	mov	r2, r4
 8005740:	4649      	mov	r1, r9
 8005742:	4638      	mov	r0, r7
 8005744:	47c0      	blx	r8
 8005746:	3001      	adds	r0, #1
 8005748:	d0e6      	beq.n	8005718 <_printf_common+0xa4>
 800574a:	3601      	adds	r6, #1
 800574c:	e7d9      	b.n	8005702 <_printf_common+0x8e>
	...

08005750 <_printf_i>:
 8005750:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005754:	7e0f      	ldrb	r7, [r1, #24]
 8005756:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005758:	2f78      	cmp	r7, #120	; 0x78
 800575a:	4691      	mov	r9, r2
 800575c:	4680      	mov	r8, r0
 800575e:	460c      	mov	r4, r1
 8005760:	469a      	mov	sl, r3
 8005762:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005766:	d807      	bhi.n	8005778 <_printf_i+0x28>
 8005768:	2f62      	cmp	r7, #98	; 0x62
 800576a:	d80a      	bhi.n	8005782 <_printf_i+0x32>
 800576c:	2f00      	cmp	r7, #0
 800576e:	f000 80d8 	beq.w	8005922 <_printf_i+0x1d2>
 8005772:	2f58      	cmp	r7, #88	; 0x58
 8005774:	f000 80a3 	beq.w	80058be <_printf_i+0x16e>
 8005778:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800577c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005780:	e03a      	b.n	80057f8 <_printf_i+0xa8>
 8005782:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005786:	2b15      	cmp	r3, #21
 8005788:	d8f6      	bhi.n	8005778 <_printf_i+0x28>
 800578a:	a101      	add	r1, pc, #4	; (adr r1, 8005790 <_printf_i+0x40>)
 800578c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005790:	080057e9 	.word	0x080057e9
 8005794:	080057fd 	.word	0x080057fd
 8005798:	08005779 	.word	0x08005779
 800579c:	08005779 	.word	0x08005779
 80057a0:	08005779 	.word	0x08005779
 80057a4:	08005779 	.word	0x08005779
 80057a8:	080057fd 	.word	0x080057fd
 80057ac:	08005779 	.word	0x08005779
 80057b0:	08005779 	.word	0x08005779
 80057b4:	08005779 	.word	0x08005779
 80057b8:	08005779 	.word	0x08005779
 80057bc:	08005909 	.word	0x08005909
 80057c0:	0800582d 	.word	0x0800582d
 80057c4:	080058eb 	.word	0x080058eb
 80057c8:	08005779 	.word	0x08005779
 80057cc:	08005779 	.word	0x08005779
 80057d0:	0800592b 	.word	0x0800592b
 80057d4:	08005779 	.word	0x08005779
 80057d8:	0800582d 	.word	0x0800582d
 80057dc:	08005779 	.word	0x08005779
 80057e0:	08005779 	.word	0x08005779
 80057e4:	080058f3 	.word	0x080058f3
 80057e8:	682b      	ldr	r3, [r5, #0]
 80057ea:	1d1a      	adds	r2, r3, #4
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	602a      	str	r2, [r5, #0]
 80057f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80057f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80057f8:	2301      	movs	r3, #1
 80057fa:	e0a3      	b.n	8005944 <_printf_i+0x1f4>
 80057fc:	6820      	ldr	r0, [r4, #0]
 80057fe:	6829      	ldr	r1, [r5, #0]
 8005800:	0606      	lsls	r6, r0, #24
 8005802:	f101 0304 	add.w	r3, r1, #4
 8005806:	d50a      	bpl.n	800581e <_printf_i+0xce>
 8005808:	680e      	ldr	r6, [r1, #0]
 800580a:	602b      	str	r3, [r5, #0]
 800580c:	2e00      	cmp	r6, #0
 800580e:	da03      	bge.n	8005818 <_printf_i+0xc8>
 8005810:	232d      	movs	r3, #45	; 0x2d
 8005812:	4276      	negs	r6, r6
 8005814:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005818:	485e      	ldr	r0, [pc, #376]	; (8005994 <_printf_i+0x244>)
 800581a:	230a      	movs	r3, #10
 800581c:	e019      	b.n	8005852 <_printf_i+0x102>
 800581e:	680e      	ldr	r6, [r1, #0]
 8005820:	602b      	str	r3, [r5, #0]
 8005822:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005826:	bf18      	it	ne
 8005828:	b236      	sxthne	r6, r6
 800582a:	e7ef      	b.n	800580c <_printf_i+0xbc>
 800582c:	682b      	ldr	r3, [r5, #0]
 800582e:	6820      	ldr	r0, [r4, #0]
 8005830:	1d19      	adds	r1, r3, #4
 8005832:	6029      	str	r1, [r5, #0]
 8005834:	0601      	lsls	r1, r0, #24
 8005836:	d501      	bpl.n	800583c <_printf_i+0xec>
 8005838:	681e      	ldr	r6, [r3, #0]
 800583a:	e002      	b.n	8005842 <_printf_i+0xf2>
 800583c:	0646      	lsls	r6, r0, #25
 800583e:	d5fb      	bpl.n	8005838 <_printf_i+0xe8>
 8005840:	881e      	ldrh	r6, [r3, #0]
 8005842:	4854      	ldr	r0, [pc, #336]	; (8005994 <_printf_i+0x244>)
 8005844:	2f6f      	cmp	r7, #111	; 0x6f
 8005846:	bf0c      	ite	eq
 8005848:	2308      	moveq	r3, #8
 800584a:	230a      	movne	r3, #10
 800584c:	2100      	movs	r1, #0
 800584e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005852:	6865      	ldr	r5, [r4, #4]
 8005854:	60a5      	str	r5, [r4, #8]
 8005856:	2d00      	cmp	r5, #0
 8005858:	bfa2      	ittt	ge
 800585a:	6821      	ldrge	r1, [r4, #0]
 800585c:	f021 0104 	bicge.w	r1, r1, #4
 8005860:	6021      	strge	r1, [r4, #0]
 8005862:	b90e      	cbnz	r6, 8005868 <_printf_i+0x118>
 8005864:	2d00      	cmp	r5, #0
 8005866:	d04d      	beq.n	8005904 <_printf_i+0x1b4>
 8005868:	4615      	mov	r5, r2
 800586a:	fbb6 f1f3 	udiv	r1, r6, r3
 800586e:	fb03 6711 	mls	r7, r3, r1, r6
 8005872:	5dc7      	ldrb	r7, [r0, r7]
 8005874:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005878:	4637      	mov	r7, r6
 800587a:	42bb      	cmp	r3, r7
 800587c:	460e      	mov	r6, r1
 800587e:	d9f4      	bls.n	800586a <_printf_i+0x11a>
 8005880:	2b08      	cmp	r3, #8
 8005882:	d10b      	bne.n	800589c <_printf_i+0x14c>
 8005884:	6823      	ldr	r3, [r4, #0]
 8005886:	07de      	lsls	r6, r3, #31
 8005888:	d508      	bpl.n	800589c <_printf_i+0x14c>
 800588a:	6923      	ldr	r3, [r4, #16]
 800588c:	6861      	ldr	r1, [r4, #4]
 800588e:	4299      	cmp	r1, r3
 8005890:	bfde      	ittt	le
 8005892:	2330      	movle	r3, #48	; 0x30
 8005894:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005898:	f105 35ff 	addle.w	r5, r5, #4294967295
 800589c:	1b52      	subs	r2, r2, r5
 800589e:	6122      	str	r2, [r4, #16]
 80058a0:	f8cd a000 	str.w	sl, [sp]
 80058a4:	464b      	mov	r3, r9
 80058a6:	aa03      	add	r2, sp, #12
 80058a8:	4621      	mov	r1, r4
 80058aa:	4640      	mov	r0, r8
 80058ac:	f7ff fee2 	bl	8005674 <_printf_common>
 80058b0:	3001      	adds	r0, #1
 80058b2:	d14c      	bne.n	800594e <_printf_i+0x1fe>
 80058b4:	f04f 30ff 	mov.w	r0, #4294967295
 80058b8:	b004      	add	sp, #16
 80058ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058be:	4835      	ldr	r0, [pc, #212]	; (8005994 <_printf_i+0x244>)
 80058c0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80058c4:	6829      	ldr	r1, [r5, #0]
 80058c6:	6823      	ldr	r3, [r4, #0]
 80058c8:	f851 6b04 	ldr.w	r6, [r1], #4
 80058cc:	6029      	str	r1, [r5, #0]
 80058ce:	061d      	lsls	r5, r3, #24
 80058d0:	d514      	bpl.n	80058fc <_printf_i+0x1ac>
 80058d2:	07df      	lsls	r7, r3, #31
 80058d4:	bf44      	itt	mi
 80058d6:	f043 0320 	orrmi.w	r3, r3, #32
 80058da:	6023      	strmi	r3, [r4, #0]
 80058dc:	b91e      	cbnz	r6, 80058e6 <_printf_i+0x196>
 80058de:	6823      	ldr	r3, [r4, #0]
 80058e0:	f023 0320 	bic.w	r3, r3, #32
 80058e4:	6023      	str	r3, [r4, #0]
 80058e6:	2310      	movs	r3, #16
 80058e8:	e7b0      	b.n	800584c <_printf_i+0xfc>
 80058ea:	6823      	ldr	r3, [r4, #0]
 80058ec:	f043 0320 	orr.w	r3, r3, #32
 80058f0:	6023      	str	r3, [r4, #0]
 80058f2:	2378      	movs	r3, #120	; 0x78
 80058f4:	4828      	ldr	r0, [pc, #160]	; (8005998 <_printf_i+0x248>)
 80058f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80058fa:	e7e3      	b.n	80058c4 <_printf_i+0x174>
 80058fc:	0659      	lsls	r1, r3, #25
 80058fe:	bf48      	it	mi
 8005900:	b2b6      	uxthmi	r6, r6
 8005902:	e7e6      	b.n	80058d2 <_printf_i+0x182>
 8005904:	4615      	mov	r5, r2
 8005906:	e7bb      	b.n	8005880 <_printf_i+0x130>
 8005908:	682b      	ldr	r3, [r5, #0]
 800590a:	6826      	ldr	r6, [r4, #0]
 800590c:	6961      	ldr	r1, [r4, #20]
 800590e:	1d18      	adds	r0, r3, #4
 8005910:	6028      	str	r0, [r5, #0]
 8005912:	0635      	lsls	r5, r6, #24
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	d501      	bpl.n	800591c <_printf_i+0x1cc>
 8005918:	6019      	str	r1, [r3, #0]
 800591a:	e002      	b.n	8005922 <_printf_i+0x1d2>
 800591c:	0670      	lsls	r0, r6, #25
 800591e:	d5fb      	bpl.n	8005918 <_printf_i+0x1c8>
 8005920:	8019      	strh	r1, [r3, #0]
 8005922:	2300      	movs	r3, #0
 8005924:	6123      	str	r3, [r4, #16]
 8005926:	4615      	mov	r5, r2
 8005928:	e7ba      	b.n	80058a0 <_printf_i+0x150>
 800592a:	682b      	ldr	r3, [r5, #0]
 800592c:	1d1a      	adds	r2, r3, #4
 800592e:	602a      	str	r2, [r5, #0]
 8005930:	681d      	ldr	r5, [r3, #0]
 8005932:	6862      	ldr	r2, [r4, #4]
 8005934:	2100      	movs	r1, #0
 8005936:	4628      	mov	r0, r5
 8005938:	f7fa fcda 	bl	80002f0 <memchr>
 800593c:	b108      	cbz	r0, 8005942 <_printf_i+0x1f2>
 800593e:	1b40      	subs	r0, r0, r5
 8005940:	6060      	str	r0, [r4, #4]
 8005942:	6863      	ldr	r3, [r4, #4]
 8005944:	6123      	str	r3, [r4, #16]
 8005946:	2300      	movs	r3, #0
 8005948:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800594c:	e7a8      	b.n	80058a0 <_printf_i+0x150>
 800594e:	6923      	ldr	r3, [r4, #16]
 8005950:	462a      	mov	r2, r5
 8005952:	4649      	mov	r1, r9
 8005954:	4640      	mov	r0, r8
 8005956:	47d0      	blx	sl
 8005958:	3001      	adds	r0, #1
 800595a:	d0ab      	beq.n	80058b4 <_printf_i+0x164>
 800595c:	6823      	ldr	r3, [r4, #0]
 800595e:	079b      	lsls	r3, r3, #30
 8005960:	d413      	bmi.n	800598a <_printf_i+0x23a>
 8005962:	68e0      	ldr	r0, [r4, #12]
 8005964:	9b03      	ldr	r3, [sp, #12]
 8005966:	4298      	cmp	r0, r3
 8005968:	bfb8      	it	lt
 800596a:	4618      	movlt	r0, r3
 800596c:	e7a4      	b.n	80058b8 <_printf_i+0x168>
 800596e:	2301      	movs	r3, #1
 8005970:	4632      	mov	r2, r6
 8005972:	4649      	mov	r1, r9
 8005974:	4640      	mov	r0, r8
 8005976:	47d0      	blx	sl
 8005978:	3001      	adds	r0, #1
 800597a:	d09b      	beq.n	80058b4 <_printf_i+0x164>
 800597c:	3501      	adds	r5, #1
 800597e:	68e3      	ldr	r3, [r4, #12]
 8005980:	9903      	ldr	r1, [sp, #12]
 8005982:	1a5b      	subs	r3, r3, r1
 8005984:	42ab      	cmp	r3, r5
 8005986:	dcf2      	bgt.n	800596e <_printf_i+0x21e>
 8005988:	e7eb      	b.n	8005962 <_printf_i+0x212>
 800598a:	2500      	movs	r5, #0
 800598c:	f104 0619 	add.w	r6, r4, #25
 8005990:	e7f5      	b.n	800597e <_printf_i+0x22e>
 8005992:	bf00      	nop
 8005994:	08006085 	.word	0x08006085
 8005998:	08006096 	.word	0x08006096

0800599c <_sbrk_r>:
 800599c:	b538      	push	{r3, r4, r5, lr}
 800599e:	4d06      	ldr	r5, [pc, #24]	; (80059b8 <_sbrk_r+0x1c>)
 80059a0:	2300      	movs	r3, #0
 80059a2:	4604      	mov	r4, r0
 80059a4:	4608      	mov	r0, r1
 80059a6:	602b      	str	r3, [r5, #0]
 80059a8:	f7fb fa9a 	bl	8000ee0 <_sbrk>
 80059ac:	1c43      	adds	r3, r0, #1
 80059ae:	d102      	bne.n	80059b6 <_sbrk_r+0x1a>
 80059b0:	682b      	ldr	r3, [r5, #0]
 80059b2:	b103      	cbz	r3, 80059b6 <_sbrk_r+0x1a>
 80059b4:	6023      	str	r3, [r4, #0]
 80059b6:	bd38      	pop	{r3, r4, r5, pc}
 80059b8:	240001c4 	.word	0x240001c4

080059bc <__sread>:
 80059bc:	b510      	push	{r4, lr}
 80059be:	460c      	mov	r4, r1
 80059c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059c4:	f000 fab2 	bl	8005f2c <_read_r>
 80059c8:	2800      	cmp	r0, #0
 80059ca:	bfab      	itete	ge
 80059cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80059ce:	89a3      	ldrhlt	r3, [r4, #12]
 80059d0:	181b      	addge	r3, r3, r0
 80059d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80059d6:	bfac      	ite	ge
 80059d8:	6563      	strge	r3, [r4, #84]	; 0x54
 80059da:	81a3      	strhlt	r3, [r4, #12]
 80059dc:	bd10      	pop	{r4, pc}

080059de <__swrite>:
 80059de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059e2:	461f      	mov	r7, r3
 80059e4:	898b      	ldrh	r3, [r1, #12]
 80059e6:	05db      	lsls	r3, r3, #23
 80059e8:	4605      	mov	r5, r0
 80059ea:	460c      	mov	r4, r1
 80059ec:	4616      	mov	r6, r2
 80059ee:	d505      	bpl.n	80059fc <__swrite+0x1e>
 80059f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059f4:	2302      	movs	r3, #2
 80059f6:	2200      	movs	r2, #0
 80059f8:	f000 f9c8 	bl	8005d8c <_lseek_r>
 80059fc:	89a3      	ldrh	r3, [r4, #12]
 80059fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a06:	81a3      	strh	r3, [r4, #12]
 8005a08:	4632      	mov	r2, r6
 8005a0a:	463b      	mov	r3, r7
 8005a0c:	4628      	mov	r0, r5
 8005a0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a12:	f000 b869 	b.w	8005ae8 <_write_r>

08005a16 <__sseek>:
 8005a16:	b510      	push	{r4, lr}
 8005a18:	460c      	mov	r4, r1
 8005a1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a1e:	f000 f9b5 	bl	8005d8c <_lseek_r>
 8005a22:	1c43      	adds	r3, r0, #1
 8005a24:	89a3      	ldrh	r3, [r4, #12]
 8005a26:	bf15      	itete	ne
 8005a28:	6560      	strne	r0, [r4, #84]	; 0x54
 8005a2a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005a2e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005a32:	81a3      	strheq	r3, [r4, #12]
 8005a34:	bf18      	it	ne
 8005a36:	81a3      	strhne	r3, [r4, #12]
 8005a38:	bd10      	pop	{r4, pc}

08005a3a <__sclose>:
 8005a3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a3e:	f000 b8d3 	b.w	8005be8 <_close_r>
	...

08005a44 <__swbuf_r>:
 8005a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a46:	460e      	mov	r6, r1
 8005a48:	4614      	mov	r4, r2
 8005a4a:	4605      	mov	r5, r0
 8005a4c:	b118      	cbz	r0, 8005a56 <__swbuf_r+0x12>
 8005a4e:	6983      	ldr	r3, [r0, #24]
 8005a50:	b90b      	cbnz	r3, 8005a56 <__swbuf_r+0x12>
 8005a52:	f7ff fb81 	bl	8005158 <__sinit>
 8005a56:	4b21      	ldr	r3, [pc, #132]	; (8005adc <__swbuf_r+0x98>)
 8005a58:	429c      	cmp	r4, r3
 8005a5a:	d12b      	bne.n	8005ab4 <__swbuf_r+0x70>
 8005a5c:	686c      	ldr	r4, [r5, #4]
 8005a5e:	69a3      	ldr	r3, [r4, #24]
 8005a60:	60a3      	str	r3, [r4, #8]
 8005a62:	89a3      	ldrh	r3, [r4, #12]
 8005a64:	071a      	lsls	r2, r3, #28
 8005a66:	d52f      	bpl.n	8005ac8 <__swbuf_r+0x84>
 8005a68:	6923      	ldr	r3, [r4, #16]
 8005a6a:	b36b      	cbz	r3, 8005ac8 <__swbuf_r+0x84>
 8005a6c:	6923      	ldr	r3, [r4, #16]
 8005a6e:	6820      	ldr	r0, [r4, #0]
 8005a70:	1ac0      	subs	r0, r0, r3
 8005a72:	6963      	ldr	r3, [r4, #20]
 8005a74:	b2f6      	uxtb	r6, r6
 8005a76:	4283      	cmp	r3, r0
 8005a78:	4637      	mov	r7, r6
 8005a7a:	dc04      	bgt.n	8005a86 <__swbuf_r+0x42>
 8005a7c:	4621      	mov	r1, r4
 8005a7e:	4628      	mov	r0, r5
 8005a80:	f000 f948 	bl	8005d14 <_fflush_r>
 8005a84:	bb30      	cbnz	r0, 8005ad4 <__swbuf_r+0x90>
 8005a86:	68a3      	ldr	r3, [r4, #8]
 8005a88:	3b01      	subs	r3, #1
 8005a8a:	60a3      	str	r3, [r4, #8]
 8005a8c:	6823      	ldr	r3, [r4, #0]
 8005a8e:	1c5a      	adds	r2, r3, #1
 8005a90:	6022      	str	r2, [r4, #0]
 8005a92:	701e      	strb	r6, [r3, #0]
 8005a94:	6963      	ldr	r3, [r4, #20]
 8005a96:	3001      	adds	r0, #1
 8005a98:	4283      	cmp	r3, r0
 8005a9a:	d004      	beq.n	8005aa6 <__swbuf_r+0x62>
 8005a9c:	89a3      	ldrh	r3, [r4, #12]
 8005a9e:	07db      	lsls	r3, r3, #31
 8005aa0:	d506      	bpl.n	8005ab0 <__swbuf_r+0x6c>
 8005aa2:	2e0a      	cmp	r6, #10
 8005aa4:	d104      	bne.n	8005ab0 <__swbuf_r+0x6c>
 8005aa6:	4621      	mov	r1, r4
 8005aa8:	4628      	mov	r0, r5
 8005aaa:	f000 f933 	bl	8005d14 <_fflush_r>
 8005aae:	b988      	cbnz	r0, 8005ad4 <__swbuf_r+0x90>
 8005ab0:	4638      	mov	r0, r7
 8005ab2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ab4:	4b0a      	ldr	r3, [pc, #40]	; (8005ae0 <__swbuf_r+0x9c>)
 8005ab6:	429c      	cmp	r4, r3
 8005ab8:	d101      	bne.n	8005abe <__swbuf_r+0x7a>
 8005aba:	68ac      	ldr	r4, [r5, #8]
 8005abc:	e7cf      	b.n	8005a5e <__swbuf_r+0x1a>
 8005abe:	4b09      	ldr	r3, [pc, #36]	; (8005ae4 <__swbuf_r+0xa0>)
 8005ac0:	429c      	cmp	r4, r3
 8005ac2:	bf08      	it	eq
 8005ac4:	68ec      	ldreq	r4, [r5, #12]
 8005ac6:	e7ca      	b.n	8005a5e <__swbuf_r+0x1a>
 8005ac8:	4621      	mov	r1, r4
 8005aca:	4628      	mov	r0, r5
 8005acc:	f000 f81e 	bl	8005b0c <__swsetup_r>
 8005ad0:	2800      	cmp	r0, #0
 8005ad2:	d0cb      	beq.n	8005a6c <__swbuf_r+0x28>
 8005ad4:	f04f 37ff 	mov.w	r7, #4294967295
 8005ad8:	e7ea      	b.n	8005ab0 <__swbuf_r+0x6c>
 8005ada:	bf00      	nop
 8005adc:	08006034 	.word	0x08006034
 8005ae0:	08006054 	.word	0x08006054
 8005ae4:	08006014 	.word	0x08006014

08005ae8 <_write_r>:
 8005ae8:	b538      	push	{r3, r4, r5, lr}
 8005aea:	4d07      	ldr	r5, [pc, #28]	; (8005b08 <_write_r+0x20>)
 8005aec:	4604      	mov	r4, r0
 8005aee:	4608      	mov	r0, r1
 8005af0:	4611      	mov	r1, r2
 8005af2:	2200      	movs	r2, #0
 8005af4:	602a      	str	r2, [r5, #0]
 8005af6:	461a      	mov	r2, r3
 8005af8:	f7fb f9a1 	bl	8000e3e <_write>
 8005afc:	1c43      	adds	r3, r0, #1
 8005afe:	d102      	bne.n	8005b06 <_write_r+0x1e>
 8005b00:	682b      	ldr	r3, [r5, #0]
 8005b02:	b103      	cbz	r3, 8005b06 <_write_r+0x1e>
 8005b04:	6023      	str	r3, [r4, #0]
 8005b06:	bd38      	pop	{r3, r4, r5, pc}
 8005b08:	240001c4 	.word	0x240001c4

08005b0c <__swsetup_r>:
 8005b0c:	4b32      	ldr	r3, [pc, #200]	; (8005bd8 <__swsetup_r+0xcc>)
 8005b0e:	b570      	push	{r4, r5, r6, lr}
 8005b10:	681d      	ldr	r5, [r3, #0]
 8005b12:	4606      	mov	r6, r0
 8005b14:	460c      	mov	r4, r1
 8005b16:	b125      	cbz	r5, 8005b22 <__swsetup_r+0x16>
 8005b18:	69ab      	ldr	r3, [r5, #24]
 8005b1a:	b913      	cbnz	r3, 8005b22 <__swsetup_r+0x16>
 8005b1c:	4628      	mov	r0, r5
 8005b1e:	f7ff fb1b 	bl	8005158 <__sinit>
 8005b22:	4b2e      	ldr	r3, [pc, #184]	; (8005bdc <__swsetup_r+0xd0>)
 8005b24:	429c      	cmp	r4, r3
 8005b26:	d10f      	bne.n	8005b48 <__swsetup_r+0x3c>
 8005b28:	686c      	ldr	r4, [r5, #4]
 8005b2a:	89a3      	ldrh	r3, [r4, #12]
 8005b2c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005b30:	0719      	lsls	r1, r3, #28
 8005b32:	d42c      	bmi.n	8005b8e <__swsetup_r+0x82>
 8005b34:	06dd      	lsls	r5, r3, #27
 8005b36:	d411      	bmi.n	8005b5c <__swsetup_r+0x50>
 8005b38:	2309      	movs	r3, #9
 8005b3a:	6033      	str	r3, [r6, #0]
 8005b3c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005b40:	81a3      	strh	r3, [r4, #12]
 8005b42:	f04f 30ff 	mov.w	r0, #4294967295
 8005b46:	e03e      	b.n	8005bc6 <__swsetup_r+0xba>
 8005b48:	4b25      	ldr	r3, [pc, #148]	; (8005be0 <__swsetup_r+0xd4>)
 8005b4a:	429c      	cmp	r4, r3
 8005b4c:	d101      	bne.n	8005b52 <__swsetup_r+0x46>
 8005b4e:	68ac      	ldr	r4, [r5, #8]
 8005b50:	e7eb      	b.n	8005b2a <__swsetup_r+0x1e>
 8005b52:	4b24      	ldr	r3, [pc, #144]	; (8005be4 <__swsetup_r+0xd8>)
 8005b54:	429c      	cmp	r4, r3
 8005b56:	bf08      	it	eq
 8005b58:	68ec      	ldreq	r4, [r5, #12]
 8005b5a:	e7e6      	b.n	8005b2a <__swsetup_r+0x1e>
 8005b5c:	0758      	lsls	r0, r3, #29
 8005b5e:	d512      	bpl.n	8005b86 <__swsetup_r+0x7a>
 8005b60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005b62:	b141      	cbz	r1, 8005b76 <__swsetup_r+0x6a>
 8005b64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005b68:	4299      	cmp	r1, r3
 8005b6a:	d002      	beq.n	8005b72 <__swsetup_r+0x66>
 8005b6c:	4630      	mov	r0, r6
 8005b6e:	f000 f991 	bl	8005e94 <_free_r>
 8005b72:	2300      	movs	r3, #0
 8005b74:	6363      	str	r3, [r4, #52]	; 0x34
 8005b76:	89a3      	ldrh	r3, [r4, #12]
 8005b78:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005b7c:	81a3      	strh	r3, [r4, #12]
 8005b7e:	2300      	movs	r3, #0
 8005b80:	6063      	str	r3, [r4, #4]
 8005b82:	6923      	ldr	r3, [r4, #16]
 8005b84:	6023      	str	r3, [r4, #0]
 8005b86:	89a3      	ldrh	r3, [r4, #12]
 8005b88:	f043 0308 	orr.w	r3, r3, #8
 8005b8c:	81a3      	strh	r3, [r4, #12]
 8005b8e:	6923      	ldr	r3, [r4, #16]
 8005b90:	b94b      	cbnz	r3, 8005ba6 <__swsetup_r+0x9a>
 8005b92:	89a3      	ldrh	r3, [r4, #12]
 8005b94:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005b98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b9c:	d003      	beq.n	8005ba6 <__swsetup_r+0x9a>
 8005b9e:	4621      	mov	r1, r4
 8005ba0:	4630      	mov	r0, r6
 8005ba2:	f000 f92b 	bl	8005dfc <__smakebuf_r>
 8005ba6:	89a0      	ldrh	r0, [r4, #12]
 8005ba8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005bac:	f010 0301 	ands.w	r3, r0, #1
 8005bb0:	d00a      	beq.n	8005bc8 <__swsetup_r+0xbc>
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	60a3      	str	r3, [r4, #8]
 8005bb6:	6963      	ldr	r3, [r4, #20]
 8005bb8:	425b      	negs	r3, r3
 8005bba:	61a3      	str	r3, [r4, #24]
 8005bbc:	6923      	ldr	r3, [r4, #16]
 8005bbe:	b943      	cbnz	r3, 8005bd2 <__swsetup_r+0xc6>
 8005bc0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005bc4:	d1ba      	bne.n	8005b3c <__swsetup_r+0x30>
 8005bc6:	bd70      	pop	{r4, r5, r6, pc}
 8005bc8:	0781      	lsls	r1, r0, #30
 8005bca:	bf58      	it	pl
 8005bcc:	6963      	ldrpl	r3, [r4, #20]
 8005bce:	60a3      	str	r3, [r4, #8]
 8005bd0:	e7f4      	b.n	8005bbc <__swsetup_r+0xb0>
 8005bd2:	2000      	movs	r0, #0
 8005bd4:	e7f7      	b.n	8005bc6 <__swsetup_r+0xba>
 8005bd6:	bf00      	nop
 8005bd8:	24000010 	.word	0x24000010
 8005bdc:	08006034 	.word	0x08006034
 8005be0:	08006054 	.word	0x08006054
 8005be4:	08006014 	.word	0x08006014

08005be8 <_close_r>:
 8005be8:	b538      	push	{r3, r4, r5, lr}
 8005bea:	4d06      	ldr	r5, [pc, #24]	; (8005c04 <_close_r+0x1c>)
 8005bec:	2300      	movs	r3, #0
 8005bee:	4604      	mov	r4, r0
 8005bf0:	4608      	mov	r0, r1
 8005bf2:	602b      	str	r3, [r5, #0]
 8005bf4:	f7fb f93f 	bl	8000e76 <_close>
 8005bf8:	1c43      	adds	r3, r0, #1
 8005bfa:	d102      	bne.n	8005c02 <_close_r+0x1a>
 8005bfc:	682b      	ldr	r3, [r5, #0]
 8005bfe:	b103      	cbz	r3, 8005c02 <_close_r+0x1a>
 8005c00:	6023      	str	r3, [r4, #0]
 8005c02:	bd38      	pop	{r3, r4, r5, pc}
 8005c04:	240001c4 	.word	0x240001c4

08005c08 <__sflush_r>:
 8005c08:	898a      	ldrh	r2, [r1, #12]
 8005c0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c0e:	4605      	mov	r5, r0
 8005c10:	0710      	lsls	r0, r2, #28
 8005c12:	460c      	mov	r4, r1
 8005c14:	d458      	bmi.n	8005cc8 <__sflush_r+0xc0>
 8005c16:	684b      	ldr	r3, [r1, #4]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	dc05      	bgt.n	8005c28 <__sflush_r+0x20>
 8005c1c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	dc02      	bgt.n	8005c28 <__sflush_r+0x20>
 8005c22:	2000      	movs	r0, #0
 8005c24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005c2a:	2e00      	cmp	r6, #0
 8005c2c:	d0f9      	beq.n	8005c22 <__sflush_r+0x1a>
 8005c2e:	2300      	movs	r3, #0
 8005c30:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005c34:	682f      	ldr	r7, [r5, #0]
 8005c36:	602b      	str	r3, [r5, #0]
 8005c38:	d032      	beq.n	8005ca0 <__sflush_r+0x98>
 8005c3a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005c3c:	89a3      	ldrh	r3, [r4, #12]
 8005c3e:	075a      	lsls	r2, r3, #29
 8005c40:	d505      	bpl.n	8005c4e <__sflush_r+0x46>
 8005c42:	6863      	ldr	r3, [r4, #4]
 8005c44:	1ac0      	subs	r0, r0, r3
 8005c46:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005c48:	b10b      	cbz	r3, 8005c4e <__sflush_r+0x46>
 8005c4a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005c4c:	1ac0      	subs	r0, r0, r3
 8005c4e:	2300      	movs	r3, #0
 8005c50:	4602      	mov	r2, r0
 8005c52:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005c54:	6a21      	ldr	r1, [r4, #32]
 8005c56:	4628      	mov	r0, r5
 8005c58:	47b0      	blx	r6
 8005c5a:	1c43      	adds	r3, r0, #1
 8005c5c:	89a3      	ldrh	r3, [r4, #12]
 8005c5e:	d106      	bne.n	8005c6e <__sflush_r+0x66>
 8005c60:	6829      	ldr	r1, [r5, #0]
 8005c62:	291d      	cmp	r1, #29
 8005c64:	d82c      	bhi.n	8005cc0 <__sflush_r+0xb8>
 8005c66:	4a2a      	ldr	r2, [pc, #168]	; (8005d10 <__sflush_r+0x108>)
 8005c68:	40ca      	lsrs	r2, r1
 8005c6a:	07d6      	lsls	r6, r2, #31
 8005c6c:	d528      	bpl.n	8005cc0 <__sflush_r+0xb8>
 8005c6e:	2200      	movs	r2, #0
 8005c70:	6062      	str	r2, [r4, #4]
 8005c72:	04d9      	lsls	r1, r3, #19
 8005c74:	6922      	ldr	r2, [r4, #16]
 8005c76:	6022      	str	r2, [r4, #0]
 8005c78:	d504      	bpl.n	8005c84 <__sflush_r+0x7c>
 8005c7a:	1c42      	adds	r2, r0, #1
 8005c7c:	d101      	bne.n	8005c82 <__sflush_r+0x7a>
 8005c7e:	682b      	ldr	r3, [r5, #0]
 8005c80:	b903      	cbnz	r3, 8005c84 <__sflush_r+0x7c>
 8005c82:	6560      	str	r0, [r4, #84]	; 0x54
 8005c84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c86:	602f      	str	r7, [r5, #0]
 8005c88:	2900      	cmp	r1, #0
 8005c8a:	d0ca      	beq.n	8005c22 <__sflush_r+0x1a>
 8005c8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005c90:	4299      	cmp	r1, r3
 8005c92:	d002      	beq.n	8005c9a <__sflush_r+0x92>
 8005c94:	4628      	mov	r0, r5
 8005c96:	f000 f8fd 	bl	8005e94 <_free_r>
 8005c9a:	2000      	movs	r0, #0
 8005c9c:	6360      	str	r0, [r4, #52]	; 0x34
 8005c9e:	e7c1      	b.n	8005c24 <__sflush_r+0x1c>
 8005ca0:	6a21      	ldr	r1, [r4, #32]
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	4628      	mov	r0, r5
 8005ca6:	47b0      	blx	r6
 8005ca8:	1c41      	adds	r1, r0, #1
 8005caa:	d1c7      	bne.n	8005c3c <__sflush_r+0x34>
 8005cac:	682b      	ldr	r3, [r5, #0]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d0c4      	beq.n	8005c3c <__sflush_r+0x34>
 8005cb2:	2b1d      	cmp	r3, #29
 8005cb4:	d001      	beq.n	8005cba <__sflush_r+0xb2>
 8005cb6:	2b16      	cmp	r3, #22
 8005cb8:	d101      	bne.n	8005cbe <__sflush_r+0xb6>
 8005cba:	602f      	str	r7, [r5, #0]
 8005cbc:	e7b1      	b.n	8005c22 <__sflush_r+0x1a>
 8005cbe:	89a3      	ldrh	r3, [r4, #12]
 8005cc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005cc4:	81a3      	strh	r3, [r4, #12]
 8005cc6:	e7ad      	b.n	8005c24 <__sflush_r+0x1c>
 8005cc8:	690f      	ldr	r7, [r1, #16]
 8005cca:	2f00      	cmp	r7, #0
 8005ccc:	d0a9      	beq.n	8005c22 <__sflush_r+0x1a>
 8005cce:	0793      	lsls	r3, r2, #30
 8005cd0:	680e      	ldr	r6, [r1, #0]
 8005cd2:	bf08      	it	eq
 8005cd4:	694b      	ldreq	r3, [r1, #20]
 8005cd6:	600f      	str	r7, [r1, #0]
 8005cd8:	bf18      	it	ne
 8005cda:	2300      	movne	r3, #0
 8005cdc:	eba6 0807 	sub.w	r8, r6, r7
 8005ce0:	608b      	str	r3, [r1, #8]
 8005ce2:	f1b8 0f00 	cmp.w	r8, #0
 8005ce6:	dd9c      	ble.n	8005c22 <__sflush_r+0x1a>
 8005ce8:	6a21      	ldr	r1, [r4, #32]
 8005cea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005cec:	4643      	mov	r3, r8
 8005cee:	463a      	mov	r2, r7
 8005cf0:	4628      	mov	r0, r5
 8005cf2:	47b0      	blx	r6
 8005cf4:	2800      	cmp	r0, #0
 8005cf6:	dc06      	bgt.n	8005d06 <__sflush_r+0xfe>
 8005cf8:	89a3      	ldrh	r3, [r4, #12]
 8005cfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005cfe:	81a3      	strh	r3, [r4, #12]
 8005d00:	f04f 30ff 	mov.w	r0, #4294967295
 8005d04:	e78e      	b.n	8005c24 <__sflush_r+0x1c>
 8005d06:	4407      	add	r7, r0
 8005d08:	eba8 0800 	sub.w	r8, r8, r0
 8005d0c:	e7e9      	b.n	8005ce2 <__sflush_r+0xda>
 8005d0e:	bf00      	nop
 8005d10:	20400001 	.word	0x20400001

08005d14 <_fflush_r>:
 8005d14:	b538      	push	{r3, r4, r5, lr}
 8005d16:	690b      	ldr	r3, [r1, #16]
 8005d18:	4605      	mov	r5, r0
 8005d1a:	460c      	mov	r4, r1
 8005d1c:	b913      	cbnz	r3, 8005d24 <_fflush_r+0x10>
 8005d1e:	2500      	movs	r5, #0
 8005d20:	4628      	mov	r0, r5
 8005d22:	bd38      	pop	{r3, r4, r5, pc}
 8005d24:	b118      	cbz	r0, 8005d2e <_fflush_r+0x1a>
 8005d26:	6983      	ldr	r3, [r0, #24]
 8005d28:	b90b      	cbnz	r3, 8005d2e <_fflush_r+0x1a>
 8005d2a:	f7ff fa15 	bl	8005158 <__sinit>
 8005d2e:	4b14      	ldr	r3, [pc, #80]	; (8005d80 <_fflush_r+0x6c>)
 8005d30:	429c      	cmp	r4, r3
 8005d32:	d11b      	bne.n	8005d6c <_fflush_r+0x58>
 8005d34:	686c      	ldr	r4, [r5, #4]
 8005d36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d0ef      	beq.n	8005d1e <_fflush_r+0xa>
 8005d3e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005d40:	07d0      	lsls	r0, r2, #31
 8005d42:	d404      	bmi.n	8005d4e <_fflush_r+0x3a>
 8005d44:	0599      	lsls	r1, r3, #22
 8005d46:	d402      	bmi.n	8005d4e <_fflush_r+0x3a>
 8005d48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d4a:	f7ff faa3 	bl	8005294 <__retarget_lock_acquire_recursive>
 8005d4e:	4628      	mov	r0, r5
 8005d50:	4621      	mov	r1, r4
 8005d52:	f7ff ff59 	bl	8005c08 <__sflush_r>
 8005d56:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005d58:	07da      	lsls	r2, r3, #31
 8005d5a:	4605      	mov	r5, r0
 8005d5c:	d4e0      	bmi.n	8005d20 <_fflush_r+0xc>
 8005d5e:	89a3      	ldrh	r3, [r4, #12]
 8005d60:	059b      	lsls	r3, r3, #22
 8005d62:	d4dd      	bmi.n	8005d20 <_fflush_r+0xc>
 8005d64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d66:	f7ff fa96 	bl	8005296 <__retarget_lock_release_recursive>
 8005d6a:	e7d9      	b.n	8005d20 <_fflush_r+0xc>
 8005d6c:	4b05      	ldr	r3, [pc, #20]	; (8005d84 <_fflush_r+0x70>)
 8005d6e:	429c      	cmp	r4, r3
 8005d70:	d101      	bne.n	8005d76 <_fflush_r+0x62>
 8005d72:	68ac      	ldr	r4, [r5, #8]
 8005d74:	e7df      	b.n	8005d36 <_fflush_r+0x22>
 8005d76:	4b04      	ldr	r3, [pc, #16]	; (8005d88 <_fflush_r+0x74>)
 8005d78:	429c      	cmp	r4, r3
 8005d7a:	bf08      	it	eq
 8005d7c:	68ec      	ldreq	r4, [r5, #12]
 8005d7e:	e7da      	b.n	8005d36 <_fflush_r+0x22>
 8005d80:	08006034 	.word	0x08006034
 8005d84:	08006054 	.word	0x08006054
 8005d88:	08006014 	.word	0x08006014

08005d8c <_lseek_r>:
 8005d8c:	b538      	push	{r3, r4, r5, lr}
 8005d8e:	4d07      	ldr	r5, [pc, #28]	; (8005dac <_lseek_r+0x20>)
 8005d90:	4604      	mov	r4, r0
 8005d92:	4608      	mov	r0, r1
 8005d94:	4611      	mov	r1, r2
 8005d96:	2200      	movs	r2, #0
 8005d98:	602a      	str	r2, [r5, #0]
 8005d9a:	461a      	mov	r2, r3
 8005d9c:	f7fb f892 	bl	8000ec4 <_lseek>
 8005da0:	1c43      	adds	r3, r0, #1
 8005da2:	d102      	bne.n	8005daa <_lseek_r+0x1e>
 8005da4:	682b      	ldr	r3, [r5, #0]
 8005da6:	b103      	cbz	r3, 8005daa <_lseek_r+0x1e>
 8005da8:	6023      	str	r3, [r4, #0]
 8005daa:	bd38      	pop	{r3, r4, r5, pc}
 8005dac:	240001c4 	.word	0x240001c4

08005db0 <__swhatbuf_r>:
 8005db0:	b570      	push	{r4, r5, r6, lr}
 8005db2:	460e      	mov	r6, r1
 8005db4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005db8:	2900      	cmp	r1, #0
 8005dba:	b096      	sub	sp, #88	; 0x58
 8005dbc:	4614      	mov	r4, r2
 8005dbe:	461d      	mov	r5, r3
 8005dc0:	da08      	bge.n	8005dd4 <__swhatbuf_r+0x24>
 8005dc2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	602a      	str	r2, [r5, #0]
 8005dca:	061a      	lsls	r2, r3, #24
 8005dcc:	d410      	bmi.n	8005df0 <__swhatbuf_r+0x40>
 8005dce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005dd2:	e00e      	b.n	8005df2 <__swhatbuf_r+0x42>
 8005dd4:	466a      	mov	r2, sp
 8005dd6:	f000 f8bb 	bl	8005f50 <_fstat_r>
 8005dda:	2800      	cmp	r0, #0
 8005ddc:	dbf1      	blt.n	8005dc2 <__swhatbuf_r+0x12>
 8005dde:	9a01      	ldr	r2, [sp, #4]
 8005de0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005de4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005de8:	425a      	negs	r2, r3
 8005dea:	415a      	adcs	r2, r3
 8005dec:	602a      	str	r2, [r5, #0]
 8005dee:	e7ee      	b.n	8005dce <__swhatbuf_r+0x1e>
 8005df0:	2340      	movs	r3, #64	; 0x40
 8005df2:	2000      	movs	r0, #0
 8005df4:	6023      	str	r3, [r4, #0]
 8005df6:	b016      	add	sp, #88	; 0x58
 8005df8:	bd70      	pop	{r4, r5, r6, pc}
	...

08005dfc <__smakebuf_r>:
 8005dfc:	898b      	ldrh	r3, [r1, #12]
 8005dfe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005e00:	079d      	lsls	r5, r3, #30
 8005e02:	4606      	mov	r6, r0
 8005e04:	460c      	mov	r4, r1
 8005e06:	d507      	bpl.n	8005e18 <__smakebuf_r+0x1c>
 8005e08:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005e0c:	6023      	str	r3, [r4, #0]
 8005e0e:	6123      	str	r3, [r4, #16]
 8005e10:	2301      	movs	r3, #1
 8005e12:	6163      	str	r3, [r4, #20]
 8005e14:	b002      	add	sp, #8
 8005e16:	bd70      	pop	{r4, r5, r6, pc}
 8005e18:	ab01      	add	r3, sp, #4
 8005e1a:	466a      	mov	r2, sp
 8005e1c:	f7ff ffc8 	bl	8005db0 <__swhatbuf_r>
 8005e20:	9900      	ldr	r1, [sp, #0]
 8005e22:	4605      	mov	r5, r0
 8005e24:	4630      	mov	r0, r6
 8005e26:	f7ff fa57 	bl	80052d8 <_malloc_r>
 8005e2a:	b948      	cbnz	r0, 8005e40 <__smakebuf_r+0x44>
 8005e2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e30:	059a      	lsls	r2, r3, #22
 8005e32:	d4ef      	bmi.n	8005e14 <__smakebuf_r+0x18>
 8005e34:	f023 0303 	bic.w	r3, r3, #3
 8005e38:	f043 0302 	orr.w	r3, r3, #2
 8005e3c:	81a3      	strh	r3, [r4, #12]
 8005e3e:	e7e3      	b.n	8005e08 <__smakebuf_r+0xc>
 8005e40:	4b0d      	ldr	r3, [pc, #52]	; (8005e78 <__smakebuf_r+0x7c>)
 8005e42:	62b3      	str	r3, [r6, #40]	; 0x28
 8005e44:	89a3      	ldrh	r3, [r4, #12]
 8005e46:	6020      	str	r0, [r4, #0]
 8005e48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e4c:	81a3      	strh	r3, [r4, #12]
 8005e4e:	9b00      	ldr	r3, [sp, #0]
 8005e50:	6163      	str	r3, [r4, #20]
 8005e52:	9b01      	ldr	r3, [sp, #4]
 8005e54:	6120      	str	r0, [r4, #16]
 8005e56:	b15b      	cbz	r3, 8005e70 <__smakebuf_r+0x74>
 8005e58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e5c:	4630      	mov	r0, r6
 8005e5e:	f000 f889 	bl	8005f74 <_isatty_r>
 8005e62:	b128      	cbz	r0, 8005e70 <__smakebuf_r+0x74>
 8005e64:	89a3      	ldrh	r3, [r4, #12]
 8005e66:	f023 0303 	bic.w	r3, r3, #3
 8005e6a:	f043 0301 	orr.w	r3, r3, #1
 8005e6e:	81a3      	strh	r3, [r4, #12]
 8005e70:	89a0      	ldrh	r0, [r4, #12]
 8005e72:	4305      	orrs	r5, r0
 8005e74:	81a5      	strh	r5, [r4, #12]
 8005e76:	e7cd      	b.n	8005e14 <__smakebuf_r+0x18>
 8005e78:	080050f1 	.word	0x080050f1

08005e7c <__malloc_lock>:
 8005e7c:	4801      	ldr	r0, [pc, #4]	; (8005e84 <__malloc_lock+0x8>)
 8005e7e:	f7ff ba09 	b.w	8005294 <__retarget_lock_acquire_recursive>
 8005e82:	bf00      	nop
 8005e84:	240001b8 	.word	0x240001b8

08005e88 <__malloc_unlock>:
 8005e88:	4801      	ldr	r0, [pc, #4]	; (8005e90 <__malloc_unlock+0x8>)
 8005e8a:	f7ff ba04 	b.w	8005296 <__retarget_lock_release_recursive>
 8005e8e:	bf00      	nop
 8005e90:	240001b8 	.word	0x240001b8

08005e94 <_free_r>:
 8005e94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005e96:	2900      	cmp	r1, #0
 8005e98:	d044      	beq.n	8005f24 <_free_r+0x90>
 8005e9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e9e:	9001      	str	r0, [sp, #4]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	f1a1 0404 	sub.w	r4, r1, #4
 8005ea6:	bfb8      	it	lt
 8005ea8:	18e4      	addlt	r4, r4, r3
 8005eaa:	f7ff ffe7 	bl	8005e7c <__malloc_lock>
 8005eae:	4a1e      	ldr	r2, [pc, #120]	; (8005f28 <_free_r+0x94>)
 8005eb0:	9801      	ldr	r0, [sp, #4]
 8005eb2:	6813      	ldr	r3, [r2, #0]
 8005eb4:	b933      	cbnz	r3, 8005ec4 <_free_r+0x30>
 8005eb6:	6063      	str	r3, [r4, #4]
 8005eb8:	6014      	str	r4, [r2, #0]
 8005eba:	b003      	add	sp, #12
 8005ebc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005ec0:	f7ff bfe2 	b.w	8005e88 <__malloc_unlock>
 8005ec4:	42a3      	cmp	r3, r4
 8005ec6:	d908      	bls.n	8005eda <_free_r+0x46>
 8005ec8:	6825      	ldr	r5, [r4, #0]
 8005eca:	1961      	adds	r1, r4, r5
 8005ecc:	428b      	cmp	r3, r1
 8005ece:	bf01      	itttt	eq
 8005ed0:	6819      	ldreq	r1, [r3, #0]
 8005ed2:	685b      	ldreq	r3, [r3, #4]
 8005ed4:	1949      	addeq	r1, r1, r5
 8005ed6:	6021      	streq	r1, [r4, #0]
 8005ed8:	e7ed      	b.n	8005eb6 <_free_r+0x22>
 8005eda:	461a      	mov	r2, r3
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	b10b      	cbz	r3, 8005ee4 <_free_r+0x50>
 8005ee0:	42a3      	cmp	r3, r4
 8005ee2:	d9fa      	bls.n	8005eda <_free_r+0x46>
 8005ee4:	6811      	ldr	r1, [r2, #0]
 8005ee6:	1855      	adds	r5, r2, r1
 8005ee8:	42a5      	cmp	r5, r4
 8005eea:	d10b      	bne.n	8005f04 <_free_r+0x70>
 8005eec:	6824      	ldr	r4, [r4, #0]
 8005eee:	4421      	add	r1, r4
 8005ef0:	1854      	adds	r4, r2, r1
 8005ef2:	42a3      	cmp	r3, r4
 8005ef4:	6011      	str	r1, [r2, #0]
 8005ef6:	d1e0      	bne.n	8005eba <_free_r+0x26>
 8005ef8:	681c      	ldr	r4, [r3, #0]
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	6053      	str	r3, [r2, #4]
 8005efe:	4421      	add	r1, r4
 8005f00:	6011      	str	r1, [r2, #0]
 8005f02:	e7da      	b.n	8005eba <_free_r+0x26>
 8005f04:	d902      	bls.n	8005f0c <_free_r+0x78>
 8005f06:	230c      	movs	r3, #12
 8005f08:	6003      	str	r3, [r0, #0]
 8005f0a:	e7d6      	b.n	8005eba <_free_r+0x26>
 8005f0c:	6825      	ldr	r5, [r4, #0]
 8005f0e:	1961      	adds	r1, r4, r5
 8005f10:	428b      	cmp	r3, r1
 8005f12:	bf04      	itt	eq
 8005f14:	6819      	ldreq	r1, [r3, #0]
 8005f16:	685b      	ldreq	r3, [r3, #4]
 8005f18:	6063      	str	r3, [r4, #4]
 8005f1a:	bf04      	itt	eq
 8005f1c:	1949      	addeq	r1, r1, r5
 8005f1e:	6021      	streq	r1, [r4, #0]
 8005f20:	6054      	str	r4, [r2, #4]
 8005f22:	e7ca      	b.n	8005eba <_free_r+0x26>
 8005f24:	b003      	add	sp, #12
 8005f26:	bd30      	pop	{r4, r5, pc}
 8005f28:	240001bc 	.word	0x240001bc

08005f2c <_read_r>:
 8005f2c:	b538      	push	{r3, r4, r5, lr}
 8005f2e:	4d07      	ldr	r5, [pc, #28]	; (8005f4c <_read_r+0x20>)
 8005f30:	4604      	mov	r4, r0
 8005f32:	4608      	mov	r0, r1
 8005f34:	4611      	mov	r1, r2
 8005f36:	2200      	movs	r2, #0
 8005f38:	602a      	str	r2, [r5, #0]
 8005f3a:	461a      	mov	r2, r3
 8005f3c:	f7fa ff62 	bl	8000e04 <_read>
 8005f40:	1c43      	adds	r3, r0, #1
 8005f42:	d102      	bne.n	8005f4a <_read_r+0x1e>
 8005f44:	682b      	ldr	r3, [r5, #0]
 8005f46:	b103      	cbz	r3, 8005f4a <_read_r+0x1e>
 8005f48:	6023      	str	r3, [r4, #0]
 8005f4a:	bd38      	pop	{r3, r4, r5, pc}
 8005f4c:	240001c4 	.word	0x240001c4

08005f50 <_fstat_r>:
 8005f50:	b538      	push	{r3, r4, r5, lr}
 8005f52:	4d07      	ldr	r5, [pc, #28]	; (8005f70 <_fstat_r+0x20>)
 8005f54:	2300      	movs	r3, #0
 8005f56:	4604      	mov	r4, r0
 8005f58:	4608      	mov	r0, r1
 8005f5a:	4611      	mov	r1, r2
 8005f5c:	602b      	str	r3, [r5, #0]
 8005f5e:	f7fa ff96 	bl	8000e8e <_fstat>
 8005f62:	1c43      	adds	r3, r0, #1
 8005f64:	d102      	bne.n	8005f6c <_fstat_r+0x1c>
 8005f66:	682b      	ldr	r3, [r5, #0]
 8005f68:	b103      	cbz	r3, 8005f6c <_fstat_r+0x1c>
 8005f6a:	6023      	str	r3, [r4, #0]
 8005f6c:	bd38      	pop	{r3, r4, r5, pc}
 8005f6e:	bf00      	nop
 8005f70:	240001c4 	.word	0x240001c4

08005f74 <_isatty_r>:
 8005f74:	b538      	push	{r3, r4, r5, lr}
 8005f76:	4d06      	ldr	r5, [pc, #24]	; (8005f90 <_isatty_r+0x1c>)
 8005f78:	2300      	movs	r3, #0
 8005f7a:	4604      	mov	r4, r0
 8005f7c:	4608      	mov	r0, r1
 8005f7e:	602b      	str	r3, [r5, #0]
 8005f80:	f7fa ff95 	bl	8000eae <_isatty>
 8005f84:	1c43      	adds	r3, r0, #1
 8005f86:	d102      	bne.n	8005f8e <_isatty_r+0x1a>
 8005f88:	682b      	ldr	r3, [r5, #0]
 8005f8a:	b103      	cbz	r3, 8005f8e <_isatty_r+0x1a>
 8005f8c:	6023      	str	r3, [r4, #0]
 8005f8e:	bd38      	pop	{r3, r4, r5, pc}
 8005f90:	240001c4 	.word	0x240001c4

08005f94 <_init>:
 8005f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f96:	bf00      	nop
 8005f98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f9a:	bc08      	pop	{r3}
 8005f9c:	469e      	mov	lr, r3
 8005f9e:	4770      	bx	lr

08005fa0 <_fini>:
 8005fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fa2:	bf00      	nop
 8005fa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fa6:	bc08      	pop	{r3}
 8005fa8:	469e      	mov	lr, r3
 8005faa:	4770      	bx	lr
