
STM32H7_I2C_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000067c0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08006a60  08006a60  00016a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b38  08006b38  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006b38  08006b38  00016b38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b40  08006b40  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b40  08006b40  00016b40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b44  08006b44  00016b44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  24000000  08006b48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  24000074  08006bbc  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24000184  08006bbc  00020184  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014abb  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025bf  00000000  00000000  00034b5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ec0  00000000  00000000  00037120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000dc8  00000000  00000000  00037fe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003a7be  00000000  00000000  00038da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014103  00000000  00000000  00073566  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0017d40f  00000000  00000000  00087669  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00204a78  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044b8  00000000  00000000  00204ac8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000074 	.word	0x24000074
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08006a48 	.word	0x08006a48

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000078 	.word	0x24000078
 80002dc:	08006a48 	.word	0x08006a48

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000688:	4b3d      	ldr	r3, [pc, #244]	; (8000780 <SystemInit+0xfc>)
 800068a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800068e:	4a3c      	ldr	r2, [pc, #240]	; (8000780 <SystemInit+0xfc>)
 8000690:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000694:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000698:	4b39      	ldr	r3, [pc, #228]	; (8000780 <SystemInit+0xfc>)
 800069a:	691b      	ldr	r3, [r3, #16]
 800069c:	4a38      	ldr	r2, [pc, #224]	; (8000780 <SystemInit+0xfc>)
 800069e:	f043 0310 	orr.w	r3, r3, #16
 80006a2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006a4:	4b37      	ldr	r3, [pc, #220]	; (8000784 <SystemInit+0x100>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f003 030f 	and.w	r3, r3, #15
 80006ac:	2b06      	cmp	r3, #6
 80006ae:	d807      	bhi.n	80006c0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006b0:	4b34      	ldr	r3, [pc, #208]	; (8000784 <SystemInit+0x100>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f023 030f 	bic.w	r3, r3, #15
 80006b8:	4a32      	ldr	r2, [pc, #200]	; (8000784 <SystemInit+0x100>)
 80006ba:	f043 0307 	orr.w	r3, r3, #7
 80006be:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006c0:	4b31      	ldr	r3, [pc, #196]	; (8000788 <SystemInit+0x104>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a30      	ldr	r2, [pc, #192]	; (8000788 <SystemInit+0x104>)
 80006c6:	f043 0301 	orr.w	r3, r3, #1
 80006ca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006cc:	4b2e      	ldr	r3, [pc, #184]	; (8000788 <SystemInit+0x104>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006d2:	4b2d      	ldr	r3, [pc, #180]	; (8000788 <SystemInit+0x104>)
 80006d4:	681a      	ldr	r2, [r3, #0]
 80006d6:	492c      	ldr	r1, [pc, #176]	; (8000788 <SystemInit+0x104>)
 80006d8:	4b2c      	ldr	r3, [pc, #176]	; (800078c <SystemInit+0x108>)
 80006da:	4013      	ands	r3, r2
 80006dc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006de:	4b29      	ldr	r3, [pc, #164]	; (8000784 <SystemInit+0x100>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	f003 0308 	and.w	r3, r3, #8
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d007      	beq.n	80006fa <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006ea:	4b26      	ldr	r3, [pc, #152]	; (8000784 <SystemInit+0x100>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	f023 030f 	bic.w	r3, r3, #15
 80006f2:	4a24      	ldr	r2, [pc, #144]	; (8000784 <SystemInit+0x100>)
 80006f4:	f043 0307 	orr.w	r3, r3, #7
 80006f8:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006fa:	4b23      	ldr	r3, [pc, #140]	; (8000788 <SystemInit+0x104>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000700:	4b21      	ldr	r3, [pc, #132]	; (8000788 <SystemInit+0x104>)
 8000702:	2200      	movs	r2, #0
 8000704:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000706:	4b20      	ldr	r3, [pc, #128]	; (8000788 <SystemInit+0x104>)
 8000708:	2200      	movs	r2, #0
 800070a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800070c:	4b1e      	ldr	r3, [pc, #120]	; (8000788 <SystemInit+0x104>)
 800070e:	4a20      	ldr	r2, [pc, #128]	; (8000790 <SystemInit+0x10c>)
 8000710:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000712:	4b1d      	ldr	r3, [pc, #116]	; (8000788 <SystemInit+0x104>)
 8000714:	4a1f      	ldr	r2, [pc, #124]	; (8000794 <SystemInit+0x110>)
 8000716:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000718:	4b1b      	ldr	r3, [pc, #108]	; (8000788 <SystemInit+0x104>)
 800071a:	4a1f      	ldr	r2, [pc, #124]	; (8000798 <SystemInit+0x114>)
 800071c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800071e:	4b1a      	ldr	r3, [pc, #104]	; (8000788 <SystemInit+0x104>)
 8000720:	2200      	movs	r2, #0
 8000722:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000724:	4b18      	ldr	r3, [pc, #96]	; (8000788 <SystemInit+0x104>)
 8000726:	4a1c      	ldr	r2, [pc, #112]	; (8000798 <SystemInit+0x114>)
 8000728:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800072a:	4b17      	ldr	r3, [pc, #92]	; (8000788 <SystemInit+0x104>)
 800072c:	2200      	movs	r2, #0
 800072e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000730:	4b15      	ldr	r3, [pc, #84]	; (8000788 <SystemInit+0x104>)
 8000732:	4a19      	ldr	r2, [pc, #100]	; (8000798 <SystemInit+0x114>)
 8000734:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000736:	4b14      	ldr	r3, [pc, #80]	; (8000788 <SystemInit+0x104>)
 8000738:	2200      	movs	r2, #0
 800073a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800073c:	4b12      	ldr	r3, [pc, #72]	; (8000788 <SystemInit+0x104>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a11      	ldr	r2, [pc, #68]	; (8000788 <SystemInit+0x104>)
 8000742:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000746:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000748:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <SystemInit+0x104>)
 800074a:	2200      	movs	r2, #0
 800074c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800074e:	4b13      	ldr	r3, [pc, #76]	; (800079c <SystemInit+0x118>)
 8000750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000752:	4a12      	ldr	r2, [pc, #72]	; (800079c <SystemInit+0x118>)
 8000754:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000758:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800075a:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <SystemInit+0x11c>)
 800075c:	681a      	ldr	r2, [r3, #0]
 800075e:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <SystemInit+0x120>)
 8000760:	4013      	ands	r3, r2
 8000762:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000766:	d202      	bcs.n	800076e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000768:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <SystemInit+0x124>)
 800076a:	2201      	movs	r2, #1
 800076c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800076e:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <SystemInit+0x128>)
 8000770:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000774:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000776:	bf00      	nop
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr
 8000780:	e000ed00 	.word	0xe000ed00
 8000784:	52002000 	.word	0x52002000
 8000788:	58024400 	.word	0x58024400
 800078c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000790:	02020200 	.word	0x02020200
 8000794:	01ff0000 	.word	0x01ff0000
 8000798:	01010280 	.word	0x01010280
 800079c:	580000c0 	.word	0x580000c0
 80007a0:	5c001000 	.word	0x5c001000
 80007a4:	ffff0000 	.word	0xffff0000
 80007a8:	51008108 	.word	0x51008108
 80007ac:	52004000 	.word	0x52004000

080007b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b086      	sub	sp, #24
 80007b4:	af02      	add	r7, sp, #8
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80007b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007ba:	60fb      	str	r3, [r7, #12]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80007bc:	bf00      	nop
 80007be:	4b32      	ldr	r3, [pc, #200]	; (8000888 <main+0xd8>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d004      	beq.n	80007d4 <main+0x24>
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	1e5a      	subs	r2, r3, #1
 80007ce:	60fa      	str	r2, [r7, #12]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	dcf4      	bgt.n	80007be <main+0xe>
  if ( timeout < 0 )
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	da01      	bge.n	80007de <main+0x2e>
  {
  Error_Handler();
 80007da:	f000 f9d5 	bl	8000b88 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007de:	f000 fbc9 	bl	8000f74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007e2:	f000 f857 	bl	8000894 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80007e6:	4b28      	ldr	r3, [pc, #160]	; (8000888 <main+0xd8>)
 80007e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007ec:	4a26      	ldr	r2, [pc, #152]	; (8000888 <main+0xd8>)
 80007ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007f6:	4b24      	ldr	r3, [pc, #144]	; (8000888 <main+0xd8>)
 80007f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000800:	607b      	str	r3, [r7, #4]
 8000802:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000804:	2000      	movs	r0, #0
 8000806:	f000 ff25 	bl	8001654 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800080a:	2100      	movs	r1, #0
 800080c:	2000      	movs	r0, #0
 800080e:	f000 ff3b 	bl	8001688 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000812:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000816:	60fb      	str	r3, [r7, #12]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000818:	bf00      	nop
 800081a:	4b1b      	ldr	r3, [pc, #108]	; (8000888 <main+0xd8>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000822:	2b00      	cmp	r3, #0
 8000824:	d104      	bne.n	8000830 <main+0x80>
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	1e5a      	subs	r2, r3, #1
 800082a:	60fa      	str	r2, [r7, #12]
 800082c:	2b00      	cmp	r3, #0
 800082e:	dcf4      	bgt.n	800081a <main+0x6a>
if ( timeout < 0 )
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	2b00      	cmp	r3, #0
 8000834:	da01      	bge.n	800083a <main+0x8a>
{
Error_Handler();
 8000836:	f000 f9a7 	bl	8000b88 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800083a:	f000 f931 	bl	8000aa0 <MX_GPIO_Init>
  MX_I2C2_Init();
 800083e:	f000 f8a3 	bl	8000988 <MX_I2C2_Init>
  MX_USART3_UART_Init();
 8000842:	f000 f8e1 	bl	8000a08 <MX_USART3_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint16_t addr = 0x68;
 8000846:	2368      	movs	r3, #104	; 0x68
 8000848:	817b      	strh	r3, [r7, #10]
  uint8_t data_sec = 0x04, msg;
 800084a:	2304      	movs	r3, #4
 800084c:	727b      	strb	r3, [r7, #9]

  while (1)
  {
	  HAL_I2C_Master_Transmit(&hi2c2, addr, &data_sec, sizeof(data_sec), HAL_MAX_DELAY);
 800084e:	f107 0209 	add.w	r2, r7, #9
 8000852:	8979      	ldrh	r1, [r7, #10]
 8000854:	f04f 33ff 	mov.w	r3, #4294967295
 8000858:	9300      	str	r3, [sp, #0]
 800085a:	2301      	movs	r3, #1
 800085c:	480b      	ldr	r0, [pc, #44]	; (800088c <main+0xdc>)
 800085e:	f000 ffb7 	bl	80017d0 <HAL_I2C_Master_Transmit>
	  HAL_I2C_Master_Receive(&hi2c2, addr, &msg, sizeof(msg), HAL_MAX_DELAY);
 8000862:	f107 0208 	add.w	r2, r7, #8
 8000866:	8979      	ldrh	r1, [r7, #10]
 8000868:	f04f 33ff 	mov.w	r3, #4294967295
 800086c:	9300      	str	r3, [sp, #0]
 800086e:	2301      	movs	r3, #1
 8000870:	4806      	ldr	r0, [pc, #24]	; (800088c <main+0xdc>)
 8000872:	f001 f8a1 	bl	80019b8 <HAL_I2C_Master_Receive>
	  printf("%d\r\n",msg);
 8000876:	7a3b      	ldrb	r3, [r7, #8]
 8000878:	4619      	mov	r1, r3
 800087a:	4805      	ldr	r0, [pc, #20]	; (8000890 <main+0xe0>)
 800087c:	f005 f956 	bl	8005b2c <iprintf>
  	  HAL_Delay(100);
 8000880:	2064      	movs	r0, #100	; 0x64
 8000882:	f000 fc09 	bl	8001098 <HAL_Delay>
	  HAL_I2C_Master_Transmit(&hi2c2, addr, &data_sec, sizeof(data_sec), HAL_MAX_DELAY);
 8000886:	e7e2      	b.n	800084e <main+0x9e>
 8000888:	58024400 	.word	0x58024400
 800088c:	24000090 	.word	0x24000090
 8000890:	08006a60 	.word	0x08006a60

08000894 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b09c      	sub	sp, #112	; 0x70
 8000898:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800089a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800089e:	224c      	movs	r2, #76	; 0x4c
 80008a0:	2100      	movs	r1, #0
 80008a2:	4618      	mov	r0, r3
 80008a4:	f005 f93a 	bl	8005b1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008a8:	1d3b      	adds	r3, r7, #4
 80008aa:	2220      	movs	r2, #32
 80008ac:	2100      	movs	r1, #0
 80008ae:	4618      	mov	r0, r3
 80008b0:	f005 f934 	bl	8005b1c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80008b4:	2004      	movs	r0, #4
 80008b6:	f001 fc85 	bl	80021c4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80008ba:	2300      	movs	r3, #0
 80008bc:	603b      	str	r3, [r7, #0]
 80008be:	4b30      	ldr	r3, [pc, #192]	; (8000980 <SystemClock_Config+0xec>)
 80008c0:	699b      	ldr	r3, [r3, #24]
 80008c2:	4a2f      	ldr	r2, [pc, #188]	; (8000980 <SystemClock_Config+0xec>)
 80008c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008c8:	6193      	str	r3, [r2, #24]
 80008ca:	4b2d      	ldr	r3, [pc, #180]	; (8000980 <SystemClock_Config+0xec>)
 80008cc:	699b      	ldr	r3, [r3, #24]
 80008ce:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008d2:	603b      	str	r3, [r7, #0]
 80008d4:	4b2b      	ldr	r3, [pc, #172]	; (8000984 <SystemClock_Config+0xf0>)
 80008d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008d8:	4a2a      	ldr	r2, [pc, #168]	; (8000984 <SystemClock_Config+0xf0>)
 80008da:	f043 0301 	orr.w	r3, r3, #1
 80008de:	62d3      	str	r3, [r2, #44]	; 0x2c
 80008e0:	4b28      	ldr	r3, [pc, #160]	; (8000984 <SystemClock_Config+0xf0>)
 80008e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008e4:	f003 0301 	and.w	r3, r3, #1
 80008e8:	603b      	str	r3, [r7, #0]
 80008ea:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008ec:	bf00      	nop
 80008ee:	4b24      	ldr	r3, [pc, #144]	; (8000980 <SystemClock_Config+0xec>)
 80008f0:	699b      	ldr	r3, [r3, #24]
 80008f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80008f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80008fa:	d1f8      	bne.n	80008ee <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008fc:	2301      	movs	r3, #1
 80008fe:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000900:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000904:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000906:	2302      	movs	r3, #2
 8000908:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800090a:	2302      	movs	r3, #2
 800090c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 800090e:	2302      	movs	r3, #2
 8000910:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 240;
 8000912:	23f0      	movs	r3, #240	; 0xf0
 8000914:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000916:	2302      	movs	r3, #2
 8000918:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800091a:	2302      	movs	r3, #2
 800091c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800091e:	2302      	movs	r3, #2
 8000920:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000922:	2308      	movs	r3, #8
 8000924:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000926:	2300      	movs	r3, #0
 8000928:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800092a:	2300      	movs	r3, #0
 800092c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800092e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000932:	4618      	mov	r0, r3
 8000934:	f001 fca0 	bl	8002278 <HAL_RCC_OscConfig>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800093e:	f000 f923 	bl	8000b88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000942:	233f      	movs	r3, #63	; 0x3f
 8000944:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000946:	2303      	movs	r3, #3
 8000948:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800094a:	2300      	movs	r3, #0
 800094c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800094e:	2308      	movs	r3, #8
 8000950:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000952:	2340      	movs	r3, #64	; 0x40
 8000954:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000956:	2340      	movs	r3, #64	; 0x40
 8000958:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800095a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800095e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000960:	2340      	movs	r3, #64	; 0x40
 8000962:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000964:	1d3b      	adds	r3, r7, #4
 8000966:	2104      	movs	r1, #4
 8000968:	4618      	mov	r0, r3
 800096a:	f002 f8b3 	bl	8002ad4 <HAL_RCC_ClockConfig>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000974:	f000 f908 	bl	8000b88 <Error_Handler>
  }
}
 8000978:	bf00      	nop
 800097a:	3770      	adds	r7, #112	; 0x70
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	58024800 	.word	0x58024800
 8000984:	58000400 	.word	0x58000400

08000988 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800098c:	4b1b      	ldr	r3, [pc, #108]	; (80009fc <MX_I2C2_Init+0x74>)
 800098e:	4a1c      	ldr	r2, [pc, #112]	; (8000a00 <MX_I2C2_Init+0x78>)
 8000990:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 8000992:	4b1a      	ldr	r3, [pc, #104]	; (80009fc <MX_I2C2_Init+0x74>)
 8000994:	4a1b      	ldr	r2, [pc, #108]	; (8000a04 <MX_I2C2_Init+0x7c>)
 8000996:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000998:	4b18      	ldr	r3, [pc, #96]	; (80009fc <MX_I2C2_Init+0x74>)
 800099a:	2200      	movs	r2, #0
 800099c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800099e:	4b17      	ldr	r3, [pc, #92]	; (80009fc <MX_I2C2_Init+0x74>)
 80009a0:	2201      	movs	r2, #1
 80009a2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009a4:	4b15      	ldr	r3, [pc, #84]	; (80009fc <MX_I2C2_Init+0x74>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80009aa:	4b14      	ldr	r3, [pc, #80]	; (80009fc <MX_I2C2_Init+0x74>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009b0:	4b12      	ldr	r3, [pc, #72]	; (80009fc <MX_I2C2_Init+0x74>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009b6:	4b11      	ldr	r3, [pc, #68]	; (80009fc <MX_I2C2_Init+0x74>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009bc:	4b0f      	ldr	r3, [pc, #60]	; (80009fc <MX_I2C2_Init+0x74>)
 80009be:	2200      	movs	r2, #0
 80009c0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80009c2:	480e      	ldr	r0, [pc, #56]	; (80009fc <MX_I2C2_Init+0x74>)
 80009c4:	f000 fe74 	bl	80016b0 <HAL_I2C_Init>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80009ce:	f000 f8db 	bl	8000b88 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009d2:	2100      	movs	r1, #0
 80009d4:	4809      	ldr	r0, [pc, #36]	; (80009fc <MX_I2C2_Init+0x74>)
 80009d6:	f001 fb5d 	bl	8002094 <HAL_I2CEx_ConfigAnalogFilter>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80009e0:	f000 f8d2 	bl	8000b88 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80009e4:	2100      	movs	r1, #0
 80009e6:	4805      	ldr	r0, [pc, #20]	; (80009fc <MX_I2C2_Init+0x74>)
 80009e8:	f001 fb9f 	bl	800212a <HAL_I2CEx_ConfigDigitalFilter>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80009f2:	f000 f8c9 	bl	8000b88 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80009f6:	bf00      	nop
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	24000090 	.word	0x24000090
 8000a00:	40005800 	.word	0x40005800
 8000a04:	307075b1 	.word	0x307075b1

08000a08 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a0c:	4b22      	ldr	r3, [pc, #136]	; (8000a98 <MX_USART3_UART_Init+0x90>)
 8000a0e:	4a23      	ldr	r2, [pc, #140]	; (8000a9c <MX_USART3_UART_Init+0x94>)
 8000a10:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a12:	4b21      	ldr	r3, [pc, #132]	; (8000a98 <MX_USART3_UART_Init+0x90>)
 8000a14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a18:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a1a:	4b1f      	ldr	r3, [pc, #124]	; (8000a98 <MX_USART3_UART_Init+0x90>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a20:	4b1d      	ldr	r3, [pc, #116]	; (8000a98 <MX_USART3_UART_Init+0x90>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a26:	4b1c      	ldr	r3, [pc, #112]	; (8000a98 <MX_USART3_UART_Init+0x90>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a2c:	4b1a      	ldr	r3, [pc, #104]	; (8000a98 <MX_USART3_UART_Init+0x90>)
 8000a2e:	220c      	movs	r2, #12
 8000a30:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a32:	4b19      	ldr	r3, [pc, #100]	; (8000a98 <MX_USART3_UART_Init+0x90>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a38:	4b17      	ldr	r3, [pc, #92]	; (8000a98 <MX_USART3_UART_Init+0x90>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a3e:	4b16      	ldr	r3, [pc, #88]	; (8000a98 <MX_USART3_UART_Init+0x90>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a44:	4b14      	ldr	r3, [pc, #80]	; (8000a98 <MX_USART3_UART_Init+0x90>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a4a:	4b13      	ldr	r3, [pc, #76]	; (8000a98 <MX_USART3_UART_Init+0x90>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a50:	4811      	ldr	r0, [pc, #68]	; (8000a98 <MX_USART3_UART_Init+0x90>)
 8000a52:	f003 ff33 	bl	80048bc <HAL_UART_Init>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000a5c:	f000 f894 	bl	8000b88 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a60:	2100      	movs	r1, #0
 8000a62:	480d      	ldr	r0, [pc, #52]	; (8000a98 <MX_USART3_UART_Init+0x90>)
 8000a64:	f004 ff66 	bl	8005934 <HAL_UARTEx_SetTxFifoThreshold>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000a6e:	f000 f88b 	bl	8000b88 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a72:	2100      	movs	r1, #0
 8000a74:	4808      	ldr	r0, [pc, #32]	; (8000a98 <MX_USART3_UART_Init+0x90>)
 8000a76:	f004 ff9b 	bl	80059b0 <HAL_UARTEx_SetRxFifoThreshold>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000a80:	f000 f882 	bl	8000b88 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000a84:	4804      	ldr	r0, [pc, #16]	; (8000a98 <MX_USART3_UART_Init+0x90>)
 8000a86:	f004 ff1c 	bl	80058c2 <HAL_UARTEx_DisableFifoMode>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000a90:	f000 f87a 	bl	8000b88 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a94:	bf00      	nop
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	240000dc 	.word	0x240000dc
 8000a9c:	40004800 	.word	0x40004800

08000aa0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b08a      	sub	sp, #40	; 0x28
 8000aa4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa6:	f107 0314 	add.w	r3, r7, #20
 8000aaa:	2200      	movs	r2, #0
 8000aac:	601a      	str	r2, [r3, #0]
 8000aae:	605a      	str	r2, [r3, #4]
 8000ab0:	609a      	str	r2, [r3, #8]
 8000ab2:	60da      	str	r2, [r3, #12]
 8000ab4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ab6:	4b31      	ldr	r3, [pc, #196]	; (8000b7c <MX_GPIO_Init+0xdc>)
 8000ab8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000abc:	4a2f      	ldr	r2, [pc, #188]	; (8000b7c <MX_GPIO_Init+0xdc>)
 8000abe:	f043 0304 	orr.w	r3, r3, #4
 8000ac2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ac6:	4b2d      	ldr	r3, [pc, #180]	; (8000b7c <MX_GPIO_Init+0xdc>)
 8000ac8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000acc:	f003 0304 	and.w	r3, r3, #4
 8000ad0:	613b      	str	r3, [r7, #16]
 8000ad2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ad4:	4b29      	ldr	r3, [pc, #164]	; (8000b7c <MX_GPIO_Init+0xdc>)
 8000ad6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ada:	4a28      	ldr	r2, [pc, #160]	; (8000b7c <MX_GPIO_Init+0xdc>)
 8000adc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ae0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ae4:	4b25      	ldr	r3, [pc, #148]	; (8000b7c <MX_GPIO_Init+0xdc>)
 8000ae6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000aee:	60fb      	str	r3, [r7, #12]
 8000af0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000af2:	4b22      	ldr	r3, [pc, #136]	; (8000b7c <MX_GPIO_Init+0xdc>)
 8000af4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000af8:	4a20      	ldr	r2, [pc, #128]	; (8000b7c <MX_GPIO_Init+0xdc>)
 8000afa:	f043 0302 	orr.w	r3, r3, #2
 8000afe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b02:	4b1e      	ldr	r3, [pc, #120]	; (8000b7c <MX_GPIO_Init+0xdc>)
 8000b04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b08:	f003 0302 	and.w	r3, r3, #2
 8000b0c:	60bb      	str	r3, [r7, #8]
 8000b0e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b10:	4b1a      	ldr	r3, [pc, #104]	; (8000b7c <MX_GPIO_Init+0xdc>)
 8000b12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b16:	4a19      	ldr	r2, [pc, #100]	; (8000b7c <MX_GPIO_Init+0xdc>)
 8000b18:	f043 0308 	orr.w	r3, r3, #8
 8000b1c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b20:	4b16      	ldr	r3, [pc, #88]	; (8000b7c <MX_GPIO_Init+0xdc>)
 8000b22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b26:	f003 0308 	and.w	r3, r3, #8
 8000b2a:	607b      	str	r3, [r7, #4]
 8000b2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000b2e:	2200      	movs	r2, #0
 8000b30:	f244 0101 	movw	r1, #16385	; 0x4001
 8000b34:	4812      	ldr	r0, [pc, #72]	; (8000b80 <MX_GPIO_Init+0xe0>)
 8000b36:	f000 fd73 	bl	8001620 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b3a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b40:	2300      	movs	r3, #0
 8000b42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b44:	2300      	movs	r3, #0
 8000b46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b48:	f107 0314 	add.w	r3, r7, #20
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	480d      	ldr	r0, [pc, #52]	; (8000b84 <MX_GPIO_Init+0xe4>)
 8000b50:	f000 fbb6 	bl	80012c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000b54:	f244 0301 	movw	r3, #16385	; 0x4001
 8000b58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b62:	2300      	movs	r3, #0
 8000b64:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b66:	f107 0314 	add.w	r3, r7, #20
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	4804      	ldr	r0, [pc, #16]	; (8000b80 <MX_GPIO_Init+0xe0>)
 8000b6e:	f000 fba7 	bl	80012c0 <HAL_GPIO_Init>

}
 8000b72:	bf00      	nop
 8000b74:	3728      	adds	r7, #40	; 0x28
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	58024400 	.word	0x58024400
 8000b80:	58020400 	.word	0x58020400
 8000b84:	58020800 	.word	0x58020800

08000b88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b8c:	b672      	cpsid	i
}
 8000b8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b90:	e7fe      	b.n	8000b90 <Error_Handler+0x8>
	...

08000b94 <__io_putchar>:
/**
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE {
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  /* write a character to the USART3 and Loop until the end of transmission*/
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000b9c:	1d39      	adds	r1, r7, #4
 8000b9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	4803      	ldr	r0, [pc, #12]	; (8000bb4 <__io_putchar+0x20>)
 8000ba6:	f003 fed9 	bl	800495c <HAL_UART_Transmit>
  return ch;
 8000baa:	687b      	ldr	r3, [r7, #4]
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	3708      	adds	r7, #8
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	240000dc 	.word	0x240000dc

08000bb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bbe:	4b0a      	ldr	r3, [pc, #40]	; (8000be8 <HAL_MspInit+0x30>)
 8000bc0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000bc4:	4a08      	ldr	r2, [pc, #32]	; (8000be8 <HAL_MspInit+0x30>)
 8000bc6:	f043 0302 	orr.w	r3, r3, #2
 8000bca:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000bce:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <HAL_MspInit+0x30>)
 8000bd0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000bd4:	f003 0302 	and.w	r3, r3, #2
 8000bd8:	607b      	str	r3, [r7, #4]
 8000bda:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bdc:	bf00      	nop
 8000bde:	370c      	adds	r7, #12
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr
 8000be8:	58024400 	.word	0x58024400

08000bec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b0b8      	sub	sp, #224	; 0xe0
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]
 8000bfc:	605a      	str	r2, [r3, #4]
 8000bfe:	609a      	str	r2, [r3, #8]
 8000c00:	60da      	str	r2, [r3, #12]
 8000c02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c04:	f107 0310 	add.w	r3, r7, #16
 8000c08:	22bc      	movs	r2, #188	; 0xbc
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f004 ff85 	bl	8005b1c <memset>
  if(hi2c->Instance==I2C2)
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4a25      	ldr	r2, [pc, #148]	; (8000cac <HAL_I2C_MspInit+0xc0>)
 8000c18:	4293      	cmp	r3, r2
 8000c1a:	d142      	bne.n	8000ca2 <HAL_I2C_MspInit+0xb6>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000c1c:	2308      	movs	r3, #8
 8000c1e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000c20:	2300      	movs	r3, #0
 8000c22:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c26:	f107 0310 	add.w	r3, r7, #16
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f002 fade 	bl	80031ec <HAL_RCCEx_PeriphCLKConfig>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000c36:	f7ff ffa7 	bl	8000b88 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c3a:	4b1d      	ldr	r3, [pc, #116]	; (8000cb0 <HAL_I2C_MspInit+0xc4>)
 8000c3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c40:	4a1b      	ldr	r2, [pc, #108]	; (8000cb0 <HAL_I2C_MspInit+0xc4>)
 8000c42:	f043 0302 	orr.w	r3, r3, #2
 8000c46:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c4a:	4b19      	ldr	r3, [pc, #100]	; (8000cb0 <HAL_I2C_MspInit+0xc4>)
 8000c4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c50:	f003 0302 	and.w	r3, r3, #2
 8000c54:	60fb      	str	r3, [r7, #12]
 8000c56:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000c58:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000c5c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c60:	2312      	movs	r3, #18
 8000c62:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000c72:	2304      	movs	r3, #4
 8000c74:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c78:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	480d      	ldr	r0, [pc, #52]	; (8000cb4 <HAL_I2C_MspInit+0xc8>)
 8000c80:	f000 fb1e 	bl	80012c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000c84:	4b0a      	ldr	r3, [pc, #40]	; (8000cb0 <HAL_I2C_MspInit+0xc4>)
 8000c86:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c8a:	4a09      	ldr	r2, [pc, #36]	; (8000cb0 <HAL_I2C_MspInit+0xc4>)
 8000c8c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c90:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c94:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <HAL_I2C_MspInit+0xc4>)
 8000c96:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c9e:	60bb      	str	r3, [r7, #8]
 8000ca0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000ca2:	bf00      	nop
 8000ca4:	37e0      	adds	r7, #224	; 0xe0
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	40005800 	.word	0x40005800
 8000cb0:	58024400 	.word	0x58024400
 8000cb4:	58020400 	.word	0x58020400

08000cb8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b0b8      	sub	sp, #224	; 0xe0
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	601a      	str	r2, [r3, #0]
 8000cc8:	605a      	str	r2, [r3, #4]
 8000cca:	609a      	str	r2, [r3, #8]
 8000ccc:	60da      	str	r2, [r3, #12]
 8000cce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cd0:	f107 0310 	add.w	r3, r7, #16
 8000cd4:	22bc      	movs	r2, #188	; 0xbc
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f004 ff1f 	bl	8005b1c <memset>
  if(huart->Instance==USART3)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4a25      	ldr	r2, [pc, #148]	; (8000d78 <HAL_UART_MspInit+0xc0>)
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	d142      	bne.n	8000d6e <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ce8:	2302      	movs	r3, #2
 8000cea:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000cec:	2300      	movs	r3, #0
 8000cee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cf2:	f107 0310 	add.w	r3, r7, #16
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f002 fa78 	bl	80031ec <HAL_RCCEx_PeriphCLKConfig>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000d02:	f7ff ff41 	bl	8000b88 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d06:	4b1d      	ldr	r3, [pc, #116]	; (8000d7c <HAL_UART_MspInit+0xc4>)
 8000d08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d0c:	4a1b      	ldr	r2, [pc, #108]	; (8000d7c <HAL_UART_MspInit+0xc4>)
 8000d0e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d12:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000d16:	4b19      	ldr	r3, [pc, #100]	; (8000d7c <HAL_UART_MspInit+0xc4>)
 8000d18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d20:	60fb      	str	r3, [r7, #12]
 8000d22:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d24:	4b15      	ldr	r3, [pc, #84]	; (8000d7c <HAL_UART_MspInit+0xc4>)
 8000d26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d2a:	4a14      	ldr	r2, [pc, #80]	; (8000d7c <HAL_UART_MspInit+0xc4>)
 8000d2c:	f043 0308 	orr.w	r3, r3, #8
 8000d30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d34:	4b11      	ldr	r3, [pc, #68]	; (8000d7c <HAL_UART_MspInit+0xc4>)
 8000d36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d3a:	f003 0308 	and.w	r3, r3, #8
 8000d3e:	60bb      	str	r3, [r7, #8]
 8000d40:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d42:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d46:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d50:	2300      	movs	r3, #0
 8000d52:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d56:	2300      	movs	r3, #0
 8000d58:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d5c:	2307      	movs	r3, #7
 8000d5e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d62:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000d66:	4619      	mov	r1, r3
 8000d68:	4805      	ldr	r0, [pc, #20]	; (8000d80 <HAL_UART_MspInit+0xc8>)
 8000d6a:	f000 faa9 	bl	80012c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d6e:	bf00      	nop
 8000d70:	37e0      	adds	r7, #224	; 0xe0
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	40004800 	.word	0x40004800
 8000d7c:	58024400 	.word	0x58024400
 8000d80:	58020c00 	.word	0x58020c00

08000d84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d88:	e7fe      	b.n	8000d88 <NMI_Handler+0x4>

08000d8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d8e:	e7fe      	b.n	8000d8e <HardFault_Handler+0x4>

08000d90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d94:	e7fe      	b.n	8000d94 <MemManage_Handler+0x4>

08000d96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d96:	b480      	push	{r7}
 8000d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d9a:	e7fe      	b.n	8000d9a <BusFault_Handler+0x4>

08000d9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000da0:	e7fe      	b.n	8000da0 <UsageFault_Handler+0x4>

08000da2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000da2:	b480      	push	{r7}
 8000da4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000da6:	bf00      	nop
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr

08000db0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000db4:	bf00      	nop
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr

08000dbe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dbe:	b480      	push	{r7}
 8000dc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr

08000dcc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dd0:	f000 f942 	bl	8001058 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dd4:	bf00      	nop
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b086      	sub	sp, #24
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	60f8      	str	r0, [r7, #12]
 8000de0:	60b9      	str	r1, [r7, #8]
 8000de2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000de4:	2300      	movs	r3, #0
 8000de6:	617b      	str	r3, [r7, #20]
 8000de8:	e00a      	b.n	8000e00 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000dea:	f3af 8000 	nop.w
 8000dee:	4601      	mov	r1, r0
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	1c5a      	adds	r2, r3, #1
 8000df4:	60ba      	str	r2, [r7, #8]
 8000df6:	b2ca      	uxtb	r2, r1
 8000df8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	3301      	adds	r3, #1
 8000dfe:	617b      	str	r3, [r7, #20]
 8000e00:	697a      	ldr	r2, [r7, #20]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	429a      	cmp	r2, r3
 8000e06:	dbf0      	blt.n	8000dea <_read+0x12>
	}

return len;
 8000e08:	687b      	ldr	r3, [r7, #4]
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3718      	adds	r7, #24
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}

08000e12 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e12:	b580      	push	{r7, lr}
 8000e14:	b086      	sub	sp, #24
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	60f8      	str	r0, [r7, #12]
 8000e1a:	60b9      	str	r1, [r7, #8]
 8000e1c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e1e:	2300      	movs	r3, #0
 8000e20:	617b      	str	r3, [r7, #20]
 8000e22:	e009      	b.n	8000e38 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	1c5a      	adds	r2, r3, #1
 8000e28:	60ba      	str	r2, [r7, #8]
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f7ff feb1 	bl	8000b94 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	3301      	adds	r3, #1
 8000e36:	617b      	str	r3, [r7, #20]
 8000e38:	697a      	ldr	r2, [r7, #20]
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	dbf1      	blt.n	8000e24 <_write+0x12>
	}
	return len;
 8000e40:	687b      	ldr	r3, [r7, #4]
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3718      	adds	r7, #24
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}

08000e4a <_close>:

int _close(int file)
{
 8000e4a:	b480      	push	{r7}
 8000e4c:	b083      	sub	sp, #12
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	6078      	str	r0, [r7, #4]
	return -1;
 8000e52:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	370c      	adds	r7, #12
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr

08000e62 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e62:	b480      	push	{r7}
 8000e64:	b083      	sub	sp, #12
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	6078      	str	r0, [r7, #4]
 8000e6a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e72:	605a      	str	r2, [r3, #4]
	return 0;
 8000e74:	2300      	movs	r3, #0
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	370c      	adds	r7, #12
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr

08000e82 <_isatty>:

int _isatty(int file)
{
 8000e82:	b480      	push	{r7}
 8000e84:	b083      	sub	sp, #12
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	6078      	str	r0, [r7, #4]
	return 1;
 8000e8a:	2301      	movs	r3, #1
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	370c      	adds	r7, #12
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr

08000e98 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b085      	sub	sp, #20
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	60f8      	str	r0, [r7, #12]
 8000ea0:	60b9      	str	r1, [r7, #8]
 8000ea2:	607a      	str	r2, [r7, #4]
	return 0;
 8000ea4:	2300      	movs	r3, #0
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3714      	adds	r7, #20
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
	...

08000eb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b086      	sub	sp, #24
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ebc:	4a14      	ldr	r2, [pc, #80]	; (8000f10 <_sbrk+0x5c>)
 8000ebe:	4b15      	ldr	r3, [pc, #84]	; (8000f14 <_sbrk+0x60>)
 8000ec0:	1ad3      	subs	r3, r2, r3
 8000ec2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ec8:	4b13      	ldr	r3, [pc, #76]	; (8000f18 <_sbrk+0x64>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d102      	bne.n	8000ed6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ed0:	4b11      	ldr	r3, [pc, #68]	; (8000f18 <_sbrk+0x64>)
 8000ed2:	4a12      	ldr	r2, [pc, #72]	; (8000f1c <_sbrk+0x68>)
 8000ed4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ed6:	4b10      	ldr	r3, [pc, #64]	; (8000f18 <_sbrk+0x64>)
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4413      	add	r3, r2
 8000ede:	693a      	ldr	r2, [r7, #16]
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	d207      	bcs.n	8000ef4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ee4:	f004 fdf0 	bl	8005ac8 <__errno>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	220c      	movs	r2, #12
 8000eec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eee:	f04f 33ff 	mov.w	r3, #4294967295
 8000ef2:	e009      	b.n	8000f08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ef4:	4b08      	ldr	r3, [pc, #32]	; (8000f18 <_sbrk+0x64>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000efa:	4b07      	ldr	r3, [pc, #28]	; (8000f18 <_sbrk+0x64>)
 8000efc:	681a      	ldr	r2, [r3, #0]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4413      	add	r3, r2
 8000f02:	4a05      	ldr	r2, [pc, #20]	; (8000f18 <_sbrk+0x64>)
 8000f04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f06:	68fb      	ldr	r3, [r7, #12]
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	3718      	adds	r7, #24
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	24080000 	.word	0x24080000
 8000f14:	00000400 	.word	0x00000400
 8000f18:	2400016c 	.word	0x2400016c
 8000f1c:	24000188 	.word	0x24000188

08000f20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000f20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f58 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f24:	f7ff fbae 	bl	8000684 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f28:	480c      	ldr	r0, [pc, #48]	; (8000f5c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f2a:	490d      	ldr	r1, [pc, #52]	; (8000f60 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f2c:	4a0d      	ldr	r2, [pc, #52]	; (8000f64 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f30:	e002      	b.n	8000f38 <LoopCopyDataInit>

08000f32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f36:	3304      	adds	r3, #4

08000f38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f3c:	d3f9      	bcc.n	8000f32 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f3e:	4a0a      	ldr	r2, [pc, #40]	; (8000f68 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f40:	4c0a      	ldr	r4, [pc, #40]	; (8000f6c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f44:	e001      	b.n	8000f4a <LoopFillZerobss>

08000f46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f48:	3204      	adds	r2, #4

08000f4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f4c:	d3fb      	bcc.n	8000f46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f4e:	f004 fdc1 	bl	8005ad4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f52:	f7ff fc2d 	bl	80007b0 <main>
  bx  lr
 8000f56:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f58:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000f5c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000f60:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 8000f64:	08006b48 	.word	0x08006b48
  ldr r2, =_sbss
 8000f68:	24000074 	.word	0x24000074
  ldr r4, =_ebss
 8000f6c:	24000184 	.word	0x24000184

08000f70 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f70:	e7fe      	b.n	8000f70 <ADC3_IRQHandler>
	...

08000f74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f7a:	2003      	movs	r0, #3
 8000f7c:	f000 f96e 	bl	800125c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000f80:	f001 ff5e 	bl	8002e40 <HAL_RCC_GetSysClockFreq>
 8000f84:	4602      	mov	r2, r0
 8000f86:	4b15      	ldr	r3, [pc, #84]	; (8000fdc <HAL_Init+0x68>)
 8000f88:	699b      	ldr	r3, [r3, #24]
 8000f8a:	0a1b      	lsrs	r3, r3, #8
 8000f8c:	f003 030f 	and.w	r3, r3, #15
 8000f90:	4913      	ldr	r1, [pc, #76]	; (8000fe0 <HAL_Init+0x6c>)
 8000f92:	5ccb      	ldrb	r3, [r1, r3]
 8000f94:	f003 031f 	and.w	r3, r3, #31
 8000f98:	fa22 f303 	lsr.w	r3, r2, r3
 8000f9c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000f9e:	4b0f      	ldr	r3, [pc, #60]	; (8000fdc <HAL_Init+0x68>)
 8000fa0:	699b      	ldr	r3, [r3, #24]
 8000fa2:	f003 030f 	and.w	r3, r3, #15
 8000fa6:	4a0e      	ldr	r2, [pc, #56]	; (8000fe0 <HAL_Init+0x6c>)
 8000fa8:	5cd3      	ldrb	r3, [r2, r3]
 8000faa:	f003 031f 	and.w	r3, r3, #31
 8000fae:	687a      	ldr	r2, [r7, #4]
 8000fb0:	fa22 f303 	lsr.w	r3, r2, r3
 8000fb4:	4a0b      	ldr	r2, [pc, #44]	; (8000fe4 <HAL_Init+0x70>)
 8000fb6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000fb8:	4a0b      	ldr	r2, [pc, #44]	; (8000fe8 <HAL_Init+0x74>)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fbe:	200f      	movs	r0, #15
 8000fc0:	f000 f814 	bl	8000fec <HAL_InitTick>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e002      	b.n	8000fd4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000fce:	f7ff fdf3 	bl	8000bb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fd2:	2300      	movs	r3, #0
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	3708      	adds	r7, #8
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	58024400 	.word	0x58024400
 8000fe0:	08006a68 	.word	0x08006a68
 8000fe4:	24000004 	.word	0x24000004
 8000fe8:	24000000 	.word	0x24000000

08000fec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000ff4:	4b15      	ldr	r3, [pc, #84]	; (800104c <HAL_InitTick+0x60>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d101      	bne.n	8001000 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	e021      	b.n	8001044 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001000:	4b13      	ldr	r3, [pc, #76]	; (8001050 <HAL_InitTick+0x64>)
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	4b11      	ldr	r3, [pc, #68]	; (800104c <HAL_InitTick+0x60>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	4619      	mov	r1, r3
 800100a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800100e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001012:	fbb2 f3f3 	udiv	r3, r2, r3
 8001016:	4618      	mov	r0, r3
 8001018:	f000 f945 	bl	80012a6 <HAL_SYSTICK_Config>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	e00e      	b.n	8001044 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2b0f      	cmp	r3, #15
 800102a:	d80a      	bhi.n	8001042 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800102c:	2200      	movs	r2, #0
 800102e:	6879      	ldr	r1, [r7, #4]
 8001030:	f04f 30ff 	mov.w	r0, #4294967295
 8001034:	f000 f91d 	bl	8001272 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001038:	4a06      	ldr	r2, [pc, #24]	; (8001054 <HAL_InitTick+0x68>)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800103e:	2300      	movs	r3, #0
 8001040:	e000      	b.n	8001044 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001042:	2301      	movs	r3, #1
}
 8001044:	4618      	mov	r0, r3
 8001046:	3708      	adds	r7, #8
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	2400000c 	.word	0x2400000c
 8001050:	24000000 	.word	0x24000000
 8001054:	24000008 	.word	0x24000008

08001058 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800105c:	4b06      	ldr	r3, [pc, #24]	; (8001078 <HAL_IncTick+0x20>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	461a      	mov	r2, r3
 8001062:	4b06      	ldr	r3, [pc, #24]	; (800107c <HAL_IncTick+0x24>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4413      	add	r3, r2
 8001068:	4a04      	ldr	r2, [pc, #16]	; (800107c <HAL_IncTick+0x24>)
 800106a:	6013      	str	r3, [r2, #0]
}
 800106c:	bf00      	nop
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	2400000c 	.word	0x2400000c
 800107c:	24000170 	.word	0x24000170

08001080 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  return uwTick;
 8001084:	4b03      	ldr	r3, [pc, #12]	; (8001094 <HAL_GetTick+0x14>)
 8001086:	681b      	ldr	r3, [r3, #0]
}
 8001088:	4618      	mov	r0, r3
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	24000170 	.word	0x24000170

08001098 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010a0:	f7ff ffee 	bl	8001080 <HAL_GetTick>
 80010a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010b0:	d005      	beq.n	80010be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010b2:	4b0a      	ldr	r3, [pc, #40]	; (80010dc <HAL_Delay+0x44>)
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	461a      	mov	r2, r3
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	4413      	add	r3, r2
 80010bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010be:	bf00      	nop
 80010c0:	f7ff ffde 	bl	8001080 <HAL_GetTick>
 80010c4:	4602      	mov	r2, r0
 80010c6:	68bb      	ldr	r3, [r7, #8]
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	68fa      	ldr	r2, [r7, #12]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d8f7      	bhi.n	80010c0 <HAL_Delay+0x28>
  {
  }
}
 80010d0:	bf00      	nop
 80010d2:	bf00      	nop
 80010d4:	3710      	adds	r7, #16
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	2400000c 	.word	0x2400000c

080010e0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80010e4:	4b03      	ldr	r3, [pc, #12]	; (80010f4 <HAL_GetREVID+0x14>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	0c1b      	lsrs	r3, r3, #16
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr
 80010f4:	5c001000 	.word	0x5c001000

080010f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b085      	sub	sp, #20
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	f003 0307 	and.w	r3, r3, #7
 8001106:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001108:	4b0b      	ldr	r3, [pc, #44]	; (8001138 <__NVIC_SetPriorityGrouping+0x40>)
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800110e:	68ba      	ldr	r2, [r7, #8]
 8001110:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001114:	4013      	ands	r3, r2
 8001116:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001120:	4b06      	ldr	r3, [pc, #24]	; (800113c <__NVIC_SetPriorityGrouping+0x44>)
 8001122:	4313      	orrs	r3, r2
 8001124:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001126:	4a04      	ldr	r2, [pc, #16]	; (8001138 <__NVIC_SetPriorityGrouping+0x40>)
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	60d3      	str	r3, [r2, #12]
}
 800112c:	bf00      	nop
 800112e:	3714      	adds	r7, #20
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr
 8001138:	e000ed00 	.word	0xe000ed00
 800113c:	05fa0000 	.word	0x05fa0000

08001140 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001144:	4b04      	ldr	r3, [pc, #16]	; (8001158 <__NVIC_GetPriorityGrouping+0x18>)
 8001146:	68db      	ldr	r3, [r3, #12]
 8001148:	0a1b      	lsrs	r3, r3, #8
 800114a:	f003 0307 	and.w	r3, r3, #7
}
 800114e:	4618      	mov	r0, r3
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr
 8001158:	e000ed00 	.word	0xe000ed00

0800115c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	4603      	mov	r3, r0
 8001164:	6039      	str	r1, [r7, #0]
 8001166:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001168:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800116c:	2b00      	cmp	r3, #0
 800116e:	db0a      	blt.n	8001186 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	b2da      	uxtb	r2, r3
 8001174:	490c      	ldr	r1, [pc, #48]	; (80011a8 <__NVIC_SetPriority+0x4c>)
 8001176:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800117a:	0112      	lsls	r2, r2, #4
 800117c:	b2d2      	uxtb	r2, r2
 800117e:	440b      	add	r3, r1
 8001180:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001184:	e00a      	b.n	800119c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	b2da      	uxtb	r2, r3
 800118a:	4908      	ldr	r1, [pc, #32]	; (80011ac <__NVIC_SetPriority+0x50>)
 800118c:	88fb      	ldrh	r3, [r7, #6]
 800118e:	f003 030f 	and.w	r3, r3, #15
 8001192:	3b04      	subs	r3, #4
 8001194:	0112      	lsls	r2, r2, #4
 8001196:	b2d2      	uxtb	r2, r2
 8001198:	440b      	add	r3, r1
 800119a:	761a      	strb	r2, [r3, #24]
}
 800119c:	bf00      	nop
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr
 80011a8:	e000e100 	.word	0xe000e100
 80011ac:	e000ed00 	.word	0xe000ed00

080011b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b089      	sub	sp, #36	; 0x24
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	60f8      	str	r0, [r7, #12]
 80011b8:	60b9      	str	r1, [r7, #8]
 80011ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	f003 0307 	and.w	r3, r3, #7
 80011c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	f1c3 0307 	rsb	r3, r3, #7
 80011ca:	2b04      	cmp	r3, #4
 80011cc:	bf28      	it	cs
 80011ce:	2304      	movcs	r3, #4
 80011d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	3304      	adds	r3, #4
 80011d6:	2b06      	cmp	r3, #6
 80011d8:	d902      	bls.n	80011e0 <NVIC_EncodePriority+0x30>
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	3b03      	subs	r3, #3
 80011de:	e000      	b.n	80011e2 <NVIC_EncodePriority+0x32>
 80011e0:	2300      	movs	r3, #0
 80011e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e4:	f04f 32ff 	mov.w	r2, #4294967295
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	fa02 f303 	lsl.w	r3, r2, r3
 80011ee:	43da      	mvns	r2, r3
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	401a      	ands	r2, r3
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011f8:	f04f 31ff 	mov.w	r1, #4294967295
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001202:	43d9      	mvns	r1, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001208:	4313      	orrs	r3, r2
         );
}
 800120a:	4618      	mov	r0, r3
 800120c:	3724      	adds	r7, #36	; 0x24
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
	...

08001218 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	3b01      	subs	r3, #1
 8001224:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001228:	d301      	bcc.n	800122e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800122a:	2301      	movs	r3, #1
 800122c:	e00f      	b.n	800124e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800122e:	4a0a      	ldr	r2, [pc, #40]	; (8001258 <SysTick_Config+0x40>)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	3b01      	subs	r3, #1
 8001234:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001236:	210f      	movs	r1, #15
 8001238:	f04f 30ff 	mov.w	r0, #4294967295
 800123c:	f7ff ff8e 	bl	800115c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001240:	4b05      	ldr	r3, [pc, #20]	; (8001258 <SysTick_Config+0x40>)
 8001242:	2200      	movs	r2, #0
 8001244:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001246:	4b04      	ldr	r3, [pc, #16]	; (8001258 <SysTick_Config+0x40>)
 8001248:	2207      	movs	r2, #7
 800124a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800124c:	2300      	movs	r3, #0
}
 800124e:	4618      	mov	r0, r3
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	e000e010 	.word	0xe000e010

0800125c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	f7ff ff47 	bl	80010f8 <__NVIC_SetPriorityGrouping>
}
 800126a:	bf00      	nop
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}

08001272 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001272:	b580      	push	{r7, lr}
 8001274:	b086      	sub	sp, #24
 8001276:	af00      	add	r7, sp, #0
 8001278:	4603      	mov	r3, r0
 800127a:	60b9      	str	r1, [r7, #8]
 800127c:	607a      	str	r2, [r7, #4]
 800127e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001280:	f7ff ff5e 	bl	8001140 <__NVIC_GetPriorityGrouping>
 8001284:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001286:	687a      	ldr	r2, [r7, #4]
 8001288:	68b9      	ldr	r1, [r7, #8]
 800128a:	6978      	ldr	r0, [r7, #20]
 800128c:	f7ff ff90 	bl	80011b0 <NVIC_EncodePriority>
 8001290:	4602      	mov	r2, r0
 8001292:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001296:	4611      	mov	r1, r2
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff ff5f 	bl	800115c <__NVIC_SetPriority>
}
 800129e:	bf00      	nop
 80012a0:	3718      	adds	r7, #24
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012a6:	b580      	push	{r7, lr}
 80012a8:	b082      	sub	sp, #8
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	f7ff ffb2 	bl	8001218 <SysTick_Config>
 80012b4:	4603      	mov	r3, r0
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
	...

080012c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b089      	sub	sp, #36	; 0x24
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80012ca:	2300      	movs	r3, #0
 80012cc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80012ce:	4b89      	ldr	r3, [pc, #548]	; (80014f4 <HAL_GPIO_Init+0x234>)
 80012d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80012d2:	e194      	b.n	80015fe <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	2101      	movs	r1, #1
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	fa01 f303 	lsl.w	r3, r1, r3
 80012e0:	4013      	ands	r3, r2
 80012e2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	f000 8186 	beq.w	80015f8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f003 0303 	and.w	r3, r3, #3
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d005      	beq.n	8001304 <HAL_GPIO_Init+0x44>
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f003 0303 	and.w	r3, r3, #3
 8001300:	2b02      	cmp	r3, #2
 8001302:	d130      	bne.n	8001366 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	005b      	lsls	r3, r3, #1
 800130e:	2203      	movs	r2, #3
 8001310:	fa02 f303 	lsl.w	r3, r2, r3
 8001314:	43db      	mvns	r3, r3
 8001316:	69ba      	ldr	r2, [r7, #24]
 8001318:	4013      	ands	r3, r2
 800131a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	68da      	ldr	r2, [r3, #12]
 8001320:	69fb      	ldr	r3, [r7, #28]
 8001322:	005b      	lsls	r3, r3, #1
 8001324:	fa02 f303 	lsl.w	r3, r2, r3
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	4313      	orrs	r3, r2
 800132c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800133a:	2201      	movs	r2, #1
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	fa02 f303 	lsl.w	r3, r2, r3
 8001342:	43db      	mvns	r3, r3
 8001344:	69ba      	ldr	r2, [r7, #24]
 8001346:	4013      	ands	r3, r2
 8001348:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	091b      	lsrs	r3, r3, #4
 8001350:	f003 0201 	and.w	r2, r3, #1
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	fa02 f303 	lsl.w	r3, r2, r3
 800135a:	69ba      	ldr	r2, [r7, #24]
 800135c:	4313      	orrs	r3, r2
 800135e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	f003 0303 	and.w	r3, r3, #3
 800136e:	2b03      	cmp	r3, #3
 8001370:	d017      	beq.n	80013a2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	68db      	ldr	r3, [r3, #12]
 8001376:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	005b      	lsls	r3, r3, #1
 800137c:	2203      	movs	r2, #3
 800137e:	fa02 f303 	lsl.w	r3, r2, r3
 8001382:	43db      	mvns	r3, r3
 8001384:	69ba      	ldr	r2, [r7, #24]
 8001386:	4013      	ands	r3, r2
 8001388:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	689a      	ldr	r2, [r3, #8]
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	005b      	lsls	r3, r3, #1
 8001392:	fa02 f303 	lsl.w	r3, r2, r3
 8001396:	69ba      	ldr	r2, [r7, #24]
 8001398:	4313      	orrs	r3, r2
 800139a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	69ba      	ldr	r2, [r7, #24]
 80013a0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	f003 0303 	and.w	r3, r3, #3
 80013aa:	2b02      	cmp	r3, #2
 80013ac:	d123      	bne.n	80013f6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	08da      	lsrs	r2, r3, #3
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	3208      	adds	r2, #8
 80013b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	f003 0307 	and.w	r3, r3, #7
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	220f      	movs	r2, #15
 80013c6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ca:	43db      	mvns	r3, r3
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	4013      	ands	r3, r2
 80013d0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	691a      	ldr	r2, [r3, #16]
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	f003 0307 	and.w	r3, r3, #7
 80013dc:	009b      	lsls	r3, r3, #2
 80013de:	fa02 f303 	lsl.w	r3, r2, r3
 80013e2:	69ba      	ldr	r2, [r7, #24]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013e8:	69fb      	ldr	r3, [r7, #28]
 80013ea:	08da      	lsrs	r2, r3, #3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	3208      	adds	r2, #8
 80013f0:	69b9      	ldr	r1, [r7, #24]
 80013f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	005b      	lsls	r3, r3, #1
 8001400:	2203      	movs	r2, #3
 8001402:	fa02 f303 	lsl.w	r3, r2, r3
 8001406:	43db      	mvns	r3, r3
 8001408:	69ba      	ldr	r2, [r7, #24]
 800140a:	4013      	ands	r3, r2
 800140c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	f003 0203 	and.w	r2, r3, #3
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	005b      	lsls	r3, r3, #1
 800141a:	fa02 f303 	lsl.w	r3, r2, r3
 800141e:	69ba      	ldr	r2, [r7, #24]
 8001420:	4313      	orrs	r3, r2
 8001422:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	69ba      	ldr	r2, [r7, #24]
 8001428:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001432:	2b00      	cmp	r3, #0
 8001434:	f000 80e0 	beq.w	80015f8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001438:	4b2f      	ldr	r3, [pc, #188]	; (80014f8 <HAL_GPIO_Init+0x238>)
 800143a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800143e:	4a2e      	ldr	r2, [pc, #184]	; (80014f8 <HAL_GPIO_Init+0x238>)
 8001440:	f043 0302 	orr.w	r3, r3, #2
 8001444:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001448:	4b2b      	ldr	r3, [pc, #172]	; (80014f8 <HAL_GPIO_Init+0x238>)
 800144a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800144e:	f003 0302 	and.w	r3, r3, #2
 8001452:	60fb      	str	r3, [r7, #12]
 8001454:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001456:	4a29      	ldr	r2, [pc, #164]	; (80014fc <HAL_GPIO_Init+0x23c>)
 8001458:	69fb      	ldr	r3, [r7, #28]
 800145a:	089b      	lsrs	r3, r3, #2
 800145c:	3302      	adds	r3, #2
 800145e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001462:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	f003 0303 	and.w	r3, r3, #3
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	220f      	movs	r2, #15
 800146e:	fa02 f303 	lsl.w	r3, r2, r3
 8001472:	43db      	mvns	r3, r3
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	4013      	ands	r3, r2
 8001478:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4a20      	ldr	r2, [pc, #128]	; (8001500 <HAL_GPIO_Init+0x240>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d052      	beq.n	8001528 <HAL_GPIO_Init+0x268>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4a1f      	ldr	r2, [pc, #124]	; (8001504 <HAL_GPIO_Init+0x244>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d031      	beq.n	80014ee <HAL_GPIO_Init+0x22e>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4a1e      	ldr	r2, [pc, #120]	; (8001508 <HAL_GPIO_Init+0x248>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d02b      	beq.n	80014ea <HAL_GPIO_Init+0x22a>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4a1d      	ldr	r2, [pc, #116]	; (800150c <HAL_GPIO_Init+0x24c>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d025      	beq.n	80014e6 <HAL_GPIO_Init+0x226>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4a1c      	ldr	r2, [pc, #112]	; (8001510 <HAL_GPIO_Init+0x250>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d01f      	beq.n	80014e2 <HAL_GPIO_Init+0x222>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4a1b      	ldr	r2, [pc, #108]	; (8001514 <HAL_GPIO_Init+0x254>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d019      	beq.n	80014de <HAL_GPIO_Init+0x21e>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4a1a      	ldr	r2, [pc, #104]	; (8001518 <HAL_GPIO_Init+0x258>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d013      	beq.n	80014da <HAL_GPIO_Init+0x21a>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4a19      	ldr	r2, [pc, #100]	; (800151c <HAL_GPIO_Init+0x25c>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d00d      	beq.n	80014d6 <HAL_GPIO_Init+0x216>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4a18      	ldr	r2, [pc, #96]	; (8001520 <HAL_GPIO_Init+0x260>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d007      	beq.n	80014d2 <HAL_GPIO_Init+0x212>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4a17      	ldr	r2, [pc, #92]	; (8001524 <HAL_GPIO_Init+0x264>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d101      	bne.n	80014ce <HAL_GPIO_Init+0x20e>
 80014ca:	2309      	movs	r3, #9
 80014cc:	e02d      	b.n	800152a <HAL_GPIO_Init+0x26a>
 80014ce:	230a      	movs	r3, #10
 80014d0:	e02b      	b.n	800152a <HAL_GPIO_Init+0x26a>
 80014d2:	2308      	movs	r3, #8
 80014d4:	e029      	b.n	800152a <HAL_GPIO_Init+0x26a>
 80014d6:	2307      	movs	r3, #7
 80014d8:	e027      	b.n	800152a <HAL_GPIO_Init+0x26a>
 80014da:	2306      	movs	r3, #6
 80014dc:	e025      	b.n	800152a <HAL_GPIO_Init+0x26a>
 80014de:	2305      	movs	r3, #5
 80014e0:	e023      	b.n	800152a <HAL_GPIO_Init+0x26a>
 80014e2:	2304      	movs	r3, #4
 80014e4:	e021      	b.n	800152a <HAL_GPIO_Init+0x26a>
 80014e6:	2303      	movs	r3, #3
 80014e8:	e01f      	b.n	800152a <HAL_GPIO_Init+0x26a>
 80014ea:	2302      	movs	r3, #2
 80014ec:	e01d      	b.n	800152a <HAL_GPIO_Init+0x26a>
 80014ee:	2301      	movs	r3, #1
 80014f0:	e01b      	b.n	800152a <HAL_GPIO_Init+0x26a>
 80014f2:	bf00      	nop
 80014f4:	58000080 	.word	0x58000080
 80014f8:	58024400 	.word	0x58024400
 80014fc:	58000400 	.word	0x58000400
 8001500:	58020000 	.word	0x58020000
 8001504:	58020400 	.word	0x58020400
 8001508:	58020800 	.word	0x58020800
 800150c:	58020c00 	.word	0x58020c00
 8001510:	58021000 	.word	0x58021000
 8001514:	58021400 	.word	0x58021400
 8001518:	58021800 	.word	0x58021800
 800151c:	58021c00 	.word	0x58021c00
 8001520:	58022000 	.word	0x58022000
 8001524:	58022400 	.word	0x58022400
 8001528:	2300      	movs	r3, #0
 800152a:	69fa      	ldr	r2, [r7, #28]
 800152c:	f002 0203 	and.w	r2, r2, #3
 8001530:	0092      	lsls	r2, r2, #2
 8001532:	4093      	lsls	r3, r2
 8001534:	69ba      	ldr	r2, [r7, #24]
 8001536:	4313      	orrs	r3, r2
 8001538:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800153a:	4938      	ldr	r1, [pc, #224]	; (800161c <HAL_GPIO_Init+0x35c>)
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	089b      	lsrs	r3, r3, #2
 8001540:	3302      	adds	r3, #2
 8001542:	69ba      	ldr	r2, [r7, #24]
 8001544:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001548:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	43db      	mvns	r3, r3
 8001554:	69ba      	ldr	r2, [r7, #24]
 8001556:	4013      	ands	r3, r2
 8001558:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001562:	2b00      	cmp	r3, #0
 8001564:	d003      	beq.n	800156e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001566:	69ba      	ldr	r2, [r7, #24]
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	4313      	orrs	r3, r2
 800156c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800156e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001572:	69bb      	ldr	r3, [r7, #24]
 8001574:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001576:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	43db      	mvns	r3, r3
 8001582:	69ba      	ldr	r2, [r7, #24]
 8001584:	4013      	ands	r3, r2
 8001586:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001590:	2b00      	cmp	r3, #0
 8001592:	d003      	beq.n	800159c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001594:	69ba      	ldr	r2, [r7, #24]
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	4313      	orrs	r3, r2
 800159a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800159c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015a0:	69bb      	ldr	r3, [r7, #24]
 80015a2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	43db      	mvns	r3, r3
 80015ae:	69ba      	ldr	r2, [r7, #24]
 80015b0:	4013      	ands	r3, r2
 80015b2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d003      	beq.n	80015c8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80015c0:	69ba      	ldr	r2, [r7, #24]
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	4313      	orrs	r3, r2
 80015c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	69ba      	ldr	r2, [r7, #24]
 80015cc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	43db      	mvns	r3, r3
 80015d8:	69ba      	ldr	r2, [r7, #24]
 80015da:	4013      	ands	r3, r2
 80015dc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d003      	beq.n	80015f2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80015ea:	69ba      	ldr	r2, [r7, #24]
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	4313      	orrs	r3, r2
 80015f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	69ba      	ldr	r2, [r7, #24]
 80015f6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	3301      	adds	r3, #1
 80015fc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	fa22 f303 	lsr.w	r3, r2, r3
 8001608:	2b00      	cmp	r3, #0
 800160a:	f47f ae63 	bne.w	80012d4 <HAL_GPIO_Init+0x14>
  }
}
 800160e:	bf00      	nop
 8001610:	bf00      	nop
 8001612:	3724      	adds	r7, #36	; 0x24
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr
 800161c:	58000400 	.word	0x58000400

08001620 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	460b      	mov	r3, r1
 800162a:	807b      	strh	r3, [r7, #2]
 800162c:	4613      	mov	r3, r2
 800162e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001630:	787b      	ldrb	r3, [r7, #1]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d003      	beq.n	800163e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001636:	887a      	ldrh	r2, [r7, #2]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800163c:	e003      	b.n	8001646 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800163e:	887b      	ldrh	r3, [r7, #2]
 8001640:	041a      	lsls	r2, r3, #16
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	619a      	str	r2, [r3, #24]
}
 8001646:	bf00      	nop
 8001648:	370c      	adds	r7, #12
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
	...

08001654 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800165c:	4a08      	ldr	r2, [pc, #32]	; (8001680 <HAL_HSEM_FastTake+0x2c>)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	3320      	adds	r3, #32
 8001662:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001666:	4a07      	ldr	r2, [pc, #28]	; (8001684 <HAL_HSEM_FastTake+0x30>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d101      	bne.n	8001670 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800166c:	2300      	movs	r3, #0
 800166e:	e000      	b.n	8001672 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001670:	2301      	movs	r3, #1
}
 8001672:	4618      	mov	r0, r3
 8001674:	370c      	adds	r7, #12
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	58026400 	.word	0x58026400
 8001684:	80000300 	.word	0x80000300

08001688 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
 8001690:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001692:	4906      	ldr	r1, [pc, #24]	; (80016ac <HAL_HSEM_Release+0x24>)
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80016a0:	bf00      	nop
 80016a2:	370c      	adds	r7, #12
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr
 80016ac:	58026400 	.word	0x58026400

080016b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d101      	bne.n	80016c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e07f      	b.n	80017c2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d106      	bne.n	80016dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2200      	movs	r2, #0
 80016d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f7ff fa88 	bl	8000bec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2224      	movs	r2, #36	; 0x24
 80016e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f022 0201 	bic.w	r2, r2, #1
 80016f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	685a      	ldr	r2, [r3, #4]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001700:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	689a      	ldr	r2, [r3, #8]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001710:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	68db      	ldr	r3, [r3, #12]
 8001716:	2b01      	cmp	r3, #1
 8001718:	d107      	bne.n	800172a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	689a      	ldr	r2, [r3, #8]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001726:	609a      	str	r2, [r3, #8]
 8001728:	e006      	b.n	8001738 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	689a      	ldr	r2, [r3, #8]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001736:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	2b02      	cmp	r3, #2
 800173e:	d104      	bne.n	800174a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001748:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	6859      	ldr	r1, [r3, #4]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	4b1d      	ldr	r3, [pc, #116]	; (80017cc <HAL_I2C_Init+0x11c>)
 8001756:	430b      	orrs	r3, r1
 8001758:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	68da      	ldr	r2, [r3, #12]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001768:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	691a      	ldr	r2, [r3, #16]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	695b      	ldr	r3, [r3, #20]
 8001772:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	699b      	ldr	r3, [r3, #24]
 800177a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	430a      	orrs	r2, r1
 8001782:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	69d9      	ldr	r1, [r3, #28]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6a1a      	ldr	r2, [r3, #32]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	430a      	orrs	r2, r1
 8001792:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f042 0201 	orr.w	r2, r2, #1
 80017a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2200      	movs	r2, #0
 80017a8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2220      	movs	r2, #32
 80017ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2200      	movs	r2, #0
 80017b6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2200      	movs	r2, #0
 80017bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80017c0:	2300      	movs	r3, #0
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	02008000 	.word	0x02008000

080017d0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b088      	sub	sp, #32
 80017d4:	af02      	add	r7, sp, #8
 80017d6:	60f8      	str	r0, [r7, #12]
 80017d8:	607a      	str	r2, [r7, #4]
 80017da:	461a      	mov	r2, r3
 80017dc:	460b      	mov	r3, r1
 80017de:	817b      	strh	r3, [r7, #10]
 80017e0:	4613      	mov	r3, r2
 80017e2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	2b20      	cmp	r3, #32
 80017ee:	f040 80da 	bne.w	80019a6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d101      	bne.n	8001800 <HAL_I2C_Master_Transmit+0x30>
 80017fc:	2302      	movs	r3, #2
 80017fe:	e0d3      	b.n	80019a8 <HAL_I2C_Master_Transmit+0x1d8>
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	2201      	movs	r2, #1
 8001804:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001808:	f7ff fc3a 	bl	8001080 <HAL_GetTick>
 800180c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	9300      	str	r3, [sp, #0]
 8001812:	2319      	movs	r3, #25
 8001814:	2201      	movs	r2, #1
 8001816:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800181a:	68f8      	ldr	r0, [r7, #12]
 800181c:	f000 f9e6 	bl	8001bec <I2C_WaitOnFlagUntilTimeout>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e0be      	b.n	80019a8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	2221      	movs	r2, #33	; 0x21
 800182e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	2210      	movs	r2, #16
 8001836:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	2200      	movs	r2, #0
 800183e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	687a      	ldr	r2, [r7, #4]
 8001844:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	893a      	ldrh	r2, [r7, #8]
 800184a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	2200      	movs	r2, #0
 8001850:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001856:	b29b      	uxth	r3, r3
 8001858:	2bff      	cmp	r3, #255	; 0xff
 800185a:	d90e      	bls.n	800187a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	22ff      	movs	r2, #255	; 0xff
 8001860:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001866:	b2da      	uxtb	r2, r3
 8001868:	8979      	ldrh	r1, [r7, #10]
 800186a:	4b51      	ldr	r3, [pc, #324]	; (80019b0 <HAL_I2C_Master_Transmit+0x1e0>)
 800186c:	9300      	str	r3, [sp, #0]
 800186e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001872:	68f8      	ldr	r0, [r7, #12]
 8001874:	f000 fbdc 	bl	8002030 <I2C_TransferConfig>
 8001878:	e06c      	b.n	8001954 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800187e:	b29a      	uxth	r2, r3
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001888:	b2da      	uxtb	r2, r3
 800188a:	8979      	ldrh	r1, [r7, #10]
 800188c:	4b48      	ldr	r3, [pc, #288]	; (80019b0 <HAL_I2C_Master_Transmit+0x1e0>)
 800188e:	9300      	str	r3, [sp, #0]
 8001890:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001894:	68f8      	ldr	r0, [r7, #12]
 8001896:	f000 fbcb 	bl	8002030 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800189a:	e05b      	b.n	8001954 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800189c:	697a      	ldr	r2, [r7, #20]
 800189e:	6a39      	ldr	r1, [r7, #32]
 80018a0:	68f8      	ldr	r0, [r7, #12]
 80018a2:	f000 f9e3 	bl	8001c6c <I2C_WaitOnTXISFlagUntilTimeout>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d001      	beq.n	80018b0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	e07b      	b.n	80019a8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b4:	781a      	ldrb	r2, [r3, #0]
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c0:	1c5a      	adds	r2, r3, #1
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018ca:	b29b      	uxth	r3, r3
 80018cc:	3b01      	subs	r3, #1
 80018ce:	b29a      	uxth	r2, r3
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018d8:	3b01      	subs	r3, #1
 80018da:	b29a      	uxth	r2, r3
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018e4:	b29b      	uxth	r3, r3
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d034      	beq.n	8001954 <HAL_I2C_Master_Transmit+0x184>
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d130      	bne.n	8001954 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	9300      	str	r3, [sp, #0]
 80018f6:	6a3b      	ldr	r3, [r7, #32]
 80018f8:	2200      	movs	r2, #0
 80018fa:	2180      	movs	r1, #128	; 0x80
 80018fc:	68f8      	ldr	r0, [r7, #12]
 80018fe:	f000 f975 	bl	8001bec <I2C_WaitOnFlagUntilTimeout>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	e04d      	b.n	80019a8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001910:	b29b      	uxth	r3, r3
 8001912:	2bff      	cmp	r3, #255	; 0xff
 8001914:	d90e      	bls.n	8001934 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	22ff      	movs	r2, #255	; 0xff
 800191a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001920:	b2da      	uxtb	r2, r3
 8001922:	8979      	ldrh	r1, [r7, #10]
 8001924:	2300      	movs	r3, #0
 8001926:	9300      	str	r3, [sp, #0]
 8001928:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800192c:	68f8      	ldr	r0, [r7, #12]
 800192e:	f000 fb7f 	bl	8002030 <I2C_TransferConfig>
 8001932:	e00f      	b.n	8001954 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001938:	b29a      	uxth	r2, r3
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001942:	b2da      	uxtb	r2, r3
 8001944:	8979      	ldrh	r1, [r7, #10]
 8001946:	2300      	movs	r3, #0
 8001948:	9300      	str	r3, [sp, #0]
 800194a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800194e:	68f8      	ldr	r0, [r7, #12]
 8001950:	f000 fb6e 	bl	8002030 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001958:	b29b      	uxth	r3, r3
 800195a:	2b00      	cmp	r3, #0
 800195c:	d19e      	bne.n	800189c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800195e:	697a      	ldr	r2, [r7, #20]
 8001960:	6a39      	ldr	r1, [r7, #32]
 8001962:	68f8      	ldr	r0, [r7, #12]
 8001964:	f000 f9c2 	bl	8001cec <I2C_WaitOnSTOPFlagUntilTimeout>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d001      	beq.n	8001972 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e01a      	b.n	80019a8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	2220      	movs	r2, #32
 8001978:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	6859      	ldr	r1, [r3, #4]
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	4b0b      	ldr	r3, [pc, #44]	; (80019b4 <HAL_I2C_Master_Transmit+0x1e4>)
 8001986:	400b      	ands	r3, r1
 8001988:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	2220      	movs	r2, #32
 800198e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	2200      	movs	r2, #0
 8001996:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	2200      	movs	r2, #0
 800199e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80019a2:	2300      	movs	r3, #0
 80019a4:	e000      	b.n	80019a8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80019a6:	2302      	movs	r3, #2
  }
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3718      	adds	r7, #24
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	80002000 	.word	0x80002000
 80019b4:	fe00e800 	.word	0xfe00e800

080019b8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b088      	sub	sp, #32
 80019bc:	af02      	add	r7, sp, #8
 80019be:	60f8      	str	r0, [r7, #12]
 80019c0:	607a      	str	r2, [r7, #4]
 80019c2:	461a      	mov	r2, r3
 80019c4:	460b      	mov	r3, r1
 80019c6:	817b      	strh	r3, [r7, #10]
 80019c8:	4613      	mov	r3, r2
 80019ca:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	2b20      	cmp	r3, #32
 80019d6:	f040 80db 	bne.w	8001b90 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d101      	bne.n	80019e8 <HAL_I2C_Master_Receive+0x30>
 80019e4:	2302      	movs	r3, #2
 80019e6:	e0d4      	b.n	8001b92 <HAL_I2C_Master_Receive+0x1da>
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	2201      	movs	r2, #1
 80019ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80019f0:	f7ff fb46 	bl	8001080 <HAL_GetTick>
 80019f4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	9300      	str	r3, [sp, #0]
 80019fa:	2319      	movs	r3, #25
 80019fc:	2201      	movs	r2, #1
 80019fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a02:	68f8      	ldr	r0, [r7, #12]
 8001a04:	f000 f8f2 	bl	8001bec <I2C_WaitOnFlagUntilTimeout>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e0bf      	b.n	8001b92 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	2222      	movs	r2, #34	; 0x22
 8001a16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	2210      	movs	r2, #16
 8001a1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	2200      	movs	r2, #0
 8001a26:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	687a      	ldr	r2, [r7, #4]
 8001a2c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	893a      	ldrh	r2, [r7, #8]
 8001a32:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	2200      	movs	r2, #0
 8001a38:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a3e:	b29b      	uxth	r3, r3
 8001a40:	2bff      	cmp	r3, #255	; 0xff
 8001a42:	d90e      	bls.n	8001a62 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	22ff      	movs	r2, #255	; 0xff
 8001a48:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a4e:	b2da      	uxtb	r2, r3
 8001a50:	8979      	ldrh	r1, [r7, #10]
 8001a52:	4b52      	ldr	r3, [pc, #328]	; (8001b9c <HAL_I2C_Master_Receive+0x1e4>)
 8001a54:	9300      	str	r3, [sp, #0]
 8001a56:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a5a:	68f8      	ldr	r0, [r7, #12]
 8001a5c:	f000 fae8 	bl	8002030 <I2C_TransferConfig>
 8001a60:	e06d      	b.n	8001b3e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a66:	b29a      	uxth	r2, r3
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a70:	b2da      	uxtb	r2, r3
 8001a72:	8979      	ldrh	r1, [r7, #10]
 8001a74:	4b49      	ldr	r3, [pc, #292]	; (8001b9c <HAL_I2C_Master_Receive+0x1e4>)
 8001a76:	9300      	str	r3, [sp, #0]
 8001a78:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a7c:	68f8      	ldr	r0, [r7, #12]
 8001a7e:	f000 fad7 	bl	8002030 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001a82:	e05c      	b.n	8001b3e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a84:	697a      	ldr	r2, [r7, #20]
 8001a86:	6a39      	ldr	r1, [r7, #32]
 8001a88:	68f8      	ldr	r0, [r7, #12]
 8001a8a:	f000 f96b 	bl	8001d64 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d001      	beq.n	8001a98 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e07c      	b.n	8001b92 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa2:	b2d2      	uxtb	r2, r2
 8001aa4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aaa:	1c5a      	adds	r2, r3, #1
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ab4:	3b01      	subs	r3, #1
 8001ab6:	b29a      	uxth	r2, r3
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ac0:	b29b      	uxth	r3, r3
 8001ac2:	3b01      	subs	r3, #1
 8001ac4:	b29a      	uxth	r2, r3
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ace:	b29b      	uxth	r3, r3
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d034      	beq.n	8001b3e <HAL_I2C_Master_Receive+0x186>
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d130      	bne.n	8001b3e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	9300      	str	r3, [sp, #0]
 8001ae0:	6a3b      	ldr	r3, [r7, #32]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	2180      	movs	r1, #128	; 0x80
 8001ae6:	68f8      	ldr	r0, [r7, #12]
 8001ae8:	f000 f880 	bl	8001bec <I2C_WaitOnFlagUntilTimeout>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e04d      	b.n	8001b92 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001afa:	b29b      	uxth	r3, r3
 8001afc:	2bff      	cmp	r3, #255	; 0xff
 8001afe:	d90e      	bls.n	8001b1e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	22ff      	movs	r2, #255	; 0xff
 8001b04:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b0a:	b2da      	uxtb	r2, r3
 8001b0c:	8979      	ldrh	r1, [r7, #10]
 8001b0e:	2300      	movs	r3, #0
 8001b10:	9300      	str	r3, [sp, #0]
 8001b12:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b16:	68f8      	ldr	r0, [r7, #12]
 8001b18:	f000 fa8a 	bl	8002030 <I2C_TransferConfig>
 8001b1c:	e00f      	b.n	8001b3e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b22:	b29a      	uxth	r2, r3
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b2c:	b2da      	uxtb	r2, r3
 8001b2e:	8979      	ldrh	r1, [r7, #10]
 8001b30:	2300      	movs	r3, #0
 8001b32:	9300      	str	r3, [sp, #0]
 8001b34:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b38:	68f8      	ldr	r0, [r7, #12]
 8001b3a:	f000 fa79 	bl	8002030 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d19d      	bne.n	8001a84 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b48:	697a      	ldr	r2, [r7, #20]
 8001b4a:	6a39      	ldr	r1, [r7, #32]
 8001b4c:	68f8      	ldr	r0, [r7, #12]
 8001b4e:	f000 f8cd 	bl	8001cec <I2C_WaitOnSTOPFlagUntilTimeout>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e01a      	b.n	8001b92 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2220      	movs	r2, #32
 8001b62:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	6859      	ldr	r1, [r3, #4]
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	4b0c      	ldr	r3, [pc, #48]	; (8001ba0 <HAL_I2C_Master_Receive+0x1e8>)
 8001b70:	400b      	ands	r3, r1
 8001b72:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	2220      	movs	r2, #32
 8001b78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	2200      	movs	r2, #0
 8001b88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	e000      	b.n	8001b92 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001b90:	2302      	movs	r3, #2
  }
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3718      	adds	r7, #24
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	80002400 	.word	0x80002400
 8001ba0:	fe00e800 	.word	0xfe00e800

08001ba4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	699b      	ldr	r3, [r3, #24]
 8001bb2:	f003 0302 	and.w	r3, r3, #2
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d103      	bne.n	8001bc2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	699b      	ldr	r3, [r3, #24]
 8001bc8:	f003 0301 	and.w	r3, r3, #1
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d007      	beq.n	8001be0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	699a      	ldr	r2, [r3, #24]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f042 0201 	orr.w	r2, r2, #1
 8001bde:	619a      	str	r2, [r3, #24]
  }
}
 8001be0:	bf00      	nop
 8001be2:	370c      	adds	r7, #12
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr

08001bec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	60f8      	str	r0, [r7, #12]
 8001bf4:	60b9      	str	r1, [r7, #8]
 8001bf6:	603b      	str	r3, [r7, #0]
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001bfc:	e022      	b.n	8001c44 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c04:	d01e      	beq.n	8001c44 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c06:	f7ff fa3b 	bl	8001080 <HAL_GetTick>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	69bb      	ldr	r3, [r7, #24]
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	683a      	ldr	r2, [r7, #0]
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d302      	bcc.n	8001c1c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d113      	bne.n	8001c44 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c20:	f043 0220 	orr.w	r2, r3, #32
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	2220      	movs	r2, #32
 8001c2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	2200      	movs	r2, #0
 8001c34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e00f      	b.n	8001c64 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	699a      	ldr	r2, [r3, #24]
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	68ba      	ldr	r2, [r7, #8]
 8001c50:	429a      	cmp	r2, r3
 8001c52:	bf0c      	ite	eq
 8001c54:	2301      	moveq	r3, #1
 8001c56:	2300      	movne	r3, #0
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	79fb      	ldrb	r3, [r7, #7]
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d0cd      	beq.n	8001bfe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001c62:	2300      	movs	r3, #0
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3710      	adds	r7, #16
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b084      	sub	sp, #16
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	60f8      	str	r0, [r7, #12]
 8001c74:	60b9      	str	r1, [r7, #8]
 8001c76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001c78:	e02c      	b.n	8001cd4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c7a:	687a      	ldr	r2, [r7, #4]
 8001c7c:	68b9      	ldr	r1, [r7, #8]
 8001c7e:	68f8      	ldr	r0, [r7, #12]
 8001c80:	f000 f8ea 	bl	8001e58 <I2C_IsErrorOccurred>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e02a      	b.n	8001ce4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c94:	d01e      	beq.n	8001cd4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c96:	f7ff f9f3 	bl	8001080 <HAL_GetTick>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	68ba      	ldr	r2, [r7, #8]
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	d302      	bcc.n	8001cac <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d113      	bne.n	8001cd4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb0:	f043 0220 	orr.w	r2, r3, #32
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2220      	movs	r2, #32
 8001cbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e007      	b.n	8001ce4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	699b      	ldr	r3, [r3, #24]
 8001cda:	f003 0302 	and.w	r3, r3, #2
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d1cb      	bne.n	8001c7a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001ce2:	2300      	movs	r3, #0
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3710      	adds	r7, #16
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}

08001cec <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	60f8      	str	r0, [r7, #12]
 8001cf4:	60b9      	str	r1, [r7, #8]
 8001cf6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001cf8:	e028      	b.n	8001d4c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	68b9      	ldr	r1, [r7, #8]
 8001cfe:	68f8      	ldr	r0, [r7, #12]
 8001d00:	f000 f8aa 	bl	8001e58 <I2C_IsErrorOccurred>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e026      	b.n	8001d5c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d0e:	f7ff f9b7 	bl	8001080 <HAL_GetTick>
 8001d12:	4602      	mov	r2, r0
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	1ad3      	subs	r3, r2, r3
 8001d18:	68ba      	ldr	r2, [r7, #8]
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d302      	bcc.n	8001d24 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d113      	bne.n	8001d4c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d28:	f043 0220 	orr.w	r2, r3, #32
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	2220      	movs	r2, #32
 8001d34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	2200      	movs	r2, #0
 8001d44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e007      	b.n	8001d5c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	699b      	ldr	r3, [r3, #24]
 8001d52:	f003 0320 	and.w	r3, r3, #32
 8001d56:	2b20      	cmp	r3, #32
 8001d58:	d1cf      	bne.n	8001cfa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001d5a:	2300      	movs	r3, #0
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3710      	adds	r7, #16
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}

08001d64 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b084      	sub	sp, #16
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	60f8      	str	r0, [r7, #12]
 8001d6c:	60b9      	str	r1, [r7, #8]
 8001d6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001d70:	e064      	b.n	8001e3c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	68b9      	ldr	r1, [r7, #8]
 8001d76:	68f8      	ldr	r0, [r7, #12]
 8001d78:	f000 f86e 	bl	8001e58 <I2C_IsErrorOccurred>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e062      	b.n	8001e4c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	699b      	ldr	r3, [r3, #24]
 8001d8c:	f003 0320 	and.w	r3, r3, #32
 8001d90:	2b20      	cmp	r3, #32
 8001d92:	d138      	bne.n	8001e06 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	699b      	ldr	r3, [r3, #24]
 8001d9a:	f003 0304 	and.w	r3, r3, #4
 8001d9e:	2b04      	cmp	r3, #4
 8001da0:	d105      	bne.n	8001dae <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8001daa:	2300      	movs	r3, #0
 8001dac:	e04e      	b.n	8001e4c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	699b      	ldr	r3, [r3, #24]
 8001db4:	f003 0310 	and.w	r3, r3, #16
 8001db8:	2b10      	cmp	r3, #16
 8001dba:	d107      	bne.n	8001dcc <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	2210      	movs	r2, #16
 8001dc2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2204      	movs	r2, #4
 8001dc8:	645a      	str	r2, [r3, #68]	; 0x44
 8001dca:	e002      	b.n	8001dd2 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	2220      	movs	r2, #32
 8001dd8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	6859      	ldr	r1, [r3, #4]
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	4b1b      	ldr	r3, [pc, #108]	; (8001e54 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8001de6:	400b      	ands	r3, r1
 8001de8:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2220      	movs	r2, #32
 8001dee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	2200      	movs	r2, #0
 8001df6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e022      	b.n	8001e4c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e06:	f7ff f93b 	bl	8001080 <HAL_GetTick>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	68ba      	ldr	r2, [r7, #8]
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d302      	bcc.n	8001e1c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d10f      	bne.n	8001e3c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e20:	f043 0220 	orr.w	r2, r3, #32
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	2220      	movs	r2, #32
 8001e2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	2200      	movs	r2, #0
 8001e34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e007      	b.n	8001e4c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	699b      	ldr	r3, [r3, #24]
 8001e42:	f003 0304 	and.w	r3, r3, #4
 8001e46:	2b04      	cmp	r3, #4
 8001e48:	d193      	bne.n	8001d72 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001e4a:	2300      	movs	r3, #0
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3710      	adds	r7, #16
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	fe00e800 	.word	0xfe00e800

08001e58 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b08a      	sub	sp, #40	; 0x28
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	60f8      	str	r0, [r7, #12]
 8001e60:	60b9      	str	r1, [r7, #8]
 8001e62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e64:	2300      	movs	r3, #0
 8001e66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	699b      	ldr	r3, [r3, #24]
 8001e70:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001e72:	2300      	movs	r3, #0
 8001e74:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001e7a:	69bb      	ldr	r3, [r7, #24]
 8001e7c:	f003 0310 	and.w	r3, r3, #16
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d075      	beq.n	8001f70 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	2210      	movs	r2, #16
 8001e8a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001e8c:	e056      	b.n	8001f3c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e94:	d052      	beq.n	8001f3c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001e96:	f7ff f8f3 	bl	8001080 <HAL_GetTick>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	68ba      	ldr	r2, [r7, #8]
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d302      	bcc.n	8001eac <I2C_IsErrorOccurred+0x54>
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d147      	bne.n	8001f3c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eb6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001ebe:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	699b      	ldr	r3, [r3, #24]
 8001ec6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001eca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ece:	d12e      	bne.n	8001f2e <I2C_IsErrorOccurred+0xd6>
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001ed6:	d02a      	beq.n	8001f2e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8001ed8:	7cfb      	ldrb	r3, [r7, #19]
 8001eda:	2b20      	cmp	r3, #32
 8001edc:	d027      	beq.n	8001f2e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	685a      	ldr	r2, [r3, #4]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001eec:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001eee:	f7ff f8c7 	bl	8001080 <HAL_GetTick>
 8001ef2:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ef4:	e01b      	b.n	8001f2e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001ef6:	f7ff f8c3 	bl	8001080 <HAL_GetTick>
 8001efa:	4602      	mov	r2, r0
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	1ad3      	subs	r3, r2, r3
 8001f00:	2b19      	cmp	r3, #25
 8001f02:	d914      	bls.n	8001f2e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f08:	f043 0220 	orr.w	r2, r3, #32
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	2220      	movs	r2, #32
 8001f14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2200      	movs	r2, #0
 8001f24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	699b      	ldr	r3, [r3, #24]
 8001f34:	f003 0320 	and.w	r3, r3, #32
 8001f38:	2b20      	cmp	r3, #32
 8001f3a:	d1dc      	bne.n	8001ef6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	699b      	ldr	r3, [r3, #24]
 8001f42:	f003 0320 	and.w	r3, r3, #32
 8001f46:	2b20      	cmp	r3, #32
 8001f48:	d003      	beq.n	8001f52 <I2C_IsErrorOccurred+0xfa>
 8001f4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d09d      	beq.n	8001e8e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001f52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d103      	bne.n	8001f62 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	2220      	movs	r2, #32
 8001f60:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001f62:	6a3b      	ldr	r3, [r7, #32]
 8001f64:	f043 0304 	orr.w	r3, r3, #4
 8001f68:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	699b      	ldr	r3, [r3, #24]
 8001f76:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d00b      	beq.n	8001f9a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001f82:	6a3b      	ldr	r3, [r7, #32]
 8001f84:	f043 0301 	orr.w	r3, r3, #1
 8001f88:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f92:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001f9a:	69bb      	ldr	r3, [r7, #24]
 8001f9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d00b      	beq.n	8001fbc <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001fa4:	6a3b      	ldr	r3, [r7, #32]
 8001fa6:	f043 0308 	orr.w	r3, r3, #8
 8001faa:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fb4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001fbc:	69bb      	ldr	r3, [r7, #24]
 8001fbe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d00b      	beq.n	8001fde <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001fc6:	6a3b      	ldr	r3, [r7, #32]
 8001fc8:	f043 0302 	orr.w	r3, r3, #2
 8001fcc:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fd6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001fde:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d01c      	beq.n	8002020 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001fe6:	68f8      	ldr	r0, [r7, #12]
 8001fe8:	f7ff fddc 	bl	8001ba4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	6859      	ldr	r1, [r3, #4]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	4b0d      	ldr	r3, [pc, #52]	; (800202c <I2C_IsErrorOccurred+0x1d4>)
 8001ff8:	400b      	ands	r3, r1
 8001ffa:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002000:	6a3b      	ldr	r3, [r7, #32]
 8002002:	431a      	orrs	r2, r3
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	2220      	movs	r2, #32
 800200c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	2200      	movs	r2, #0
 8002014:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2200      	movs	r2, #0
 800201c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002020:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002024:	4618      	mov	r0, r3
 8002026:	3728      	adds	r7, #40	; 0x28
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	fe00e800 	.word	0xfe00e800

08002030 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002030:	b480      	push	{r7}
 8002032:	b087      	sub	sp, #28
 8002034:	af00      	add	r7, sp, #0
 8002036:	60f8      	str	r0, [r7, #12]
 8002038:	607b      	str	r3, [r7, #4]
 800203a:	460b      	mov	r3, r1
 800203c:	817b      	strh	r3, [r7, #10]
 800203e:	4613      	mov	r3, r2
 8002040:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002042:	897b      	ldrh	r3, [r7, #10]
 8002044:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002048:	7a7b      	ldrb	r3, [r7, #9]
 800204a:	041b      	lsls	r3, r3, #16
 800204c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002050:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002056:	6a3b      	ldr	r3, [r7, #32]
 8002058:	4313      	orrs	r3, r2
 800205a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800205e:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	685a      	ldr	r2, [r3, #4]
 8002066:	6a3b      	ldr	r3, [r7, #32]
 8002068:	0d5b      	lsrs	r3, r3, #21
 800206a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800206e:	4b08      	ldr	r3, [pc, #32]	; (8002090 <I2C_TransferConfig+0x60>)
 8002070:	430b      	orrs	r3, r1
 8002072:	43db      	mvns	r3, r3
 8002074:	ea02 0103 	and.w	r1, r2, r3
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	697a      	ldr	r2, [r7, #20]
 800207e:	430a      	orrs	r2, r1
 8002080:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002082:	bf00      	nop
 8002084:	371c      	adds	r7, #28
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	03ff63ff 	.word	0x03ff63ff

08002094 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	2b20      	cmp	r3, #32
 80020a8:	d138      	bne.n	800211c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d101      	bne.n	80020b8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80020b4:	2302      	movs	r3, #2
 80020b6:	e032      	b.n	800211e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2201      	movs	r2, #1
 80020bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2224      	movs	r2, #36	; 0x24
 80020c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f022 0201 	bic.w	r2, r2, #1
 80020d6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80020e6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	6819      	ldr	r1, [r3, #0]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	683a      	ldr	r2, [r7, #0]
 80020f4:	430a      	orrs	r2, r1
 80020f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f042 0201 	orr.w	r2, r2, #1
 8002106:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2220      	movs	r2, #32
 800210c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2200      	movs	r2, #0
 8002114:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002118:	2300      	movs	r3, #0
 800211a:	e000      	b.n	800211e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800211c:	2302      	movs	r3, #2
  }
}
 800211e:	4618      	mov	r0, r3
 8002120:	370c      	adds	r7, #12
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr

0800212a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800212a:	b480      	push	{r7}
 800212c:	b085      	sub	sp, #20
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
 8002132:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800213a:	b2db      	uxtb	r3, r3
 800213c:	2b20      	cmp	r3, #32
 800213e:	d139      	bne.n	80021b4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002146:	2b01      	cmp	r3, #1
 8002148:	d101      	bne.n	800214e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800214a:	2302      	movs	r3, #2
 800214c:	e033      	b.n	80021b6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2201      	movs	r2, #1
 8002152:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2224      	movs	r2, #36	; 0x24
 800215a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f022 0201 	bic.w	r2, r2, #1
 800216c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800217c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	021b      	lsls	r3, r3, #8
 8002182:	68fa      	ldr	r2, [r7, #12]
 8002184:	4313      	orrs	r3, r2
 8002186:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	68fa      	ldr	r2, [r7, #12]
 800218e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f042 0201 	orr.w	r2, r2, #1
 800219e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2220      	movs	r2, #32
 80021a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2200      	movs	r2, #0
 80021ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80021b0:	2300      	movs	r3, #0
 80021b2:	e000      	b.n	80021b6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80021b4:	2302      	movs	r3, #2
  }
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3714      	adds	r7, #20
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
	...

080021c4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80021cc:	4b29      	ldr	r3, [pc, #164]	; (8002274 <HAL_PWREx_ConfigSupply+0xb0>)
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	f003 0307 	and.w	r3, r3, #7
 80021d4:	2b06      	cmp	r3, #6
 80021d6:	d00a      	beq.n	80021ee <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80021d8:	4b26      	ldr	r3, [pc, #152]	; (8002274 <HAL_PWREx_ConfigSupply+0xb0>)
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d001      	beq.n	80021ea <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e040      	b.n	800226c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80021ea:	2300      	movs	r3, #0
 80021ec:	e03e      	b.n	800226c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80021ee:	4b21      	ldr	r3, [pc, #132]	; (8002274 <HAL_PWREx_ConfigSupply+0xb0>)
 80021f0:	68db      	ldr	r3, [r3, #12]
 80021f2:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80021f6:	491f      	ldr	r1, [pc, #124]	; (8002274 <HAL_PWREx_ConfigSupply+0xb0>)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80021fe:	f7fe ff3f 	bl	8001080 <HAL_GetTick>
 8002202:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002204:	e009      	b.n	800221a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002206:	f7fe ff3b 	bl	8001080 <HAL_GetTick>
 800220a:	4602      	mov	r2, r0
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002214:	d901      	bls.n	800221a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e028      	b.n	800226c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800221a:	4b16      	ldr	r3, [pc, #88]	; (8002274 <HAL_PWREx_ConfigSupply+0xb0>)
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002222:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002226:	d1ee      	bne.n	8002206 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2b1e      	cmp	r3, #30
 800222c:	d008      	beq.n	8002240 <HAL_PWREx_ConfigSupply+0x7c>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2b2e      	cmp	r3, #46	; 0x2e
 8002232:	d005      	beq.n	8002240 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2b1d      	cmp	r3, #29
 8002238:	d002      	beq.n	8002240 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2b2d      	cmp	r3, #45	; 0x2d
 800223e:	d114      	bne.n	800226a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002240:	f7fe ff1e 	bl	8001080 <HAL_GetTick>
 8002244:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002246:	e009      	b.n	800225c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002248:	f7fe ff1a 	bl	8001080 <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002256:	d901      	bls.n	800225c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e007      	b.n	800226c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800225c:	4b05      	ldr	r3, [pc, #20]	; (8002274 <HAL_PWREx_ConfigSupply+0xb0>)
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002264:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002268:	d1ee      	bne.n	8002248 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800226a:	2300      	movs	r3, #0
}
 800226c:	4618      	mov	r0, r3
 800226e:	3710      	adds	r7, #16
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	58024800 	.word	0x58024800

08002278 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b08c      	sub	sp, #48	; 0x30
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d102      	bne.n	800228c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	f000 bc1d 	b.w	8002ac6 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0301 	and.w	r3, r3, #1
 8002294:	2b00      	cmp	r3, #0
 8002296:	f000 8087 	beq.w	80023a8 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800229a:	4b99      	ldr	r3, [pc, #612]	; (8002500 <HAL_RCC_OscConfig+0x288>)
 800229c:	691b      	ldr	r3, [r3, #16]
 800229e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80022a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80022a4:	4b96      	ldr	r3, [pc, #600]	; (8002500 <HAL_RCC_OscConfig+0x288>)
 80022a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022a8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80022aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022ac:	2b10      	cmp	r3, #16
 80022ae:	d007      	beq.n	80022c0 <HAL_RCC_OscConfig+0x48>
 80022b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022b2:	2b18      	cmp	r3, #24
 80022b4:	d110      	bne.n	80022d8 <HAL_RCC_OscConfig+0x60>
 80022b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022b8:	f003 0303 	and.w	r3, r3, #3
 80022bc:	2b02      	cmp	r3, #2
 80022be:	d10b      	bne.n	80022d8 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022c0:	4b8f      	ldr	r3, [pc, #572]	; (8002500 <HAL_RCC_OscConfig+0x288>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d06c      	beq.n	80023a6 <HAL_RCC_OscConfig+0x12e>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d168      	bne.n	80023a6 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e3f6      	b.n	8002ac6 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022e0:	d106      	bne.n	80022f0 <HAL_RCC_OscConfig+0x78>
 80022e2:	4b87      	ldr	r3, [pc, #540]	; (8002500 <HAL_RCC_OscConfig+0x288>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a86      	ldr	r2, [pc, #536]	; (8002500 <HAL_RCC_OscConfig+0x288>)
 80022e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022ec:	6013      	str	r3, [r2, #0]
 80022ee:	e02e      	b.n	800234e <HAL_RCC_OscConfig+0xd6>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d10c      	bne.n	8002312 <HAL_RCC_OscConfig+0x9a>
 80022f8:	4b81      	ldr	r3, [pc, #516]	; (8002500 <HAL_RCC_OscConfig+0x288>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a80      	ldr	r2, [pc, #512]	; (8002500 <HAL_RCC_OscConfig+0x288>)
 80022fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002302:	6013      	str	r3, [r2, #0]
 8002304:	4b7e      	ldr	r3, [pc, #504]	; (8002500 <HAL_RCC_OscConfig+0x288>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a7d      	ldr	r2, [pc, #500]	; (8002500 <HAL_RCC_OscConfig+0x288>)
 800230a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800230e:	6013      	str	r3, [r2, #0]
 8002310:	e01d      	b.n	800234e <HAL_RCC_OscConfig+0xd6>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800231a:	d10c      	bne.n	8002336 <HAL_RCC_OscConfig+0xbe>
 800231c:	4b78      	ldr	r3, [pc, #480]	; (8002500 <HAL_RCC_OscConfig+0x288>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a77      	ldr	r2, [pc, #476]	; (8002500 <HAL_RCC_OscConfig+0x288>)
 8002322:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002326:	6013      	str	r3, [r2, #0]
 8002328:	4b75      	ldr	r3, [pc, #468]	; (8002500 <HAL_RCC_OscConfig+0x288>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a74      	ldr	r2, [pc, #464]	; (8002500 <HAL_RCC_OscConfig+0x288>)
 800232e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002332:	6013      	str	r3, [r2, #0]
 8002334:	e00b      	b.n	800234e <HAL_RCC_OscConfig+0xd6>
 8002336:	4b72      	ldr	r3, [pc, #456]	; (8002500 <HAL_RCC_OscConfig+0x288>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a71      	ldr	r2, [pc, #452]	; (8002500 <HAL_RCC_OscConfig+0x288>)
 800233c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002340:	6013      	str	r3, [r2, #0]
 8002342:	4b6f      	ldr	r3, [pc, #444]	; (8002500 <HAL_RCC_OscConfig+0x288>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a6e      	ldr	r2, [pc, #440]	; (8002500 <HAL_RCC_OscConfig+0x288>)
 8002348:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800234c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d013      	beq.n	800237e <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002356:	f7fe fe93 	bl	8001080 <HAL_GetTick>
 800235a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800235c:	e008      	b.n	8002370 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800235e:	f7fe fe8f 	bl	8001080 <HAL_GetTick>
 8002362:	4602      	mov	r2, r0
 8002364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	2b64      	cmp	r3, #100	; 0x64
 800236a:	d901      	bls.n	8002370 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800236c:	2303      	movs	r3, #3
 800236e:	e3aa      	b.n	8002ac6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002370:	4b63      	ldr	r3, [pc, #396]	; (8002500 <HAL_RCC_OscConfig+0x288>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d0f0      	beq.n	800235e <HAL_RCC_OscConfig+0xe6>
 800237c:	e014      	b.n	80023a8 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800237e:	f7fe fe7f 	bl	8001080 <HAL_GetTick>
 8002382:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002384:	e008      	b.n	8002398 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002386:	f7fe fe7b 	bl	8001080 <HAL_GetTick>
 800238a:	4602      	mov	r2, r0
 800238c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	2b64      	cmp	r3, #100	; 0x64
 8002392:	d901      	bls.n	8002398 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8002394:	2303      	movs	r3, #3
 8002396:	e396      	b.n	8002ac6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002398:	4b59      	ldr	r3, [pc, #356]	; (8002500 <HAL_RCC_OscConfig+0x288>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d1f0      	bne.n	8002386 <HAL_RCC_OscConfig+0x10e>
 80023a4:	e000      	b.n	80023a8 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023a6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0302 	and.w	r3, r3, #2
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	f000 80cb 	beq.w	800254c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023b6:	4b52      	ldr	r3, [pc, #328]	; (8002500 <HAL_RCC_OscConfig+0x288>)
 80023b8:	691b      	ldr	r3, [r3, #16]
 80023ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80023be:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80023c0:	4b4f      	ldr	r3, [pc, #316]	; (8002500 <HAL_RCC_OscConfig+0x288>)
 80023c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023c4:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80023c6:	6a3b      	ldr	r3, [r7, #32]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d007      	beq.n	80023dc <HAL_RCC_OscConfig+0x164>
 80023cc:	6a3b      	ldr	r3, [r7, #32]
 80023ce:	2b18      	cmp	r3, #24
 80023d0:	d156      	bne.n	8002480 <HAL_RCC_OscConfig+0x208>
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	f003 0303 	and.w	r3, r3, #3
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d151      	bne.n	8002480 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023dc:	4b48      	ldr	r3, [pc, #288]	; (8002500 <HAL_RCC_OscConfig+0x288>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0304 	and.w	r3, r3, #4
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d005      	beq.n	80023f4 <HAL_RCC_OscConfig+0x17c>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d101      	bne.n	80023f4 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e368      	b.n	8002ac6 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80023f4:	4b42      	ldr	r3, [pc, #264]	; (8002500 <HAL_RCC_OscConfig+0x288>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f023 0219 	bic.w	r2, r3, #25
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	493f      	ldr	r1, [pc, #252]	; (8002500 <HAL_RCC_OscConfig+0x288>)
 8002402:	4313      	orrs	r3, r2
 8002404:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002406:	f7fe fe3b 	bl	8001080 <HAL_GetTick>
 800240a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800240c:	e008      	b.n	8002420 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800240e:	f7fe fe37 	bl	8001080 <HAL_GetTick>
 8002412:	4602      	mov	r2, r0
 8002414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	2b02      	cmp	r3, #2
 800241a:	d901      	bls.n	8002420 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 800241c:	2303      	movs	r3, #3
 800241e:	e352      	b.n	8002ac6 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002420:	4b37      	ldr	r3, [pc, #220]	; (8002500 <HAL_RCC_OscConfig+0x288>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0304 	and.w	r3, r3, #4
 8002428:	2b00      	cmp	r3, #0
 800242a:	d0f0      	beq.n	800240e <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800242c:	f7fe fe58 	bl	80010e0 <HAL_GetREVID>
 8002430:	4603      	mov	r3, r0
 8002432:	f241 0203 	movw	r2, #4099	; 0x1003
 8002436:	4293      	cmp	r3, r2
 8002438:	d817      	bhi.n	800246a <HAL_RCC_OscConfig+0x1f2>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	691b      	ldr	r3, [r3, #16]
 800243e:	2b40      	cmp	r3, #64	; 0x40
 8002440:	d108      	bne.n	8002454 <HAL_RCC_OscConfig+0x1dc>
 8002442:	4b2f      	ldr	r3, [pc, #188]	; (8002500 <HAL_RCC_OscConfig+0x288>)
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800244a:	4a2d      	ldr	r2, [pc, #180]	; (8002500 <HAL_RCC_OscConfig+0x288>)
 800244c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002450:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002452:	e07b      	b.n	800254c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002454:	4b2a      	ldr	r3, [pc, #168]	; (8002500 <HAL_RCC_OscConfig+0x288>)
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	691b      	ldr	r3, [r3, #16]
 8002460:	031b      	lsls	r3, r3, #12
 8002462:	4927      	ldr	r1, [pc, #156]	; (8002500 <HAL_RCC_OscConfig+0x288>)
 8002464:	4313      	orrs	r3, r2
 8002466:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002468:	e070      	b.n	800254c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800246a:	4b25      	ldr	r3, [pc, #148]	; (8002500 <HAL_RCC_OscConfig+0x288>)
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	691b      	ldr	r3, [r3, #16]
 8002476:	061b      	lsls	r3, r3, #24
 8002478:	4921      	ldr	r1, [pc, #132]	; (8002500 <HAL_RCC_OscConfig+0x288>)
 800247a:	4313      	orrs	r3, r2
 800247c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800247e:	e065      	b.n	800254c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d048      	beq.n	800251a <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002488:	4b1d      	ldr	r3, [pc, #116]	; (8002500 <HAL_RCC_OscConfig+0x288>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f023 0219 	bic.w	r2, r3, #25
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	491a      	ldr	r1, [pc, #104]	; (8002500 <HAL_RCC_OscConfig+0x288>)
 8002496:	4313      	orrs	r3, r2
 8002498:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800249a:	f7fe fdf1 	bl	8001080 <HAL_GetTick>
 800249e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80024a0:	e008      	b.n	80024b4 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024a2:	f7fe fded 	bl	8001080 <HAL_GetTick>
 80024a6:	4602      	mov	r2, r0
 80024a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	2b02      	cmp	r3, #2
 80024ae:	d901      	bls.n	80024b4 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80024b0:	2303      	movs	r3, #3
 80024b2:	e308      	b.n	8002ac6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80024b4:	4b12      	ldr	r3, [pc, #72]	; (8002500 <HAL_RCC_OscConfig+0x288>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0304 	and.w	r3, r3, #4
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d0f0      	beq.n	80024a2 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024c0:	f7fe fe0e 	bl	80010e0 <HAL_GetREVID>
 80024c4:	4603      	mov	r3, r0
 80024c6:	f241 0203 	movw	r2, #4099	; 0x1003
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d81a      	bhi.n	8002504 <HAL_RCC_OscConfig+0x28c>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	691b      	ldr	r3, [r3, #16]
 80024d2:	2b40      	cmp	r3, #64	; 0x40
 80024d4:	d108      	bne.n	80024e8 <HAL_RCC_OscConfig+0x270>
 80024d6:	4b0a      	ldr	r3, [pc, #40]	; (8002500 <HAL_RCC_OscConfig+0x288>)
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80024de:	4a08      	ldr	r2, [pc, #32]	; (8002500 <HAL_RCC_OscConfig+0x288>)
 80024e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024e4:	6053      	str	r3, [r2, #4]
 80024e6:	e031      	b.n	800254c <HAL_RCC_OscConfig+0x2d4>
 80024e8:	4b05      	ldr	r3, [pc, #20]	; (8002500 <HAL_RCC_OscConfig+0x288>)
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	691b      	ldr	r3, [r3, #16]
 80024f4:	031b      	lsls	r3, r3, #12
 80024f6:	4902      	ldr	r1, [pc, #8]	; (8002500 <HAL_RCC_OscConfig+0x288>)
 80024f8:	4313      	orrs	r3, r2
 80024fa:	604b      	str	r3, [r1, #4]
 80024fc:	e026      	b.n	800254c <HAL_RCC_OscConfig+0x2d4>
 80024fe:	bf00      	nop
 8002500:	58024400 	.word	0x58024400
 8002504:	4b9a      	ldr	r3, [pc, #616]	; (8002770 <HAL_RCC_OscConfig+0x4f8>)
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	691b      	ldr	r3, [r3, #16]
 8002510:	061b      	lsls	r3, r3, #24
 8002512:	4997      	ldr	r1, [pc, #604]	; (8002770 <HAL_RCC_OscConfig+0x4f8>)
 8002514:	4313      	orrs	r3, r2
 8002516:	604b      	str	r3, [r1, #4]
 8002518:	e018      	b.n	800254c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800251a:	4b95      	ldr	r3, [pc, #596]	; (8002770 <HAL_RCC_OscConfig+0x4f8>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a94      	ldr	r2, [pc, #592]	; (8002770 <HAL_RCC_OscConfig+0x4f8>)
 8002520:	f023 0301 	bic.w	r3, r3, #1
 8002524:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002526:	f7fe fdab 	bl	8001080 <HAL_GetTick>
 800252a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800252c:	e008      	b.n	8002540 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800252e:	f7fe fda7 	bl	8001080 <HAL_GetTick>
 8002532:	4602      	mov	r2, r0
 8002534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	2b02      	cmp	r3, #2
 800253a:	d901      	bls.n	8002540 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800253c:	2303      	movs	r3, #3
 800253e:	e2c2      	b.n	8002ac6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002540:	4b8b      	ldr	r3, [pc, #556]	; (8002770 <HAL_RCC_OscConfig+0x4f8>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0304 	and.w	r3, r3, #4
 8002548:	2b00      	cmp	r3, #0
 800254a:	d1f0      	bne.n	800252e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0310 	and.w	r3, r3, #16
 8002554:	2b00      	cmp	r3, #0
 8002556:	f000 80a9 	beq.w	80026ac <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800255a:	4b85      	ldr	r3, [pc, #532]	; (8002770 <HAL_RCC_OscConfig+0x4f8>)
 800255c:	691b      	ldr	r3, [r3, #16]
 800255e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002562:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002564:	4b82      	ldr	r3, [pc, #520]	; (8002770 <HAL_RCC_OscConfig+0x4f8>)
 8002566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002568:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800256a:	69bb      	ldr	r3, [r7, #24]
 800256c:	2b08      	cmp	r3, #8
 800256e:	d007      	beq.n	8002580 <HAL_RCC_OscConfig+0x308>
 8002570:	69bb      	ldr	r3, [r7, #24]
 8002572:	2b18      	cmp	r3, #24
 8002574:	d13a      	bne.n	80025ec <HAL_RCC_OscConfig+0x374>
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	f003 0303 	and.w	r3, r3, #3
 800257c:	2b01      	cmp	r3, #1
 800257e:	d135      	bne.n	80025ec <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002580:	4b7b      	ldr	r3, [pc, #492]	; (8002770 <HAL_RCC_OscConfig+0x4f8>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002588:	2b00      	cmp	r3, #0
 800258a:	d005      	beq.n	8002598 <HAL_RCC_OscConfig+0x320>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	69db      	ldr	r3, [r3, #28]
 8002590:	2b80      	cmp	r3, #128	; 0x80
 8002592:	d001      	beq.n	8002598 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e296      	b.n	8002ac6 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002598:	f7fe fda2 	bl	80010e0 <HAL_GetREVID>
 800259c:	4603      	mov	r3, r0
 800259e:	f241 0203 	movw	r2, #4099	; 0x1003
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d817      	bhi.n	80025d6 <HAL_RCC_OscConfig+0x35e>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6a1b      	ldr	r3, [r3, #32]
 80025aa:	2b20      	cmp	r3, #32
 80025ac:	d108      	bne.n	80025c0 <HAL_RCC_OscConfig+0x348>
 80025ae:	4b70      	ldr	r3, [pc, #448]	; (8002770 <HAL_RCC_OscConfig+0x4f8>)
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80025b6:	4a6e      	ldr	r2, [pc, #440]	; (8002770 <HAL_RCC_OscConfig+0x4f8>)
 80025b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80025bc:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80025be:	e075      	b.n	80026ac <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80025c0:	4b6b      	ldr	r3, [pc, #428]	; (8002770 <HAL_RCC_OscConfig+0x4f8>)
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6a1b      	ldr	r3, [r3, #32]
 80025cc:	069b      	lsls	r3, r3, #26
 80025ce:	4968      	ldr	r1, [pc, #416]	; (8002770 <HAL_RCC_OscConfig+0x4f8>)
 80025d0:	4313      	orrs	r3, r2
 80025d2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80025d4:	e06a      	b.n	80026ac <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80025d6:	4b66      	ldr	r3, [pc, #408]	; (8002770 <HAL_RCC_OscConfig+0x4f8>)
 80025d8:	68db      	ldr	r3, [r3, #12]
 80025da:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6a1b      	ldr	r3, [r3, #32]
 80025e2:	061b      	lsls	r3, r3, #24
 80025e4:	4962      	ldr	r1, [pc, #392]	; (8002770 <HAL_RCC_OscConfig+0x4f8>)
 80025e6:	4313      	orrs	r3, r2
 80025e8:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80025ea:	e05f      	b.n	80026ac <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	69db      	ldr	r3, [r3, #28]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d042      	beq.n	800267a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80025f4:	4b5e      	ldr	r3, [pc, #376]	; (8002770 <HAL_RCC_OscConfig+0x4f8>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a5d      	ldr	r2, [pc, #372]	; (8002770 <HAL_RCC_OscConfig+0x4f8>)
 80025fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002600:	f7fe fd3e 	bl	8001080 <HAL_GetTick>
 8002604:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002606:	e008      	b.n	800261a <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002608:	f7fe fd3a 	bl	8001080 <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	2b02      	cmp	r3, #2
 8002614:	d901      	bls.n	800261a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e255      	b.n	8002ac6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800261a:	4b55      	ldr	r3, [pc, #340]	; (8002770 <HAL_RCC_OscConfig+0x4f8>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002622:	2b00      	cmp	r3, #0
 8002624:	d0f0      	beq.n	8002608 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002626:	f7fe fd5b 	bl	80010e0 <HAL_GetREVID>
 800262a:	4603      	mov	r3, r0
 800262c:	f241 0203 	movw	r2, #4099	; 0x1003
 8002630:	4293      	cmp	r3, r2
 8002632:	d817      	bhi.n	8002664 <HAL_RCC_OscConfig+0x3ec>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6a1b      	ldr	r3, [r3, #32]
 8002638:	2b20      	cmp	r3, #32
 800263a:	d108      	bne.n	800264e <HAL_RCC_OscConfig+0x3d6>
 800263c:	4b4c      	ldr	r3, [pc, #304]	; (8002770 <HAL_RCC_OscConfig+0x4f8>)
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002644:	4a4a      	ldr	r2, [pc, #296]	; (8002770 <HAL_RCC_OscConfig+0x4f8>)
 8002646:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800264a:	6053      	str	r3, [r2, #4]
 800264c:	e02e      	b.n	80026ac <HAL_RCC_OscConfig+0x434>
 800264e:	4b48      	ldr	r3, [pc, #288]	; (8002770 <HAL_RCC_OscConfig+0x4f8>)
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6a1b      	ldr	r3, [r3, #32]
 800265a:	069b      	lsls	r3, r3, #26
 800265c:	4944      	ldr	r1, [pc, #272]	; (8002770 <HAL_RCC_OscConfig+0x4f8>)
 800265e:	4313      	orrs	r3, r2
 8002660:	604b      	str	r3, [r1, #4]
 8002662:	e023      	b.n	80026ac <HAL_RCC_OscConfig+0x434>
 8002664:	4b42      	ldr	r3, [pc, #264]	; (8002770 <HAL_RCC_OscConfig+0x4f8>)
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6a1b      	ldr	r3, [r3, #32]
 8002670:	061b      	lsls	r3, r3, #24
 8002672:	493f      	ldr	r1, [pc, #252]	; (8002770 <HAL_RCC_OscConfig+0x4f8>)
 8002674:	4313      	orrs	r3, r2
 8002676:	60cb      	str	r3, [r1, #12]
 8002678:	e018      	b.n	80026ac <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800267a:	4b3d      	ldr	r3, [pc, #244]	; (8002770 <HAL_RCC_OscConfig+0x4f8>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a3c      	ldr	r2, [pc, #240]	; (8002770 <HAL_RCC_OscConfig+0x4f8>)
 8002680:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002684:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002686:	f7fe fcfb 	bl	8001080 <HAL_GetTick>
 800268a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800268c:	e008      	b.n	80026a0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800268e:	f7fe fcf7 	bl	8001080 <HAL_GetTick>
 8002692:	4602      	mov	r2, r0
 8002694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	2b02      	cmp	r3, #2
 800269a:	d901      	bls.n	80026a0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800269c:	2303      	movs	r3, #3
 800269e:	e212      	b.n	8002ac6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80026a0:	4b33      	ldr	r3, [pc, #204]	; (8002770 <HAL_RCC_OscConfig+0x4f8>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d1f0      	bne.n	800268e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0308 	and.w	r3, r3, #8
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d036      	beq.n	8002726 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	695b      	ldr	r3, [r3, #20]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d019      	beq.n	80026f4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026c0:	4b2b      	ldr	r3, [pc, #172]	; (8002770 <HAL_RCC_OscConfig+0x4f8>)
 80026c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026c4:	4a2a      	ldr	r2, [pc, #168]	; (8002770 <HAL_RCC_OscConfig+0x4f8>)
 80026c6:	f043 0301 	orr.w	r3, r3, #1
 80026ca:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026cc:	f7fe fcd8 	bl	8001080 <HAL_GetTick>
 80026d0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80026d2:	e008      	b.n	80026e6 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026d4:	f7fe fcd4 	bl	8001080 <HAL_GetTick>
 80026d8:	4602      	mov	r2, r0
 80026da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	2b02      	cmp	r3, #2
 80026e0:	d901      	bls.n	80026e6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	e1ef      	b.n	8002ac6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80026e6:	4b22      	ldr	r3, [pc, #136]	; (8002770 <HAL_RCC_OscConfig+0x4f8>)
 80026e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026ea:	f003 0302 	and.w	r3, r3, #2
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d0f0      	beq.n	80026d4 <HAL_RCC_OscConfig+0x45c>
 80026f2:	e018      	b.n	8002726 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026f4:	4b1e      	ldr	r3, [pc, #120]	; (8002770 <HAL_RCC_OscConfig+0x4f8>)
 80026f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026f8:	4a1d      	ldr	r2, [pc, #116]	; (8002770 <HAL_RCC_OscConfig+0x4f8>)
 80026fa:	f023 0301 	bic.w	r3, r3, #1
 80026fe:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002700:	f7fe fcbe 	bl	8001080 <HAL_GetTick>
 8002704:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002706:	e008      	b.n	800271a <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002708:	f7fe fcba 	bl	8001080 <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	2b02      	cmp	r3, #2
 8002714:	d901      	bls.n	800271a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e1d5      	b.n	8002ac6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800271a:	4b15      	ldr	r3, [pc, #84]	; (8002770 <HAL_RCC_OscConfig+0x4f8>)
 800271c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800271e:	f003 0302 	and.w	r3, r3, #2
 8002722:	2b00      	cmp	r3, #0
 8002724:	d1f0      	bne.n	8002708 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0320 	and.w	r3, r3, #32
 800272e:	2b00      	cmp	r3, #0
 8002730:	d039      	beq.n	80027a6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	699b      	ldr	r3, [r3, #24]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d01c      	beq.n	8002774 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800273a:	4b0d      	ldr	r3, [pc, #52]	; (8002770 <HAL_RCC_OscConfig+0x4f8>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a0c      	ldr	r2, [pc, #48]	; (8002770 <HAL_RCC_OscConfig+0x4f8>)
 8002740:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002744:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002746:	f7fe fc9b 	bl	8001080 <HAL_GetTick>
 800274a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800274c:	e008      	b.n	8002760 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800274e:	f7fe fc97 	bl	8001080 <HAL_GetTick>
 8002752:	4602      	mov	r2, r0
 8002754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	2b02      	cmp	r3, #2
 800275a:	d901      	bls.n	8002760 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800275c:	2303      	movs	r3, #3
 800275e:	e1b2      	b.n	8002ac6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002760:	4b03      	ldr	r3, [pc, #12]	; (8002770 <HAL_RCC_OscConfig+0x4f8>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002768:	2b00      	cmp	r3, #0
 800276a:	d0f0      	beq.n	800274e <HAL_RCC_OscConfig+0x4d6>
 800276c:	e01b      	b.n	80027a6 <HAL_RCC_OscConfig+0x52e>
 800276e:	bf00      	nop
 8002770:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002774:	4b9b      	ldr	r3, [pc, #620]	; (80029e4 <HAL_RCC_OscConfig+0x76c>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a9a      	ldr	r2, [pc, #616]	; (80029e4 <HAL_RCC_OscConfig+0x76c>)
 800277a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800277e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002780:	f7fe fc7e 	bl	8001080 <HAL_GetTick>
 8002784:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002786:	e008      	b.n	800279a <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002788:	f7fe fc7a 	bl	8001080 <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	2b02      	cmp	r3, #2
 8002794:	d901      	bls.n	800279a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	e195      	b.n	8002ac6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800279a:	4b92      	ldr	r3, [pc, #584]	; (80029e4 <HAL_RCC_OscConfig+0x76c>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d1f0      	bne.n	8002788 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0304 	and.w	r3, r3, #4
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	f000 8081 	beq.w	80028b6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80027b4:	4b8c      	ldr	r3, [pc, #560]	; (80029e8 <HAL_RCC_OscConfig+0x770>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a8b      	ldr	r2, [pc, #556]	; (80029e8 <HAL_RCC_OscConfig+0x770>)
 80027ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027be:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80027c0:	f7fe fc5e 	bl	8001080 <HAL_GetTick>
 80027c4:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80027c6:	e008      	b.n	80027da <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80027c8:	f7fe fc5a 	bl	8001080 <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	2b64      	cmp	r3, #100	; 0x64
 80027d4:	d901      	bls.n	80027da <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80027d6:	2303      	movs	r3, #3
 80027d8:	e175      	b.n	8002ac6 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80027da:	4b83      	ldr	r3, [pc, #524]	; (80029e8 <HAL_RCC_OscConfig+0x770>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d0f0      	beq.n	80027c8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d106      	bne.n	80027fc <HAL_RCC_OscConfig+0x584>
 80027ee:	4b7d      	ldr	r3, [pc, #500]	; (80029e4 <HAL_RCC_OscConfig+0x76c>)
 80027f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027f2:	4a7c      	ldr	r2, [pc, #496]	; (80029e4 <HAL_RCC_OscConfig+0x76c>)
 80027f4:	f043 0301 	orr.w	r3, r3, #1
 80027f8:	6713      	str	r3, [r2, #112]	; 0x70
 80027fa:	e02d      	b.n	8002858 <HAL_RCC_OscConfig+0x5e0>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d10c      	bne.n	800281e <HAL_RCC_OscConfig+0x5a6>
 8002804:	4b77      	ldr	r3, [pc, #476]	; (80029e4 <HAL_RCC_OscConfig+0x76c>)
 8002806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002808:	4a76      	ldr	r2, [pc, #472]	; (80029e4 <HAL_RCC_OscConfig+0x76c>)
 800280a:	f023 0301 	bic.w	r3, r3, #1
 800280e:	6713      	str	r3, [r2, #112]	; 0x70
 8002810:	4b74      	ldr	r3, [pc, #464]	; (80029e4 <HAL_RCC_OscConfig+0x76c>)
 8002812:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002814:	4a73      	ldr	r2, [pc, #460]	; (80029e4 <HAL_RCC_OscConfig+0x76c>)
 8002816:	f023 0304 	bic.w	r3, r3, #4
 800281a:	6713      	str	r3, [r2, #112]	; 0x70
 800281c:	e01c      	b.n	8002858 <HAL_RCC_OscConfig+0x5e0>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	2b05      	cmp	r3, #5
 8002824:	d10c      	bne.n	8002840 <HAL_RCC_OscConfig+0x5c8>
 8002826:	4b6f      	ldr	r3, [pc, #444]	; (80029e4 <HAL_RCC_OscConfig+0x76c>)
 8002828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800282a:	4a6e      	ldr	r2, [pc, #440]	; (80029e4 <HAL_RCC_OscConfig+0x76c>)
 800282c:	f043 0304 	orr.w	r3, r3, #4
 8002830:	6713      	str	r3, [r2, #112]	; 0x70
 8002832:	4b6c      	ldr	r3, [pc, #432]	; (80029e4 <HAL_RCC_OscConfig+0x76c>)
 8002834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002836:	4a6b      	ldr	r2, [pc, #428]	; (80029e4 <HAL_RCC_OscConfig+0x76c>)
 8002838:	f043 0301 	orr.w	r3, r3, #1
 800283c:	6713      	str	r3, [r2, #112]	; 0x70
 800283e:	e00b      	b.n	8002858 <HAL_RCC_OscConfig+0x5e0>
 8002840:	4b68      	ldr	r3, [pc, #416]	; (80029e4 <HAL_RCC_OscConfig+0x76c>)
 8002842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002844:	4a67      	ldr	r2, [pc, #412]	; (80029e4 <HAL_RCC_OscConfig+0x76c>)
 8002846:	f023 0301 	bic.w	r3, r3, #1
 800284a:	6713      	str	r3, [r2, #112]	; 0x70
 800284c:	4b65      	ldr	r3, [pc, #404]	; (80029e4 <HAL_RCC_OscConfig+0x76c>)
 800284e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002850:	4a64      	ldr	r2, [pc, #400]	; (80029e4 <HAL_RCC_OscConfig+0x76c>)
 8002852:	f023 0304 	bic.w	r3, r3, #4
 8002856:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d015      	beq.n	800288c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002860:	f7fe fc0e 	bl	8001080 <HAL_GetTick>
 8002864:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002866:	e00a      	b.n	800287e <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002868:	f7fe fc0a 	bl	8001080 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	f241 3288 	movw	r2, #5000	; 0x1388
 8002876:	4293      	cmp	r3, r2
 8002878:	d901      	bls.n	800287e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e123      	b.n	8002ac6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800287e:	4b59      	ldr	r3, [pc, #356]	; (80029e4 <HAL_RCC_OscConfig+0x76c>)
 8002880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002882:	f003 0302 	and.w	r3, r3, #2
 8002886:	2b00      	cmp	r3, #0
 8002888:	d0ee      	beq.n	8002868 <HAL_RCC_OscConfig+0x5f0>
 800288a:	e014      	b.n	80028b6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800288c:	f7fe fbf8 	bl	8001080 <HAL_GetTick>
 8002890:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002892:	e00a      	b.n	80028aa <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002894:	f7fe fbf4 	bl	8001080 <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	f241 3288 	movw	r2, #5000	; 0x1388
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d901      	bls.n	80028aa <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e10d      	b.n	8002ac6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80028aa:	4b4e      	ldr	r3, [pc, #312]	; (80029e4 <HAL_RCC_OscConfig+0x76c>)
 80028ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ae:	f003 0302 	and.w	r3, r3, #2
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d1ee      	bne.n	8002894 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	f000 8102 	beq.w	8002ac4 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80028c0:	4b48      	ldr	r3, [pc, #288]	; (80029e4 <HAL_RCC_OscConfig+0x76c>)
 80028c2:	691b      	ldr	r3, [r3, #16]
 80028c4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80028c8:	2b18      	cmp	r3, #24
 80028ca:	f000 80bd 	beq.w	8002a48 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	f040 809e 	bne.w	8002a14 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028d8:	4b42      	ldr	r3, [pc, #264]	; (80029e4 <HAL_RCC_OscConfig+0x76c>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a41      	ldr	r2, [pc, #260]	; (80029e4 <HAL_RCC_OscConfig+0x76c>)
 80028de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e4:	f7fe fbcc 	bl	8001080 <HAL_GetTick>
 80028e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80028ea:	e008      	b.n	80028fe <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028ec:	f7fe fbc8 	bl	8001080 <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d901      	bls.n	80028fe <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e0e3      	b.n	8002ac6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80028fe:	4b39      	ldr	r3, [pc, #228]	; (80029e4 <HAL_RCC_OscConfig+0x76c>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d1f0      	bne.n	80028ec <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800290a:	4b36      	ldr	r3, [pc, #216]	; (80029e4 <HAL_RCC_OscConfig+0x76c>)
 800290c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800290e:	4b37      	ldr	r3, [pc, #220]	; (80029ec <HAL_RCC_OscConfig+0x774>)
 8002910:	4013      	ands	r3, r2
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800291a:	0112      	lsls	r2, r2, #4
 800291c:	430a      	orrs	r2, r1
 800291e:	4931      	ldr	r1, [pc, #196]	; (80029e4 <HAL_RCC_OscConfig+0x76c>)
 8002920:	4313      	orrs	r3, r2
 8002922:	628b      	str	r3, [r1, #40]	; 0x28
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002928:	3b01      	subs	r3, #1
 800292a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002932:	3b01      	subs	r3, #1
 8002934:	025b      	lsls	r3, r3, #9
 8002936:	b29b      	uxth	r3, r3
 8002938:	431a      	orrs	r2, r3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800293e:	3b01      	subs	r3, #1
 8002940:	041b      	lsls	r3, r3, #16
 8002942:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002946:	431a      	orrs	r2, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800294c:	3b01      	subs	r3, #1
 800294e:	061b      	lsls	r3, r3, #24
 8002950:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002954:	4923      	ldr	r1, [pc, #140]	; (80029e4 <HAL_RCC_OscConfig+0x76c>)
 8002956:	4313      	orrs	r3, r2
 8002958:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800295a:	4b22      	ldr	r3, [pc, #136]	; (80029e4 <HAL_RCC_OscConfig+0x76c>)
 800295c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800295e:	4a21      	ldr	r2, [pc, #132]	; (80029e4 <HAL_RCC_OscConfig+0x76c>)
 8002960:	f023 0301 	bic.w	r3, r3, #1
 8002964:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002966:	4b1f      	ldr	r3, [pc, #124]	; (80029e4 <HAL_RCC_OscConfig+0x76c>)
 8002968:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800296a:	4b21      	ldr	r3, [pc, #132]	; (80029f0 <HAL_RCC_OscConfig+0x778>)
 800296c:	4013      	ands	r3, r2
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002972:	00d2      	lsls	r2, r2, #3
 8002974:	491b      	ldr	r1, [pc, #108]	; (80029e4 <HAL_RCC_OscConfig+0x76c>)
 8002976:	4313      	orrs	r3, r2
 8002978:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800297a:	4b1a      	ldr	r3, [pc, #104]	; (80029e4 <HAL_RCC_OscConfig+0x76c>)
 800297c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800297e:	f023 020c 	bic.w	r2, r3, #12
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002986:	4917      	ldr	r1, [pc, #92]	; (80029e4 <HAL_RCC_OscConfig+0x76c>)
 8002988:	4313      	orrs	r3, r2
 800298a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800298c:	4b15      	ldr	r3, [pc, #84]	; (80029e4 <HAL_RCC_OscConfig+0x76c>)
 800298e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002990:	f023 0202 	bic.w	r2, r3, #2
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002998:	4912      	ldr	r1, [pc, #72]	; (80029e4 <HAL_RCC_OscConfig+0x76c>)
 800299a:	4313      	orrs	r3, r2
 800299c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800299e:	4b11      	ldr	r3, [pc, #68]	; (80029e4 <HAL_RCC_OscConfig+0x76c>)
 80029a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029a2:	4a10      	ldr	r2, [pc, #64]	; (80029e4 <HAL_RCC_OscConfig+0x76c>)
 80029a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029a8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029aa:	4b0e      	ldr	r3, [pc, #56]	; (80029e4 <HAL_RCC_OscConfig+0x76c>)
 80029ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ae:	4a0d      	ldr	r2, [pc, #52]	; (80029e4 <HAL_RCC_OscConfig+0x76c>)
 80029b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029b4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80029b6:	4b0b      	ldr	r3, [pc, #44]	; (80029e4 <HAL_RCC_OscConfig+0x76c>)
 80029b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ba:	4a0a      	ldr	r2, [pc, #40]	; (80029e4 <HAL_RCC_OscConfig+0x76c>)
 80029bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029c0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80029c2:	4b08      	ldr	r3, [pc, #32]	; (80029e4 <HAL_RCC_OscConfig+0x76c>)
 80029c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c6:	4a07      	ldr	r2, [pc, #28]	; (80029e4 <HAL_RCC_OscConfig+0x76c>)
 80029c8:	f043 0301 	orr.w	r3, r3, #1
 80029cc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029ce:	4b05      	ldr	r3, [pc, #20]	; (80029e4 <HAL_RCC_OscConfig+0x76c>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a04      	ldr	r2, [pc, #16]	; (80029e4 <HAL_RCC_OscConfig+0x76c>)
 80029d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029da:	f7fe fb51 	bl	8001080 <HAL_GetTick>
 80029de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80029e0:	e011      	b.n	8002a06 <HAL_RCC_OscConfig+0x78e>
 80029e2:	bf00      	nop
 80029e4:	58024400 	.word	0x58024400
 80029e8:	58024800 	.word	0x58024800
 80029ec:	fffffc0c 	.word	0xfffffc0c
 80029f0:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029f4:	f7fe fb44 	bl	8001080 <HAL_GetTick>
 80029f8:	4602      	mov	r2, r0
 80029fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d901      	bls.n	8002a06 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	e05f      	b.n	8002ac6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002a06:	4b32      	ldr	r3, [pc, #200]	; (8002ad0 <HAL_RCC_OscConfig+0x858>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d0f0      	beq.n	80029f4 <HAL_RCC_OscConfig+0x77c>
 8002a12:	e057      	b.n	8002ac4 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a14:	4b2e      	ldr	r3, [pc, #184]	; (8002ad0 <HAL_RCC_OscConfig+0x858>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a2d      	ldr	r2, [pc, #180]	; (8002ad0 <HAL_RCC_OscConfig+0x858>)
 8002a1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a20:	f7fe fb2e 	bl	8001080 <HAL_GetTick>
 8002a24:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a26:	e008      	b.n	8002a3a <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a28:	f7fe fb2a 	bl	8001080 <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d901      	bls.n	8002a3a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e045      	b.n	8002ac6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a3a:	4b25      	ldr	r3, [pc, #148]	; (8002ad0 <HAL_RCC_OscConfig+0x858>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d1f0      	bne.n	8002a28 <HAL_RCC_OscConfig+0x7b0>
 8002a46:	e03d      	b.n	8002ac4 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002a48:	4b21      	ldr	r3, [pc, #132]	; (8002ad0 <HAL_RCC_OscConfig+0x858>)
 8002a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a4c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002a4e:	4b20      	ldr	r3, [pc, #128]	; (8002ad0 <HAL_RCC_OscConfig+0x858>)
 8002a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a52:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d031      	beq.n	8002ac0 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	f003 0203 	and.w	r2, r3, #3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d12a      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	091b      	lsrs	r3, r3, #4
 8002a6e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d122      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a84:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d11a      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	0a5b      	lsrs	r3, r3, #9
 8002a8e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a96:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d111      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	0c1b      	lsrs	r3, r3, #16
 8002aa0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aa8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d108      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	0e1b      	lsrs	r3, r3, #24
 8002ab2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aba:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d001      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e000      	b.n	8002ac6 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8002ac4:	2300      	movs	r3, #0
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3730      	adds	r7, #48	; 0x30
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	58024400 	.word	0x58024400

08002ad4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b086      	sub	sp, #24
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d101      	bne.n	8002ae8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e19c      	b.n	8002e22 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ae8:	4b8a      	ldr	r3, [pc, #552]	; (8002d14 <HAL_RCC_ClockConfig+0x240>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 030f 	and.w	r3, r3, #15
 8002af0:	683a      	ldr	r2, [r7, #0]
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d910      	bls.n	8002b18 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002af6:	4b87      	ldr	r3, [pc, #540]	; (8002d14 <HAL_RCC_ClockConfig+0x240>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f023 020f 	bic.w	r2, r3, #15
 8002afe:	4985      	ldr	r1, [pc, #532]	; (8002d14 <HAL_RCC_ClockConfig+0x240>)
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b06:	4b83      	ldr	r3, [pc, #524]	; (8002d14 <HAL_RCC_ClockConfig+0x240>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 030f 	and.w	r3, r3, #15
 8002b0e:	683a      	ldr	r2, [r7, #0]
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d001      	beq.n	8002b18 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e184      	b.n	8002e22 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0304 	and.w	r3, r3, #4
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d010      	beq.n	8002b46 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	691a      	ldr	r2, [r3, #16]
 8002b28:	4b7b      	ldr	r3, [pc, #492]	; (8002d18 <HAL_RCC_ClockConfig+0x244>)
 8002b2a:	699b      	ldr	r3, [r3, #24]
 8002b2c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d908      	bls.n	8002b46 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002b34:	4b78      	ldr	r3, [pc, #480]	; (8002d18 <HAL_RCC_ClockConfig+0x244>)
 8002b36:	699b      	ldr	r3, [r3, #24]
 8002b38:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	691b      	ldr	r3, [r3, #16]
 8002b40:	4975      	ldr	r1, [pc, #468]	; (8002d18 <HAL_RCC_ClockConfig+0x244>)
 8002b42:	4313      	orrs	r3, r2
 8002b44:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0308 	and.w	r3, r3, #8
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d010      	beq.n	8002b74 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	695a      	ldr	r2, [r3, #20]
 8002b56:	4b70      	ldr	r3, [pc, #448]	; (8002d18 <HAL_RCC_ClockConfig+0x244>)
 8002b58:	69db      	ldr	r3, [r3, #28]
 8002b5a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d908      	bls.n	8002b74 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002b62:	4b6d      	ldr	r3, [pc, #436]	; (8002d18 <HAL_RCC_ClockConfig+0x244>)
 8002b64:	69db      	ldr	r3, [r3, #28]
 8002b66:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	695b      	ldr	r3, [r3, #20]
 8002b6e:	496a      	ldr	r1, [pc, #424]	; (8002d18 <HAL_RCC_ClockConfig+0x244>)
 8002b70:	4313      	orrs	r3, r2
 8002b72:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0310 	and.w	r3, r3, #16
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d010      	beq.n	8002ba2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	699a      	ldr	r2, [r3, #24]
 8002b84:	4b64      	ldr	r3, [pc, #400]	; (8002d18 <HAL_RCC_ClockConfig+0x244>)
 8002b86:	69db      	ldr	r3, [r3, #28]
 8002b88:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d908      	bls.n	8002ba2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002b90:	4b61      	ldr	r3, [pc, #388]	; (8002d18 <HAL_RCC_ClockConfig+0x244>)
 8002b92:	69db      	ldr	r3, [r3, #28]
 8002b94:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	699b      	ldr	r3, [r3, #24]
 8002b9c:	495e      	ldr	r1, [pc, #376]	; (8002d18 <HAL_RCC_ClockConfig+0x244>)
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0320 	and.w	r3, r3, #32
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d010      	beq.n	8002bd0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	69da      	ldr	r2, [r3, #28]
 8002bb2:	4b59      	ldr	r3, [pc, #356]	; (8002d18 <HAL_RCC_ClockConfig+0x244>)
 8002bb4:	6a1b      	ldr	r3, [r3, #32]
 8002bb6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	d908      	bls.n	8002bd0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002bbe:	4b56      	ldr	r3, [pc, #344]	; (8002d18 <HAL_RCC_ClockConfig+0x244>)
 8002bc0:	6a1b      	ldr	r3, [r3, #32]
 8002bc2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	69db      	ldr	r3, [r3, #28]
 8002bca:	4953      	ldr	r1, [pc, #332]	; (8002d18 <HAL_RCC_ClockConfig+0x244>)
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 0302 	and.w	r3, r3, #2
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d010      	beq.n	8002bfe <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	68da      	ldr	r2, [r3, #12]
 8002be0:	4b4d      	ldr	r3, [pc, #308]	; (8002d18 <HAL_RCC_ClockConfig+0x244>)
 8002be2:	699b      	ldr	r3, [r3, #24]
 8002be4:	f003 030f 	and.w	r3, r3, #15
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d908      	bls.n	8002bfe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bec:	4b4a      	ldr	r3, [pc, #296]	; (8002d18 <HAL_RCC_ClockConfig+0x244>)
 8002bee:	699b      	ldr	r3, [r3, #24]
 8002bf0:	f023 020f 	bic.w	r2, r3, #15
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	4947      	ldr	r1, [pc, #284]	; (8002d18 <HAL_RCC_ClockConfig+0x244>)
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0301 	and.w	r3, r3, #1
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d055      	beq.n	8002cb6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002c0a:	4b43      	ldr	r3, [pc, #268]	; (8002d18 <HAL_RCC_ClockConfig+0x244>)
 8002c0c:	699b      	ldr	r3, [r3, #24]
 8002c0e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	4940      	ldr	r1, [pc, #256]	; (8002d18 <HAL_RCC_ClockConfig+0x244>)
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	2b02      	cmp	r3, #2
 8002c22:	d107      	bne.n	8002c34 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c24:	4b3c      	ldr	r3, [pc, #240]	; (8002d18 <HAL_RCC_ClockConfig+0x244>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d121      	bne.n	8002c74 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e0f6      	b.n	8002e22 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	2b03      	cmp	r3, #3
 8002c3a:	d107      	bne.n	8002c4c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c3c:	4b36      	ldr	r3, [pc, #216]	; (8002d18 <HAL_RCC_ClockConfig+0x244>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d115      	bne.n	8002c74 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e0ea      	b.n	8002e22 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d107      	bne.n	8002c64 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002c54:	4b30      	ldr	r3, [pc, #192]	; (8002d18 <HAL_RCC_ClockConfig+0x244>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d109      	bne.n	8002c74 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e0de      	b.n	8002e22 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c64:	4b2c      	ldr	r3, [pc, #176]	; (8002d18 <HAL_RCC_ClockConfig+0x244>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0304 	and.w	r3, r3, #4
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d101      	bne.n	8002c74 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e0d6      	b.n	8002e22 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c74:	4b28      	ldr	r3, [pc, #160]	; (8002d18 <HAL_RCC_ClockConfig+0x244>)
 8002c76:	691b      	ldr	r3, [r3, #16]
 8002c78:	f023 0207 	bic.w	r2, r3, #7
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	4925      	ldr	r1, [pc, #148]	; (8002d18 <HAL_RCC_ClockConfig+0x244>)
 8002c82:	4313      	orrs	r3, r2
 8002c84:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c86:	f7fe f9fb 	bl	8001080 <HAL_GetTick>
 8002c8a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c8c:	e00a      	b.n	8002ca4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c8e:	f7fe f9f7 	bl	8001080 <HAL_GetTick>
 8002c92:	4602      	mov	r2, r0
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	1ad3      	subs	r3, r2, r3
 8002c98:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d901      	bls.n	8002ca4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	e0be      	b.n	8002e22 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ca4:	4b1c      	ldr	r3, [pc, #112]	; (8002d18 <HAL_RCC_ClockConfig+0x244>)
 8002ca6:	691b      	ldr	r3, [r3, #16]
 8002ca8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	00db      	lsls	r3, r3, #3
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	d1eb      	bne.n	8002c8e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0302 	and.w	r3, r3, #2
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d010      	beq.n	8002ce4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	68da      	ldr	r2, [r3, #12]
 8002cc6:	4b14      	ldr	r3, [pc, #80]	; (8002d18 <HAL_RCC_ClockConfig+0x244>)
 8002cc8:	699b      	ldr	r3, [r3, #24]
 8002cca:	f003 030f 	and.w	r3, r3, #15
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d208      	bcs.n	8002ce4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cd2:	4b11      	ldr	r3, [pc, #68]	; (8002d18 <HAL_RCC_ClockConfig+0x244>)
 8002cd4:	699b      	ldr	r3, [r3, #24]
 8002cd6:	f023 020f 	bic.w	r2, r3, #15
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	490e      	ldr	r1, [pc, #56]	; (8002d18 <HAL_RCC_ClockConfig+0x244>)
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ce4:	4b0b      	ldr	r3, [pc, #44]	; (8002d14 <HAL_RCC_ClockConfig+0x240>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 030f 	and.w	r3, r3, #15
 8002cec:	683a      	ldr	r2, [r7, #0]
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d214      	bcs.n	8002d1c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cf2:	4b08      	ldr	r3, [pc, #32]	; (8002d14 <HAL_RCC_ClockConfig+0x240>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f023 020f 	bic.w	r2, r3, #15
 8002cfa:	4906      	ldr	r1, [pc, #24]	; (8002d14 <HAL_RCC_ClockConfig+0x240>)
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d02:	4b04      	ldr	r3, [pc, #16]	; (8002d14 <HAL_RCC_ClockConfig+0x240>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 030f 	and.w	r3, r3, #15
 8002d0a:	683a      	ldr	r2, [r7, #0]
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d005      	beq.n	8002d1c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e086      	b.n	8002e22 <HAL_RCC_ClockConfig+0x34e>
 8002d14:	52002000 	.word	0x52002000
 8002d18:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 0304 	and.w	r3, r3, #4
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d010      	beq.n	8002d4a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	691a      	ldr	r2, [r3, #16]
 8002d2c:	4b3f      	ldr	r3, [pc, #252]	; (8002e2c <HAL_RCC_ClockConfig+0x358>)
 8002d2e:	699b      	ldr	r3, [r3, #24]
 8002d30:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d208      	bcs.n	8002d4a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002d38:	4b3c      	ldr	r3, [pc, #240]	; (8002e2c <HAL_RCC_ClockConfig+0x358>)
 8002d3a:	699b      	ldr	r3, [r3, #24]
 8002d3c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	691b      	ldr	r3, [r3, #16]
 8002d44:	4939      	ldr	r1, [pc, #228]	; (8002e2c <HAL_RCC_ClockConfig+0x358>)
 8002d46:	4313      	orrs	r3, r2
 8002d48:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0308 	and.w	r3, r3, #8
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d010      	beq.n	8002d78 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	695a      	ldr	r2, [r3, #20]
 8002d5a:	4b34      	ldr	r3, [pc, #208]	; (8002e2c <HAL_RCC_ClockConfig+0x358>)
 8002d5c:	69db      	ldr	r3, [r3, #28]
 8002d5e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d208      	bcs.n	8002d78 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002d66:	4b31      	ldr	r3, [pc, #196]	; (8002e2c <HAL_RCC_ClockConfig+0x358>)
 8002d68:	69db      	ldr	r3, [r3, #28]
 8002d6a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	695b      	ldr	r3, [r3, #20]
 8002d72:	492e      	ldr	r1, [pc, #184]	; (8002e2c <HAL_RCC_ClockConfig+0x358>)
 8002d74:	4313      	orrs	r3, r2
 8002d76:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0310 	and.w	r3, r3, #16
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d010      	beq.n	8002da6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	699a      	ldr	r2, [r3, #24]
 8002d88:	4b28      	ldr	r3, [pc, #160]	; (8002e2c <HAL_RCC_ClockConfig+0x358>)
 8002d8a:	69db      	ldr	r3, [r3, #28]
 8002d8c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d208      	bcs.n	8002da6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002d94:	4b25      	ldr	r3, [pc, #148]	; (8002e2c <HAL_RCC_ClockConfig+0x358>)
 8002d96:	69db      	ldr	r3, [r3, #28]
 8002d98:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	699b      	ldr	r3, [r3, #24]
 8002da0:	4922      	ldr	r1, [pc, #136]	; (8002e2c <HAL_RCC_ClockConfig+0x358>)
 8002da2:	4313      	orrs	r3, r2
 8002da4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0320 	and.w	r3, r3, #32
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d010      	beq.n	8002dd4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	69da      	ldr	r2, [r3, #28]
 8002db6:	4b1d      	ldr	r3, [pc, #116]	; (8002e2c <HAL_RCC_ClockConfig+0x358>)
 8002db8:	6a1b      	ldr	r3, [r3, #32]
 8002dba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d208      	bcs.n	8002dd4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002dc2:	4b1a      	ldr	r3, [pc, #104]	; (8002e2c <HAL_RCC_ClockConfig+0x358>)
 8002dc4:	6a1b      	ldr	r3, [r3, #32]
 8002dc6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	69db      	ldr	r3, [r3, #28]
 8002dce:	4917      	ldr	r1, [pc, #92]	; (8002e2c <HAL_RCC_ClockConfig+0x358>)
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002dd4:	f000 f834 	bl	8002e40 <HAL_RCC_GetSysClockFreq>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	4b14      	ldr	r3, [pc, #80]	; (8002e2c <HAL_RCC_ClockConfig+0x358>)
 8002ddc:	699b      	ldr	r3, [r3, #24]
 8002dde:	0a1b      	lsrs	r3, r3, #8
 8002de0:	f003 030f 	and.w	r3, r3, #15
 8002de4:	4912      	ldr	r1, [pc, #72]	; (8002e30 <HAL_RCC_ClockConfig+0x35c>)
 8002de6:	5ccb      	ldrb	r3, [r1, r3]
 8002de8:	f003 031f 	and.w	r3, r3, #31
 8002dec:	fa22 f303 	lsr.w	r3, r2, r3
 8002df0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002df2:	4b0e      	ldr	r3, [pc, #56]	; (8002e2c <HAL_RCC_ClockConfig+0x358>)
 8002df4:	699b      	ldr	r3, [r3, #24]
 8002df6:	f003 030f 	and.w	r3, r3, #15
 8002dfa:	4a0d      	ldr	r2, [pc, #52]	; (8002e30 <HAL_RCC_ClockConfig+0x35c>)
 8002dfc:	5cd3      	ldrb	r3, [r2, r3]
 8002dfe:	f003 031f 	and.w	r3, r3, #31
 8002e02:	693a      	ldr	r2, [r7, #16]
 8002e04:	fa22 f303 	lsr.w	r3, r2, r3
 8002e08:	4a0a      	ldr	r2, [pc, #40]	; (8002e34 <HAL_RCC_ClockConfig+0x360>)
 8002e0a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002e0c:	4a0a      	ldr	r2, [pc, #40]	; (8002e38 <HAL_RCC_ClockConfig+0x364>)
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8002e12:	4b0a      	ldr	r3, [pc, #40]	; (8002e3c <HAL_RCC_ClockConfig+0x368>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4618      	mov	r0, r3
 8002e18:	f7fe f8e8 	bl	8000fec <HAL_InitTick>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002e20:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3718      	adds	r7, #24
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	58024400 	.word	0x58024400
 8002e30:	08006a68 	.word	0x08006a68
 8002e34:	24000004 	.word	0x24000004
 8002e38:	24000000 	.word	0x24000000
 8002e3c:	24000008 	.word	0x24000008

08002e40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b089      	sub	sp, #36	; 0x24
 8002e44:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e46:	4bb3      	ldr	r3, [pc, #716]	; (8003114 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e48:	691b      	ldr	r3, [r3, #16]
 8002e4a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e4e:	2b18      	cmp	r3, #24
 8002e50:	f200 8155 	bhi.w	80030fe <HAL_RCC_GetSysClockFreq+0x2be>
 8002e54:	a201      	add	r2, pc, #4	; (adr r2, 8002e5c <HAL_RCC_GetSysClockFreq+0x1c>)
 8002e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e5a:	bf00      	nop
 8002e5c:	08002ec1 	.word	0x08002ec1
 8002e60:	080030ff 	.word	0x080030ff
 8002e64:	080030ff 	.word	0x080030ff
 8002e68:	080030ff 	.word	0x080030ff
 8002e6c:	080030ff 	.word	0x080030ff
 8002e70:	080030ff 	.word	0x080030ff
 8002e74:	080030ff 	.word	0x080030ff
 8002e78:	080030ff 	.word	0x080030ff
 8002e7c:	08002ee7 	.word	0x08002ee7
 8002e80:	080030ff 	.word	0x080030ff
 8002e84:	080030ff 	.word	0x080030ff
 8002e88:	080030ff 	.word	0x080030ff
 8002e8c:	080030ff 	.word	0x080030ff
 8002e90:	080030ff 	.word	0x080030ff
 8002e94:	080030ff 	.word	0x080030ff
 8002e98:	080030ff 	.word	0x080030ff
 8002e9c:	08002eed 	.word	0x08002eed
 8002ea0:	080030ff 	.word	0x080030ff
 8002ea4:	080030ff 	.word	0x080030ff
 8002ea8:	080030ff 	.word	0x080030ff
 8002eac:	080030ff 	.word	0x080030ff
 8002eb0:	080030ff 	.word	0x080030ff
 8002eb4:	080030ff 	.word	0x080030ff
 8002eb8:	080030ff 	.word	0x080030ff
 8002ebc:	08002ef3 	.word	0x08002ef3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002ec0:	4b94      	ldr	r3, [pc, #592]	; (8003114 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0320 	and.w	r3, r3, #32
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d009      	beq.n	8002ee0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002ecc:	4b91      	ldr	r3, [pc, #580]	; (8003114 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	08db      	lsrs	r3, r3, #3
 8002ed2:	f003 0303 	and.w	r3, r3, #3
 8002ed6:	4a90      	ldr	r2, [pc, #576]	; (8003118 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002ed8:	fa22 f303 	lsr.w	r3, r2, r3
 8002edc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8002ede:	e111      	b.n	8003104 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002ee0:	4b8d      	ldr	r3, [pc, #564]	; (8003118 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002ee2:	61bb      	str	r3, [r7, #24]
    break;
 8002ee4:	e10e      	b.n	8003104 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002ee6:	4b8d      	ldr	r3, [pc, #564]	; (800311c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002ee8:	61bb      	str	r3, [r7, #24]
    break;
 8002eea:	e10b      	b.n	8003104 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002eec:	4b8c      	ldr	r3, [pc, #560]	; (8003120 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002eee:	61bb      	str	r3, [r7, #24]
    break;
 8002ef0:	e108      	b.n	8003104 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002ef2:	4b88      	ldr	r3, [pc, #544]	; (8003114 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ef6:	f003 0303 	and.w	r3, r3, #3
 8002efa:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002efc:	4b85      	ldr	r3, [pc, #532]	; (8003114 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f00:	091b      	lsrs	r3, r3, #4
 8002f02:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f06:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002f08:	4b82      	ldr	r3, [pc, #520]	; (8003114 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f0c:	f003 0301 	and.w	r3, r3, #1
 8002f10:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002f12:	4b80      	ldr	r3, [pc, #512]	; (8003114 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f16:	08db      	lsrs	r3, r3, #3
 8002f18:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002f1c:	68fa      	ldr	r2, [r7, #12]
 8002f1e:	fb02 f303 	mul.w	r3, r2, r3
 8002f22:	ee07 3a90 	vmov	s15, r3
 8002f26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f2a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	f000 80e1 	beq.w	80030f8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	f000 8083 	beq.w	8003044 <HAL_RCC_GetSysClockFreq+0x204>
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	2b02      	cmp	r3, #2
 8002f42:	f200 80a1 	bhi.w	8003088 <HAL_RCC_GetSysClockFreq+0x248>
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d003      	beq.n	8002f54 <HAL_RCC_GetSysClockFreq+0x114>
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d056      	beq.n	8003000 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002f52:	e099      	b.n	8003088 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002f54:	4b6f      	ldr	r3, [pc, #444]	; (8003114 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0320 	and.w	r3, r3, #32
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d02d      	beq.n	8002fbc <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002f60:	4b6c      	ldr	r3, [pc, #432]	; (8003114 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	08db      	lsrs	r3, r3, #3
 8002f66:	f003 0303 	and.w	r3, r3, #3
 8002f6a:	4a6b      	ldr	r2, [pc, #428]	; (8003118 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002f6c:	fa22 f303 	lsr.w	r3, r2, r3
 8002f70:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	ee07 3a90 	vmov	s15, r3
 8002f78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	ee07 3a90 	vmov	s15, r3
 8002f82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f8a:	4b62      	ldr	r3, [pc, #392]	; (8003114 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f92:	ee07 3a90 	vmov	s15, r3
 8002f96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f9a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f9e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003124 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002fa2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002fa6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002faa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002fae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002fb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fb6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8002fba:	e087      	b.n	80030cc <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	ee07 3a90 	vmov	s15, r3
 8002fc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fc6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003128 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002fca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002fce:	4b51      	ldr	r3, [pc, #324]	; (8003114 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fd6:	ee07 3a90 	vmov	s15, r3
 8002fda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002fde:	ed97 6a02 	vldr	s12, [r7, #8]
 8002fe2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003124 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002fe6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002fea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002fee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002ff2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ff6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ffa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002ffe:	e065      	b.n	80030cc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	ee07 3a90 	vmov	s15, r3
 8003006:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800300a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800312c <HAL_RCC_GetSysClockFreq+0x2ec>
 800300e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003012:	4b40      	ldr	r3, [pc, #256]	; (8003114 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003016:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800301a:	ee07 3a90 	vmov	s15, r3
 800301e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003022:	ed97 6a02 	vldr	s12, [r7, #8]
 8003026:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003124 <HAL_RCC_GetSysClockFreq+0x2e4>
 800302a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800302e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003032:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003036:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800303a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800303e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003042:	e043      	b.n	80030cc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	ee07 3a90 	vmov	s15, r3
 800304a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800304e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003130 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003052:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003056:	4b2f      	ldr	r3, [pc, #188]	; (8003114 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800305a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800305e:	ee07 3a90 	vmov	s15, r3
 8003062:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003066:	ed97 6a02 	vldr	s12, [r7, #8]
 800306a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003124 <HAL_RCC_GetSysClockFreq+0x2e4>
 800306e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003072:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003076:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800307a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800307e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003082:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003086:	e021      	b.n	80030cc <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	ee07 3a90 	vmov	s15, r3
 800308e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003092:	eddf 6a26 	vldr	s13, [pc, #152]	; 800312c <HAL_RCC_GetSysClockFreq+0x2ec>
 8003096:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800309a:	4b1e      	ldr	r3, [pc, #120]	; (8003114 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800309c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800309e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030a2:	ee07 3a90 	vmov	s15, r3
 80030a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80030ae:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003124 <HAL_RCC_GetSysClockFreq+0x2e4>
 80030b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80030b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80030be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80030c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80030ca:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80030cc:	4b11      	ldr	r3, [pc, #68]	; (8003114 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d0:	0a5b      	lsrs	r3, r3, #9
 80030d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80030d6:	3301      	adds	r3, #1
 80030d8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	ee07 3a90 	vmov	s15, r3
 80030e0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80030e4:	edd7 6a07 	vldr	s13, [r7, #28]
 80030e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80030ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80030f0:	ee17 3a90 	vmov	r3, s15
 80030f4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80030f6:	e005      	b.n	8003104 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80030f8:	2300      	movs	r3, #0
 80030fa:	61bb      	str	r3, [r7, #24]
    break;
 80030fc:	e002      	b.n	8003104 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80030fe:	4b07      	ldr	r3, [pc, #28]	; (800311c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003100:	61bb      	str	r3, [r7, #24]
    break;
 8003102:	bf00      	nop
  }

  return sysclockfreq;
 8003104:	69bb      	ldr	r3, [r7, #24]
}
 8003106:	4618      	mov	r0, r3
 8003108:	3724      	adds	r7, #36	; 0x24
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr
 8003112:	bf00      	nop
 8003114:	58024400 	.word	0x58024400
 8003118:	03d09000 	.word	0x03d09000
 800311c:	003d0900 	.word	0x003d0900
 8003120:	007a1200 	.word	0x007a1200
 8003124:	46000000 	.word	0x46000000
 8003128:	4c742400 	.word	0x4c742400
 800312c:	4a742400 	.word	0x4a742400
 8003130:	4af42400 	.word	0x4af42400

08003134 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b082      	sub	sp, #8
 8003138:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800313a:	f7ff fe81 	bl	8002e40 <HAL_RCC_GetSysClockFreq>
 800313e:	4602      	mov	r2, r0
 8003140:	4b10      	ldr	r3, [pc, #64]	; (8003184 <HAL_RCC_GetHCLKFreq+0x50>)
 8003142:	699b      	ldr	r3, [r3, #24]
 8003144:	0a1b      	lsrs	r3, r3, #8
 8003146:	f003 030f 	and.w	r3, r3, #15
 800314a:	490f      	ldr	r1, [pc, #60]	; (8003188 <HAL_RCC_GetHCLKFreq+0x54>)
 800314c:	5ccb      	ldrb	r3, [r1, r3]
 800314e:	f003 031f 	and.w	r3, r3, #31
 8003152:	fa22 f303 	lsr.w	r3, r2, r3
 8003156:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003158:	4b0a      	ldr	r3, [pc, #40]	; (8003184 <HAL_RCC_GetHCLKFreq+0x50>)
 800315a:	699b      	ldr	r3, [r3, #24]
 800315c:	f003 030f 	and.w	r3, r3, #15
 8003160:	4a09      	ldr	r2, [pc, #36]	; (8003188 <HAL_RCC_GetHCLKFreq+0x54>)
 8003162:	5cd3      	ldrb	r3, [r2, r3]
 8003164:	f003 031f 	and.w	r3, r3, #31
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	fa22 f303 	lsr.w	r3, r2, r3
 800316e:	4a07      	ldr	r2, [pc, #28]	; (800318c <HAL_RCC_GetHCLKFreq+0x58>)
 8003170:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003172:	4a07      	ldr	r2, [pc, #28]	; (8003190 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003178:	4b04      	ldr	r3, [pc, #16]	; (800318c <HAL_RCC_GetHCLKFreq+0x58>)
 800317a:	681b      	ldr	r3, [r3, #0]
}
 800317c:	4618      	mov	r0, r3
 800317e:	3708      	adds	r7, #8
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}
 8003184:	58024400 	.word	0x58024400
 8003188:	08006a68 	.word	0x08006a68
 800318c:	24000004 	.word	0x24000004
 8003190:	24000000 	.word	0x24000000

08003194 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003198:	f7ff ffcc 	bl	8003134 <HAL_RCC_GetHCLKFreq>
 800319c:	4602      	mov	r2, r0
 800319e:	4b06      	ldr	r3, [pc, #24]	; (80031b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031a0:	69db      	ldr	r3, [r3, #28]
 80031a2:	091b      	lsrs	r3, r3, #4
 80031a4:	f003 0307 	and.w	r3, r3, #7
 80031a8:	4904      	ldr	r1, [pc, #16]	; (80031bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80031aa:	5ccb      	ldrb	r3, [r1, r3]
 80031ac:	f003 031f 	and.w	r3, r3, #31
 80031b0:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	58024400 	.word	0x58024400
 80031bc:	08006a68 	.word	0x08006a68

080031c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80031c4:	f7ff ffb6 	bl	8003134 <HAL_RCC_GetHCLKFreq>
 80031c8:	4602      	mov	r2, r0
 80031ca:	4b06      	ldr	r3, [pc, #24]	; (80031e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031cc:	69db      	ldr	r3, [r3, #28]
 80031ce:	0a1b      	lsrs	r3, r3, #8
 80031d0:	f003 0307 	and.w	r3, r3, #7
 80031d4:	4904      	ldr	r1, [pc, #16]	; (80031e8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80031d6:	5ccb      	ldrb	r3, [r1, r3]
 80031d8:	f003 031f 	and.w	r3, r3, #31
 80031dc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	58024400 	.word	0x58024400
 80031e8:	08006a68 	.word	0x08006a68

080031ec <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b086      	sub	sp, #24
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80031f4:	2300      	movs	r3, #0
 80031f6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80031f8:	2300      	movs	r3, #0
 80031fa:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003204:	2b00      	cmp	r3, #0
 8003206:	d03f      	beq.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800320c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003210:	d02a      	beq.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003212:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003216:	d824      	bhi.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003218:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800321c:	d018      	beq.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800321e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003222:	d81e      	bhi.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003224:	2b00      	cmp	r3, #0
 8003226:	d003      	beq.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003228:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800322c:	d007      	beq.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x52>
 800322e:	e018      	b.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003230:	4ba3      	ldr	r3, [pc, #652]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003234:	4aa2      	ldr	r2, [pc, #648]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003236:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800323a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800323c:	e015      	b.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	3304      	adds	r3, #4
 8003242:	2102      	movs	r1, #2
 8003244:	4618      	mov	r0, r3
 8003246:	f001 f9d5 	bl	80045f4 <RCCEx_PLL2_Config>
 800324a:	4603      	mov	r3, r0
 800324c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800324e:	e00c      	b.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	3324      	adds	r3, #36	; 0x24
 8003254:	2102      	movs	r1, #2
 8003256:	4618      	mov	r0, r3
 8003258:	f001 fa7e 	bl	8004758 <RCCEx_PLL3_Config>
 800325c:	4603      	mov	r3, r0
 800325e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003260:	e003      	b.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	75fb      	strb	r3, [r7, #23]
      break;
 8003266:	e000      	b.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003268:	bf00      	nop
    }

    if(ret == HAL_OK)
 800326a:	7dfb      	ldrb	r3, [r7, #23]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d109      	bne.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003270:	4b93      	ldr	r3, [pc, #588]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003272:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003274:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800327c:	4990      	ldr	r1, [pc, #576]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800327e:	4313      	orrs	r3, r2
 8003280:	650b      	str	r3, [r1, #80]	; 0x50
 8003282:	e001      	b.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003284:	7dfb      	ldrb	r3, [r7, #23]
 8003286:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003290:	2b00      	cmp	r3, #0
 8003292:	d03d      	beq.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003298:	2b04      	cmp	r3, #4
 800329a:	d826      	bhi.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800329c:	a201      	add	r2, pc, #4	; (adr r2, 80032a4 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800329e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032a2:	bf00      	nop
 80032a4:	080032b9 	.word	0x080032b9
 80032a8:	080032c7 	.word	0x080032c7
 80032ac:	080032d9 	.word	0x080032d9
 80032b0:	080032f1 	.word	0x080032f1
 80032b4:	080032f1 	.word	0x080032f1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032b8:	4b81      	ldr	r3, [pc, #516]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80032ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032bc:	4a80      	ldr	r2, [pc, #512]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80032be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032c2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80032c4:	e015      	b.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	3304      	adds	r3, #4
 80032ca:	2100      	movs	r1, #0
 80032cc:	4618      	mov	r0, r3
 80032ce:	f001 f991 	bl	80045f4 <RCCEx_PLL2_Config>
 80032d2:	4603      	mov	r3, r0
 80032d4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80032d6:	e00c      	b.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	3324      	adds	r3, #36	; 0x24
 80032dc:	2100      	movs	r1, #0
 80032de:	4618      	mov	r0, r3
 80032e0:	f001 fa3a 	bl	8004758 <RCCEx_PLL3_Config>
 80032e4:	4603      	mov	r3, r0
 80032e6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80032e8:	e003      	b.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	75fb      	strb	r3, [r7, #23]
      break;
 80032ee:	e000      	b.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80032f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032f2:	7dfb      	ldrb	r3, [r7, #23]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d109      	bne.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80032f8:	4b71      	ldr	r3, [pc, #452]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80032fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032fc:	f023 0207 	bic.w	r2, r3, #7
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003304:	496e      	ldr	r1, [pc, #440]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003306:	4313      	orrs	r3, r2
 8003308:	650b      	str	r3, [r1, #80]	; 0x50
 800330a:	e001      	b.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800330c:	7dfb      	ldrb	r3, [r7, #23]
 800330e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003318:	2b00      	cmp	r3, #0
 800331a:	d042      	beq.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003320:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003324:	d02b      	beq.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x192>
 8003326:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800332a:	d825      	bhi.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800332c:	2bc0      	cmp	r3, #192	; 0xc0
 800332e:	d028      	beq.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003330:	2bc0      	cmp	r3, #192	; 0xc0
 8003332:	d821      	bhi.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003334:	2b80      	cmp	r3, #128	; 0x80
 8003336:	d016      	beq.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8003338:	2b80      	cmp	r3, #128	; 0x80
 800333a:	d81d      	bhi.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800333c:	2b00      	cmp	r3, #0
 800333e:	d002      	beq.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8003340:	2b40      	cmp	r3, #64	; 0x40
 8003342:	d007      	beq.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8003344:	e018      	b.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003346:	4b5e      	ldr	r3, [pc, #376]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800334a:	4a5d      	ldr	r2, [pc, #372]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800334c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003350:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003352:	e017      	b.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	3304      	adds	r3, #4
 8003358:	2100      	movs	r1, #0
 800335a:	4618      	mov	r0, r3
 800335c:	f001 f94a 	bl	80045f4 <RCCEx_PLL2_Config>
 8003360:	4603      	mov	r3, r0
 8003362:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003364:	e00e      	b.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	3324      	adds	r3, #36	; 0x24
 800336a:	2100      	movs	r1, #0
 800336c:	4618      	mov	r0, r3
 800336e:	f001 f9f3 	bl	8004758 <RCCEx_PLL3_Config>
 8003372:	4603      	mov	r3, r0
 8003374:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003376:	e005      	b.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	75fb      	strb	r3, [r7, #23]
      break;
 800337c:	e002      	b.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800337e:	bf00      	nop
 8003380:	e000      	b.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003382:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003384:	7dfb      	ldrb	r3, [r7, #23]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d109      	bne.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800338a:	4b4d      	ldr	r3, [pc, #308]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800338c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800338e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003396:	494a      	ldr	r1, [pc, #296]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003398:	4313      	orrs	r3, r2
 800339a:	650b      	str	r3, [r1, #80]	; 0x50
 800339c:	e001      	b.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800339e:	7dfb      	ldrb	r3, [r7, #23]
 80033a0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d049      	beq.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80033b4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80033b8:	d030      	beq.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x230>
 80033ba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80033be:	d82a      	bhi.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80033c0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80033c4:	d02c      	beq.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80033c6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80033ca:	d824      	bhi.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80033cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033d0:	d018      	beq.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80033d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033d6:	d81e      	bhi.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d003      	beq.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80033dc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80033e0:	d007      	beq.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80033e2:	e018      	b.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033e4:	4b36      	ldr	r3, [pc, #216]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80033e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e8:	4a35      	ldr	r2, [pc, #212]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80033ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033ee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80033f0:	e017      	b.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	3304      	adds	r3, #4
 80033f6:	2100      	movs	r1, #0
 80033f8:	4618      	mov	r0, r3
 80033fa:	f001 f8fb 	bl	80045f4 <RCCEx_PLL2_Config>
 80033fe:	4603      	mov	r3, r0
 8003400:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003402:	e00e      	b.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	3324      	adds	r3, #36	; 0x24
 8003408:	2100      	movs	r1, #0
 800340a:	4618      	mov	r0, r3
 800340c:	f001 f9a4 	bl	8004758 <RCCEx_PLL3_Config>
 8003410:	4603      	mov	r3, r0
 8003412:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003414:	e005      	b.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	75fb      	strb	r3, [r7, #23]
      break;
 800341a:	e002      	b.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800341c:	bf00      	nop
 800341e:	e000      	b.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003420:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003422:	7dfb      	ldrb	r3, [r7, #23]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d10a      	bne.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003428:	4b25      	ldr	r3, [pc, #148]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800342a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800342c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003436:	4922      	ldr	r1, [pc, #136]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003438:	4313      	orrs	r3, r2
 800343a:	658b      	str	r3, [r1, #88]	; 0x58
 800343c:	e001      	b.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800343e:	7dfb      	ldrb	r3, [r7, #23]
 8003440:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800344a:	2b00      	cmp	r3, #0
 800344c:	d04b      	beq.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003454:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003458:	d030      	beq.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800345a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800345e:	d82a      	bhi.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003460:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003464:	d02e      	beq.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8003466:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800346a:	d824      	bhi.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800346c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003470:	d018      	beq.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8003472:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003476:	d81e      	bhi.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003478:	2b00      	cmp	r3, #0
 800347a:	d003      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800347c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003480:	d007      	beq.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8003482:	e018      	b.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003484:	4b0e      	ldr	r3, [pc, #56]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003488:	4a0d      	ldr	r2, [pc, #52]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800348a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800348e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003490:	e019      	b.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	3304      	adds	r3, #4
 8003496:	2100      	movs	r1, #0
 8003498:	4618      	mov	r0, r3
 800349a:	f001 f8ab 	bl	80045f4 <RCCEx_PLL2_Config>
 800349e:	4603      	mov	r3, r0
 80034a0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80034a2:	e010      	b.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	3324      	adds	r3, #36	; 0x24
 80034a8:	2100      	movs	r1, #0
 80034aa:	4618      	mov	r0, r3
 80034ac:	f001 f954 	bl	8004758 <RCCEx_PLL3_Config>
 80034b0:	4603      	mov	r3, r0
 80034b2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80034b4:	e007      	b.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	75fb      	strb	r3, [r7, #23]
      break;
 80034ba:	e004      	b.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 80034bc:	bf00      	nop
 80034be:	e002      	b.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80034c0:	58024400 	.word	0x58024400
      break;
 80034c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034c6:	7dfb      	ldrb	r3, [r7, #23]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d10a      	bne.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80034cc:	4b99      	ldr	r3, [pc, #612]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80034ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034d0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80034da:	4996      	ldr	r1, [pc, #600]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80034dc:	4313      	orrs	r3, r2
 80034de:	658b      	str	r3, [r1, #88]	; 0x58
 80034e0:	e001      	b.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034e2:	7dfb      	ldrb	r3, [r7, #23]
 80034e4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d032      	beq.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034f6:	2b30      	cmp	r3, #48	; 0x30
 80034f8:	d01c      	beq.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x348>
 80034fa:	2b30      	cmp	r3, #48	; 0x30
 80034fc:	d817      	bhi.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x342>
 80034fe:	2b20      	cmp	r3, #32
 8003500:	d00c      	beq.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x330>
 8003502:	2b20      	cmp	r3, #32
 8003504:	d813      	bhi.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x342>
 8003506:	2b00      	cmp	r3, #0
 8003508:	d016      	beq.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800350a:	2b10      	cmp	r3, #16
 800350c:	d10f      	bne.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800350e:	4b89      	ldr	r3, [pc, #548]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003512:	4a88      	ldr	r2, [pc, #544]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003514:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003518:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800351a:	e00e      	b.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	3304      	adds	r3, #4
 8003520:	2102      	movs	r1, #2
 8003522:	4618      	mov	r0, r3
 8003524:	f001 f866 	bl	80045f4 <RCCEx_PLL2_Config>
 8003528:	4603      	mov	r3, r0
 800352a:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800352c:	e005      	b.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	75fb      	strb	r3, [r7, #23]
      break;
 8003532:	e002      	b.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8003534:	bf00      	nop
 8003536:	e000      	b.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8003538:	bf00      	nop
    }

    if(ret == HAL_OK)
 800353a:	7dfb      	ldrb	r3, [r7, #23]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d109      	bne.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003540:	4b7c      	ldr	r3, [pc, #496]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003542:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003544:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800354c:	4979      	ldr	r1, [pc, #484]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800354e:	4313      	orrs	r3, r2
 8003550:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003552:	e001      	b.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003554:	7dfb      	ldrb	r3, [r7, #23]
 8003556:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003560:	2b00      	cmp	r3, #0
 8003562:	d047      	beq.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003568:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800356c:	d030      	beq.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800356e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003572:	d82a      	bhi.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003574:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003578:	d02c      	beq.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800357a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800357e:	d824      	bhi.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003580:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003584:	d018      	beq.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8003586:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800358a:	d81e      	bhi.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800358c:	2b00      	cmp	r3, #0
 800358e:	d003      	beq.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8003590:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003594:	d007      	beq.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8003596:	e018      	b.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003598:	4b66      	ldr	r3, [pc, #408]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800359a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800359c:	4a65      	ldr	r2, [pc, #404]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800359e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80035a4:	e017      	b.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	3304      	adds	r3, #4
 80035aa:	2100      	movs	r1, #0
 80035ac:	4618      	mov	r0, r3
 80035ae:	f001 f821 	bl	80045f4 <RCCEx_PLL2_Config>
 80035b2:	4603      	mov	r3, r0
 80035b4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80035b6:	e00e      	b.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	3324      	adds	r3, #36	; 0x24
 80035bc:	2100      	movs	r1, #0
 80035be:	4618      	mov	r0, r3
 80035c0:	f001 f8ca 	bl	8004758 <RCCEx_PLL3_Config>
 80035c4:	4603      	mov	r3, r0
 80035c6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80035c8:	e005      	b.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	75fb      	strb	r3, [r7, #23]
      break;
 80035ce:	e002      	b.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80035d0:	bf00      	nop
 80035d2:	e000      	b.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80035d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035d6:	7dfb      	ldrb	r3, [r7, #23]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d109      	bne.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80035dc:	4b55      	ldr	r3, [pc, #340]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80035de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035e0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035e8:	4952      	ldr	r1, [pc, #328]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80035ea:	4313      	orrs	r3, r2
 80035ec:	650b      	str	r3, [r1, #80]	; 0x50
 80035ee:	e001      	b.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035f0:	7dfb      	ldrb	r3, [r7, #23]
 80035f2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d049      	beq.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003604:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003608:	d02e      	beq.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800360a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800360e:	d828      	bhi.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003610:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003614:	d02a      	beq.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x480>
 8003616:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800361a:	d822      	bhi.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800361c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003620:	d026      	beq.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8003622:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003626:	d81c      	bhi.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003628:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800362c:	d010      	beq.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x464>
 800362e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003632:	d816      	bhi.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003634:	2b00      	cmp	r3, #0
 8003636:	d01d      	beq.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8003638:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800363c:	d111      	bne.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	3304      	adds	r3, #4
 8003642:	2101      	movs	r1, #1
 8003644:	4618      	mov	r0, r3
 8003646:	f000 ffd5 	bl	80045f4 <RCCEx_PLL2_Config>
 800364a:	4603      	mov	r3, r0
 800364c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800364e:	e012      	b.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	3324      	adds	r3, #36	; 0x24
 8003654:	2101      	movs	r1, #1
 8003656:	4618      	mov	r0, r3
 8003658:	f001 f87e 	bl	8004758 <RCCEx_PLL3_Config>
 800365c:	4603      	mov	r3, r0
 800365e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003660:	e009      	b.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	75fb      	strb	r3, [r7, #23]
      break;
 8003666:	e006      	b.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003668:	bf00      	nop
 800366a:	e004      	b.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800366c:	bf00      	nop
 800366e:	e002      	b.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003670:	bf00      	nop
 8003672:	e000      	b.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003674:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003676:	7dfb      	ldrb	r3, [r7, #23]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d109      	bne.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800367c:	4b2d      	ldr	r3, [pc, #180]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800367e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003680:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003688:	492a      	ldr	r1, [pc, #168]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800368a:	4313      	orrs	r3, r2
 800368c:	650b      	str	r3, [r1, #80]	; 0x50
 800368e:	e001      	b.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003690:	7dfb      	ldrb	r3, [r7, #23]
 8003692:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800369c:	2b00      	cmp	r3, #0
 800369e:	d04d      	beq.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80036a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80036aa:	d02e      	beq.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80036ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80036b0:	d828      	bhi.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80036b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036b6:	d02a      	beq.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x522>
 80036b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036bc:	d822      	bhi.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80036be:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80036c2:	d026      	beq.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x526>
 80036c4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80036c8:	d81c      	bhi.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80036ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036ce:	d010      	beq.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x506>
 80036d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036d4:	d816      	bhi.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d01d      	beq.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80036da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80036de:	d111      	bne.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	3304      	adds	r3, #4
 80036e4:	2101      	movs	r1, #1
 80036e6:	4618      	mov	r0, r3
 80036e8:	f000 ff84 	bl	80045f4 <RCCEx_PLL2_Config>
 80036ec:	4603      	mov	r3, r0
 80036ee:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80036f0:	e012      	b.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	3324      	adds	r3, #36	; 0x24
 80036f6:	2101      	movs	r1, #1
 80036f8:	4618      	mov	r0, r3
 80036fa:	f001 f82d 	bl	8004758 <RCCEx_PLL3_Config>
 80036fe:	4603      	mov	r3, r0
 8003700:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003702:	e009      	b.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	75fb      	strb	r3, [r7, #23]
      break;
 8003708:	e006      	b.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800370a:	bf00      	nop
 800370c:	e004      	b.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800370e:	bf00      	nop
 8003710:	e002      	b.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003712:	bf00      	nop
 8003714:	e000      	b.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003716:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003718:	7dfb      	ldrb	r3, [r7, #23]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d10c      	bne.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800371e:	4b05      	ldr	r3, [pc, #20]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003722:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800372c:	4901      	ldr	r1, [pc, #4]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800372e:	4313      	orrs	r3, r2
 8003730:	658b      	str	r3, [r1, #88]	; 0x58
 8003732:	e003      	b.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x550>
 8003734:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003738:	7dfb      	ldrb	r3, [r7, #23]
 800373a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003744:	2b00      	cmp	r3, #0
 8003746:	d02f      	beq.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800374c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003750:	d00e      	beq.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8003752:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003756:	d814      	bhi.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8003758:	2b00      	cmp	r3, #0
 800375a:	d015      	beq.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 800375c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003760:	d10f      	bne.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003762:	4baf      	ldr	r3, [pc, #700]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003766:	4aae      	ldr	r2, [pc, #696]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003768:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800376c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800376e:	e00c      	b.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	3304      	adds	r3, #4
 8003774:	2101      	movs	r1, #1
 8003776:	4618      	mov	r0, r3
 8003778:	f000 ff3c 	bl	80045f4 <RCCEx_PLL2_Config>
 800377c:	4603      	mov	r3, r0
 800377e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003780:	e003      	b.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	75fb      	strb	r3, [r7, #23]
      break;
 8003786:	e000      	b.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8003788:	bf00      	nop
    }

    if(ret == HAL_OK)
 800378a:	7dfb      	ldrb	r3, [r7, #23]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d109      	bne.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003790:	4ba3      	ldr	r3, [pc, #652]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003792:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003794:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800379c:	49a0      	ldr	r1, [pc, #640]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800379e:	4313      	orrs	r3, r2
 80037a0:	650b      	str	r3, [r1, #80]	; 0x50
 80037a2:	e001      	b.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037a4:	7dfb      	ldrb	r3, [r7, #23]
 80037a6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d032      	beq.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037b8:	2b03      	cmp	r3, #3
 80037ba:	d81b      	bhi.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80037bc:	a201      	add	r2, pc, #4	; (adr r2, 80037c4 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 80037be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037c2:	bf00      	nop
 80037c4:	080037fb 	.word	0x080037fb
 80037c8:	080037d5 	.word	0x080037d5
 80037cc:	080037e3 	.word	0x080037e3
 80037d0:	080037fb 	.word	0x080037fb
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037d4:	4b92      	ldr	r3, [pc, #584]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80037d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d8:	4a91      	ldr	r2, [pc, #580]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80037da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037de:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80037e0:	e00c      	b.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	3304      	adds	r3, #4
 80037e6:	2102      	movs	r1, #2
 80037e8:	4618      	mov	r0, r3
 80037ea:	f000 ff03 	bl	80045f4 <RCCEx_PLL2_Config>
 80037ee:	4603      	mov	r3, r0
 80037f0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80037f2:	e003      	b.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	75fb      	strb	r3, [r7, #23]
      break;
 80037f8:	e000      	b.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80037fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037fc:	7dfb      	ldrb	r3, [r7, #23]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d109      	bne.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003802:	4b87      	ldr	r3, [pc, #540]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003806:	f023 0203 	bic.w	r2, r3, #3
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800380e:	4984      	ldr	r1, [pc, #528]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003810:	4313      	orrs	r3, r2
 8003812:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003814:	e001      	b.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003816:	7dfb      	ldrb	r3, [r7, #23]
 8003818:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003822:	2b00      	cmp	r3, #0
 8003824:	f000 8086 	beq.w	8003934 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003828:	4b7e      	ldr	r3, [pc, #504]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a7d      	ldr	r2, [pc, #500]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800382e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003832:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003834:	f7fd fc24 	bl	8001080 <HAL_GetTick>
 8003838:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800383a:	e009      	b.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800383c:	f7fd fc20 	bl	8001080 <HAL_GetTick>
 8003840:	4602      	mov	r2, r0
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	2b64      	cmp	r3, #100	; 0x64
 8003848:	d902      	bls.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800384a:	2303      	movs	r3, #3
 800384c:	75fb      	strb	r3, [r7, #23]
        break;
 800384e:	e005      	b.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003850:	4b74      	ldr	r3, [pc, #464]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003858:	2b00      	cmp	r3, #0
 800385a:	d0ef      	beq.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800385c:	7dfb      	ldrb	r3, [r7, #23]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d166      	bne.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003862:	4b6f      	ldr	r3, [pc, #444]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003864:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800386c:	4053      	eors	r3, r2
 800386e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003872:	2b00      	cmp	r3, #0
 8003874:	d013      	beq.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003876:	4b6a      	ldr	r3, [pc, #424]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800387a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800387e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003880:	4b67      	ldr	r3, [pc, #412]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003882:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003884:	4a66      	ldr	r2, [pc, #408]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003886:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800388a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800388c:	4b64      	ldr	r3, [pc, #400]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800388e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003890:	4a63      	ldr	r2, [pc, #396]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003892:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003896:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003898:	4a61      	ldr	r2, [pc, #388]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80038a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038a8:	d115      	bne.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038aa:	f7fd fbe9 	bl	8001080 <HAL_GetTick>
 80038ae:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80038b0:	e00b      	b.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038b2:	f7fd fbe5 	bl	8001080 <HAL_GetTick>
 80038b6:	4602      	mov	r2, r0
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	1ad3      	subs	r3, r2, r3
 80038bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d902      	bls.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80038c4:	2303      	movs	r3, #3
 80038c6:	75fb      	strb	r3, [r7, #23]
            break;
 80038c8:	e005      	b.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80038ca:	4b55      	ldr	r3, [pc, #340]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80038cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ce:	f003 0302 	and.w	r3, r3, #2
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d0ed      	beq.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80038d6:	7dfb      	ldrb	r3, [r7, #23]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d126      	bne.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80038e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80038ea:	d10d      	bne.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80038ec:	4b4c      	ldr	r3, [pc, #304]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80038ee:	691b      	ldr	r3, [r3, #16]
 80038f0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80038fa:	0919      	lsrs	r1, r3, #4
 80038fc:	4b4a      	ldr	r3, [pc, #296]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 80038fe:	400b      	ands	r3, r1
 8003900:	4947      	ldr	r1, [pc, #284]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003902:	4313      	orrs	r3, r2
 8003904:	610b      	str	r3, [r1, #16]
 8003906:	e005      	b.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8003908:	4b45      	ldr	r3, [pc, #276]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800390a:	691b      	ldr	r3, [r3, #16]
 800390c:	4a44      	ldr	r2, [pc, #272]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800390e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003912:	6113      	str	r3, [r2, #16]
 8003914:	4b42      	ldr	r3, [pc, #264]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003916:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800391e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003922:	493f      	ldr	r1, [pc, #252]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003924:	4313      	orrs	r3, r2
 8003926:	670b      	str	r3, [r1, #112]	; 0x70
 8003928:	e004      	b.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800392a:	7dfb      	ldrb	r3, [r7, #23]
 800392c:	75bb      	strb	r3, [r7, #22]
 800392e:	e001      	b.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003930:	7dfb      	ldrb	r3, [r7, #23]
 8003932:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0301 	and.w	r3, r3, #1
 800393c:	2b00      	cmp	r3, #0
 800393e:	f000 8085 	beq.w	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003946:	2b28      	cmp	r3, #40	; 0x28
 8003948:	d866      	bhi.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800394a:	a201      	add	r2, pc, #4	; (adr r2, 8003950 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800394c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003950:	08003a2d 	.word	0x08003a2d
 8003954:	08003a19 	.word	0x08003a19
 8003958:	08003a19 	.word	0x08003a19
 800395c:	08003a19 	.word	0x08003a19
 8003960:	08003a19 	.word	0x08003a19
 8003964:	08003a19 	.word	0x08003a19
 8003968:	08003a19 	.word	0x08003a19
 800396c:	08003a19 	.word	0x08003a19
 8003970:	080039f5 	.word	0x080039f5
 8003974:	08003a19 	.word	0x08003a19
 8003978:	08003a19 	.word	0x08003a19
 800397c:	08003a19 	.word	0x08003a19
 8003980:	08003a19 	.word	0x08003a19
 8003984:	08003a19 	.word	0x08003a19
 8003988:	08003a19 	.word	0x08003a19
 800398c:	08003a19 	.word	0x08003a19
 8003990:	08003a07 	.word	0x08003a07
 8003994:	08003a19 	.word	0x08003a19
 8003998:	08003a19 	.word	0x08003a19
 800399c:	08003a19 	.word	0x08003a19
 80039a0:	08003a19 	.word	0x08003a19
 80039a4:	08003a19 	.word	0x08003a19
 80039a8:	08003a19 	.word	0x08003a19
 80039ac:	08003a19 	.word	0x08003a19
 80039b0:	08003a2d 	.word	0x08003a2d
 80039b4:	08003a19 	.word	0x08003a19
 80039b8:	08003a19 	.word	0x08003a19
 80039bc:	08003a19 	.word	0x08003a19
 80039c0:	08003a19 	.word	0x08003a19
 80039c4:	08003a19 	.word	0x08003a19
 80039c8:	08003a19 	.word	0x08003a19
 80039cc:	08003a19 	.word	0x08003a19
 80039d0:	08003a2d 	.word	0x08003a2d
 80039d4:	08003a19 	.word	0x08003a19
 80039d8:	08003a19 	.word	0x08003a19
 80039dc:	08003a19 	.word	0x08003a19
 80039e0:	08003a19 	.word	0x08003a19
 80039e4:	08003a19 	.word	0x08003a19
 80039e8:	08003a19 	.word	0x08003a19
 80039ec:	08003a19 	.word	0x08003a19
 80039f0:	08003a2d 	.word	0x08003a2d
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	3304      	adds	r3, #4
 80039f8:	2101      	movs	r1, #1
 80039fa:	4618      	mov	r0, r3
 80039fc:	f000 fdfa 	bl	80045f4 <RCCEx_PLL2_Config>
 8003a00:	4603      	mov	r3, r0
 8003a02:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003a04:	e013      	b.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	3324      	adds	r3, #36	; 0x24
 8003a0a:	2101      	movs	r1, #1
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f000 fea3 	bl	8004758 <RCCEx_PLL3_Config>
 8003a12:	4603      	mov	r3, r0
 8003a14:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003a16:	e00a      	b.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	75fb      	strb	r3, [r7, #23]
      break;
 8003a1c:	e007      	b.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003a1e:	bf00      	nop
 8003a20:	58024400 	.word	0x58024400
 8003a24:	58024800 	.word	0x58024800
 8003a28:	00ffffcf 	.word	0x00ffffcf
      break;
 8003a2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a2e:	7dfb      	ldrb	r3, [r7, #23]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d109      	bne.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003a34:	4b96      	ldr	r3, [pc, #600]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003a36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a38:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a40:	4993      	ldr	r1, [pc, #588]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003a42:	4313      	orrs	r3, r2
 8003a44:	654b      	str	r3, [r1, #84]	; 0x54
 8003a46:	e001      	b.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a48:	7dfb      	ldrb	r3, [r7, #23]
 8003a4a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 0302 	and.w	r3, r3, #2
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d038      	beq.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a5c:	2b05      	cmp	r3, #5
 8003a5e:	d821      	bhi.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8003a60:	a201      	add	r2, pc, #4	; (adr r2, 8003a68 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8003a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a66:	bf00      	nop
 8003a68:	08003aab 	.word	0x08003aab
 8003a6c:	08003a81 	.word	0x08003a81
 8003a70:	08003a93 	.word	0x08003a93
 8003a74:	08003aab 	.word	0x08003aab
 8003a78:	08003aab 	.word	0x08003aab
 8003a7c:	08003aab 	.word	0x08003aab
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	3304      	adds	r3, #4
 8003a84:	2101      	movs	r1, #1
 8003a86:	4618      	mov	r0, r3
 8003a88:	f000 fdb4 	bl	80045f4 <RCCEx_PLL2_Config>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003a90:	e00c      	b.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	3324      	adds	r3, #36	; 0x24
 8003a96:	2101      	movs	r1, #1
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f000 fe5d 	bl	8004758 <RCCEx_PLL3_Config>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003aa2:	e003      	b.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	75fb      	strb	r3, [r7, #23]
      break;
 8003aa8:	e000      	b.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8003aaa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003aac:	7dfb      	ldrb	r3, [r7, #23]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d109      	bne.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003ab2:	4b77      	ldr	r3, [pc, #476]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003ab4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ab6:	f023 0207 	bic.w	r2, r3, #7
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003abe:	4974      	ldr	r1, [pc, #464]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	654b      	str	r3, [r1, #84]	; 0x54
 8003ac4:	e001      	b.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ac6:	7dfb      	ldrb	r3, [r7, #23]
 8003ac8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 0304 	and.w	r3, r3, #4
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d03a      	beq.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003adc:	2b05      	cmp	r3, #5
 8003ade:	d821      	bhi.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8003ae0:	a201      	add	r2, pc, #4	; (adr r2, 8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8003ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ae6:	bf00      	nop
 8003ae8:	08003b2b 	.word	0x08003b2b
 8003aec:	08003b01 	.word	0x08003b01
 8003af0:	08003b13 	.word	0x08003b13
 8003af4:	08003b2b 	.word	0x08003b2b
 8003af8:	08003b2b 	.word	0x08003b2b
 8003afc:	08003b2b 	.word	0x08003b2b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	3304      	adds	r3, #4
 8003b04:	2101      	movs	r1, #1
 8003b06:	4618      	mov	r0, r3
 8003b08:	f000 fd74 	bl	80045f4 <RCCEx_PLL2_Config>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003b10:	e00c      	b.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	3324      	adds	r3, #36	; 0x24
 8003b16:	2101      	movs	r1, #1
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f000 fe1d 	bl	8004758 <RCCEx_PLL3_Config>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003b22:	e003      	b.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	75fb      	strb	r3, [r7, #23]
      break;
 8003b28:	e000      	b.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8003b2a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b2c:	7dfb      	ldrb	r3, [r7, #23]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d10a      	bne.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003b32:	4b57      	ldr	r3, [pc, #348]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b36:	f023 0207 	bic.w	r2, r3, #7
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b40:	4953      	ldr	r1, [pc, #332]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003b42:	4313      	orrs	r3, r2
 8003b44:	658b      	str	r3, [r1, #88]	; 0x58
 8003b46:	e001      	b.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b48:	7dfb      	ldrb	r3, [r7, #23]
 8003b4a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 0320 	and.w	r3, r3, #32
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d04b      	beq.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b62:	d02e      	beq.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8003b64:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b68:	d828      	bhi.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003b6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b6e:	d02a      	beq.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8003b70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b74:	d822      	bhi.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003b76:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003b7a:	d026      	beq.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8003b7c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003b80:	d81c      	bhi.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003b82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b86:	d010      	beq.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8003b88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b8c:	d816      	bhi.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d01d      	beq.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8003b92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b96:	d111      	bne.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	3304      	adds	r3, #4
 8003b9c:	2100      	movs	r1, #0
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f000 fd28 	bl	80045f4 <RCCEx_PLL2_Config>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003ba8:	e012      	b.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	3324      	adds	r3, #36	; 0x24
 8003bae:	2102      	movs	r1, #2
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f000 fdd1 	bl	8004758 <RCCEx_PLL3_Config>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003bba:	e009      	b.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	75fb      	strb	r3, [r7, #23]
      break;
 8003bc0:	e006      	b.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003bc2:	bf00      	nop
 8003bc4:	e004      	b.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003bc6:	bf00      	nop
 8003bc8:	e002      	b.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003bca:	bf00      	nop
 8003bcc:	e000      	b.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003bce:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bd0:	7dfb      	ldrb	r3, [r7, #23]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d10a      	bne.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003bd6:	4b2e      	ldr	r3, [pc, #184]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003bd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bda:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003be4:	492a      	ldr	r1, [pc, #168]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003be6:	4313      	orrs	r3, r2
 8003be8:	654b      	str	r3, [r1, #84]	; 0x54
 8003bea:	e001      	b.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bec:	7dfb      	ldrb	r3, [r7, #23]
 8003bee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d04d      	beq.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c02:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003c06:	d02e      	beq.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8003c08:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003c0c:	d828      	bhi.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003c0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c12:	d02a      	beq.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8003c14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c18:	d822      	bhi.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003c1a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c1e:	d026      	beq.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8003c20:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c24:	d81c      	bhi.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003c26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c2a:	d010      	beq.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8003c2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c30:	d816      	bhi.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d01d      	beq.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8003c36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c3a:	d111      	bne.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	3304      	adds	r3, #4
 8003c40:	2100      	movs	r1, #0
 8003c42:	4618      	mov	r0, r3
 8003c44:	f000 fcd6 	bl	80045f4 <RCCEx_PLL2_Config>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003c4c:	e012      	b.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	3324      	adds	r3, #36	; 0x24
 8003c52:	2102      	movs	r1, #2
 8003c54:	4618      	mov	r0, r3
 8003c56:	f000 fd7f 	bl	8004758 <RCCEx_PLL3_Config>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003c5e:	e009      	b.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	75fb      	strb	r3, [r7, #23]
      break;
 8003c64:	e006      	b.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003c66:	bf00      	nop
 8003c68:	e004      	b.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003c6a:	bf00      	nop
 8003c6c:	e002      	b.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003c6e:	bf00      	nop
 8003c70:	e000      	b.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003c72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c74:	7dfb      	ldrb	r3, [r7, #23]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d10c      	bne.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003c7a:	4b05      	ldr	r3, [pc, #20]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003c7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c7e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c88:	4901      	ldr	r1, [pc, #4]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	658b      	str	r3, [r1, #88]	; 0x58
 8003c8e:	e003      	b.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8003c90:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c94:	7dfb      	ldrb	r3, [r7, #23]
 8003c96:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d04b      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003caa:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003cae:	d02e      	beq.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8003cb0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003cb4:	d828      	bhi.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003cb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cba:	d02a      	beq.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8003cbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cc0:	d822      	bhi.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003cc2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003cc6:	d026      	beq.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8003cc8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003ccc:	d81c      	bhi.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003cce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003cd2:	d010      	beq.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8003cd4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003cd8:	d816      	bhi.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d01d      	beq.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8003cde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ce2:	d111      	bne.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	3304      	adds	r3, #4
 8003ce8:	2100      	movs	r1, #0
 8003cea:	4618      	mov	r0, r3
 8003cec:	f000 fc82 	bl	80045f4 <RCCEx_PLL2_Config>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003cf4:	e012      	b.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	3324      	adds	r3, #36	; 0x24
 8003cfa:	2102      	movs	r1, #2
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f000 fd2b 	bl	8004758 <RCCEx_PLL3_Config>
 8003d02:	4603      	mov	r3, r0
 8003d04:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003d06:	e009      	b.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	75fb      	strb	r3, [r7, #23]
      break;
 8003d0c:	e006      	b.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003d0e:	bf00      	nop
 8003d10:	e004      	b.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003d12:	bf00      	nop
 8003d14:	e002      	b.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003d16:	bf00      	nop
 8003d18:	e000      	b.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003d1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d1c:	7dfb      	ldrb	r3, [r7, #23]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d10a      	bne.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003d22:	4b9d      	ldr	r3, [pc, #628]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d26:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d30:	4999      	ldr	r1, [pc, #612]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003d32:	4313      	orrs	r3, r2
 8003d34:	658b      	str	r3, [r1, #88]	; 0x58
 8003d36:	e001      	b.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d38:	7dfb      	ldrb	r3, [r7, #23]
 8003d3a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 0308 	and.w	r3, r3, #8
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d01a      	beq.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d52:	d10a      	bne.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	3324      	adds	r3, #36	; 0x24
 8003d58:	2102      	movs	r1, #2
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f000 fcfc 	bl	8004758 <RCCEx_PLL3_Config>
 8003d60:	4603      	mov	r3, r0
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d001      	beq.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003d6a:	4b8b      	ldr	r3, [pc, #556]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d6e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d78:	4987      	ldr	r1, [pc, #540]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 0310 	and.w	r3, r3, #16
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d01a      	beq.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d94:	d10a      	bne.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	3324      	adds	r3, #36	; 0x24
 8003d9a:	2102      	movs	r1, #2
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f000 fcdb 	bl	8004758 <RCCEx_PLL3_Config>
 8003da2:	4603      	mov	r3, r0
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d001      	beq.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003dac:	4b7a      	ldr	r3, [pc, #488]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003dae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003db0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dba:	4977      	ldr	r1, [pc, #476]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d034      	beq.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003dd2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003dd6:	d01d      	beq.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8003dd8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ddc:	d817      	bhi.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d003      	beq.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8003de2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003de6:	d009      	beq.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8003de8:	e011      	b.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	3304      	adds	r3, #4
 8003dee:	2100      	movs	r1, #0
 8003df0:	4618      	mov	r0, r3
 8003df2:	f000 fbff 	bl	80045f4 <RCCEx_PLL2_Config>
 8003df6:	4603      	mov	r3, r0
 8003df8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003dfa:	e00c      	b.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	3324      	adds	r3, #36	; 0x24
 8003e00:	2102      	movs	r1, #2
 8003e02:	4618      	mov	r0, r3
 8003e04:	f000 fca8 	bl	8004758 <RCCEx_PLL3_Config>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003e0c:	e003      	b.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	75fb      	strb	r3, [r7, #23]
      break;
 8003e12:	e000      	b.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8003e14:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e16:	7dfb      	ldrb	r3, [r7, #23]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d10a      	bne.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e1c:	4b5e      	ldr	r3, [pc, #376]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003e1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e20:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003e2a:	495b      	ldr	r1, [pc, #364]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	658b      	str	r3, [r1, #88]	; 0x58
 8003e30:	e001      	b.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e32:	7dfb      	ldrb	r3, [r7, #23]
 8003e34:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d033      	beq.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e48:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003e4c:	d01c      	beq.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8003e4e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003e52:	d816      	bhi.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8003e54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e58:	d003      	beq.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8003e5a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e5e:	d007      	beq.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8003e60:	e00f      	b.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e62:	4b4d      	ldr	r3, [pc, #308]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e66:	4a4c      	ldr	r2, [pc, #304]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003e68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e6c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8003e6e:	e00c      	b.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	3324      	adds	r3, #36	; 0x24
 8003e74:	2101      	movs	r1, #1
 8003e76:	4618      	mov	r0, r3
 8003e78:	f000 fc6e 	bl	8004758 <RCCEx_PLL3_Config>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8003e80:	e003      	b.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	75fb      	strb	r3, [r7, #23]
      break;
 8003e86:	e000      	b.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8003e88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e8a:	7dfb      	ldrb	r3, [r7, #23]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d10a      	bne.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e90:	4b41      	ldr	r3, [pc, #260]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003e92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e94:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e9e:	493e      	ldr	r1, [pc, #248]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	654b      	str	r3, [r1, #84]	; 0x54
 8003ea4:	e001      	b.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ea6:	7dfb      	ldrb	r3, [r7, #23]
 8003ea8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d029      	beq.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d003      	beq.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8003ebe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ec2:	d007      	beq.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8003ec4:	e00f      	b.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ec6:	4b34      	ldr	r3, [pc, #208]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eca:	4a33      	ldr	r2, [pc, #204]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003ecc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ed0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003ed2:	e00b      	b.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	3304      	adds	r3, #4
 8003ed8:	2102      	movs	r1, #2
 8003eda:	4618      	mov	r0, r3
 8003edc:	f000 fb8a 	bl	80045f4 <RCCEx_PLL2_Config>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003ee4:	e002      	b.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	75fb      	strb	r3, [r7, #23]
      break;
 8003eea:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003eec:	7dfb      	ldrb	r3, [r7, #23]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d109      	bne.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003ef2:	4b29      	ldr	r3, [pc, #164]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ef6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003efe:	4926      	ldr	r1, [pc, #152]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003f00:	4313      	orrs	r3, r2
 8003f02:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003f04:	e001      	b.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f06:	7dfb      	ldrb	r3, [r7, #23]
 8003f08:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d00a      	beq.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	3324      	adds	r3, #36	; 0x24
 8003f1a:	2102      	movs	r1, #2
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f000 fc1b 	bl	8004758 <RCCEx_PLL3_Config>
 8003f22:	4603      	mov	r3, r0
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d001      	beq.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d033      	beq.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f3c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f40:	d017      	beq.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8003f42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f46:	d811      	bhi.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8003f48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f4c:	d013      	beq.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8003f4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f52:	d80b      	bhi.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d010      	beq.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8003f58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f5c:	d106      	bne.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f5e:	4b0e      	ldr	r3, [pc, #56]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f62:	4a0d      	ldr	r2, [pc, #52]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003f64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f68:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8003f6a:	e007      	b.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	75fb      	strb	r3, [r7, #23]
      break;
 8003f70:	e004      	b.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8003f72:	bf00      	nop
 8003f74:	e002      	b.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8003f76:	bf00      	nop
 8003f78:	e000      	b.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8003f7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f7c:	7dfb      	ldrb	r3, [r7, #23]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d10c      	bne.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003f82:	4b05      	ldr	r3, [pc, #20]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003f84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f86:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f8e:	4902      	ldr	r1, [pc, #8]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003f90:	4313      	orrs	r3, r2
 8003f92:	654b      	str	r3, [r1, #84]	; 0x54
 8003f94:	e004      	b.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8003f96:	bf00      	nop
 8003f98:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f9c:	7dfb      	ldrb	r3, [r7, #23]
 8003f9e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d008      	beq.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003fac:	4b31      	ldr	r3, [pc, #196]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003fae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fb0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fb8:	492e      	ldr	r1, [pc, #184]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d009      	beq.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003fca:	4b2a      	ldr	r3, [pc, #168]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003fcc:	691b      	ldr	r3, [r3, #16]
 8003fce:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003fd8:	4926      	ldr	r1, [pc, #152]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d008      	beq.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003fea:	4b22      	ldr	r3, [pc, #136]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003fec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fee:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ff6:	491f      	ldr	r1, [pc, #124]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004004:	2b00      	cmp	r3, #0
 8004006:	d00d      	beq.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004008:	4b1a      	ldr	r3, [pc, #104]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800400a:	691b      	ldr	r3, [r3, #16]
 800400c:	4a19      	ldr	r2, [pc, #100]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800400e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004012:	6113      	str	r3, [r2, #16]
 8004014:	4b17      	ldr	r3, [pc, #92]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004016:	691a      	ldr	r2, [r3, #16]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800401e:	4915      	ldr	r1, [pc, #84]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004020:	4313      	orrs	r3, r2
 8004022:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	2b00      	cmp	r3, #0
 800402a:	da08      	bge.n	800403e <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800402c:	4b11      	ldr	r3, [pc, #68]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800402e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004030:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004038:	490e      	ldr	r1, [pc, #56]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800403a:	4313      	orrs	r3, r2
 800403c:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004046:	2b00      	cmp	r3, #0
 8004048:	d009      	beq.n	800405e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800404a:	4b0a      	ldr	r3, [pc, #40]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800404c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800404e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004058:	4906      	ldr	r1, [pc, #24]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800405a:	4313      	orrs	r3, r2
 800405c:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800405e:	7dbb      	ldrb	r3, [r7, #22]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d101      	bne.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8004064:	2300      	movs	r3, #0
 8004066:	e000      	b.n	800406a <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8004068:	2301      	movs	r3, #1
}
 800406a:	4618      	mov	r0, r3
 800406c:	3718      	adds	r7, #24
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	58024400 	.word	0x58024400

08004078 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800407c:	f7ff f85a 	bl	8003134 <HAL_RCC_GetHCLKFreq>
 8004080:	4602      	mov	r2, r0
 8004082:	4b06      	ldr	r3, [pc, #24]	; (800409c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004084:	6a1b      	ldr	r3, [r3, #32]
 8004086:	091b      	lsrs	r3, r3, #4
 8004088:	f003 0307 	and.w	r3, r3, #7
 800408c:	4904      	ldr	r1, [pc, #16]	; (80040a0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800408e:	5ccb      	ldrb	r3, [r1, r3]
 8004090:	f003 031f 	and.w	r3, r3, #31
 8004094:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004098:	4618      	mov	r0, r3
 800409a:	bd80      	pop	{r7, pc}
 800409c:	58024400 	.word	0x58024400
 80040a0:	08006a68 	.word	0x08006a68

080040a4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b089      	sub	sp, #36	; 0x24
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80040ac:	4ba1      	ldr	r3, [pc, #644]	; (8004334 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040b0:	f003 0303 	and.w	r3, r3, #3
 80040b4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80040b6:	4b9f      	ldr	r3, [pc, #636]	; (8004334 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ba:	0b1b      	lsrs	r3, r3, #12
 80040bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80040c0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80040c2:	4b9c      	ldr	r3, [pc, #624]	; (8004334 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c6:	091b      	lsrs	r3, r3, #4
 80040c8:	f003 0301 	and.w	r3, r3, #1
 80040cc:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80040ce:	4b99      	ldr	r3, [pc, #612]	; (8004334 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040d2:	08db      	lsrs	r3, r3, #3
 80040d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80040d8:	693a      	ldr	r2, [r7, #16]
 80040da:	fb02 f303 	mul.w	r3, r2, r3
 80040de:	ee07 3a90 	vmov	s15, r3
 80040e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040e6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	f000 8111 	beq.w	8004314 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80040f2:	69bb      	ldr	r3, [r7, #24]
 80040f4:	2b02      	cmp	r3, #2
 80040f6:	f000 8083 	beq.w	8004200 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80040fa:	69bb      	ldr	r3, [r7, #24]
 80040fc:	2b02      	cmp	r3, #2
 80040fe:	f200 80a1 	bhi.w	8004244 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004102:	69bb      	ldr	r3, [r7, #24]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d003      	beq.n	8004110 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004108:	69bb      	ldr	r3, [r7, #24]
 800410a:	2b01      	cmp	r3, #1
 800410c:	d056      	beq.n	80041bc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800410e:	e099      	b.n	8004244 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004110:	4b88      	ldr	r3, [pc, #544]	; (8004334 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 0320 	and.w	r3, r3, #32
 8004118:	2b00      	cmp	r3, #0
 800411a:	d02d      	beq.n	8004178 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800411c:	4b85      	ldr	r3, [pc, #532]	; (8004334 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	08db      	lsrs	r3, r3, #3
 8004122:	f003 0303 	and.w	r3, r3, #3
 8004126:	4a84      	ldr	r2, [pc, #528]	; (8004338 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004128:	fa22 f303 	lsr.w	r3, r2, r3
 800412c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	ee07 3a90 	vmov	s15, r3
 8004134:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	ee07 3a90 	vmov	s15, r3
 800413e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004142:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004146:	4b7b      	ldr	r3, [pc, #492]	; (8004334 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800414a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800414e:	ee07 3a90 	vmov	s15, r3
 8004152:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004156:	ed97 6a03 	vldr	s12, [r7, #12]
 800415a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800433c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800415e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004162:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004166:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800416a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800416e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004172:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004176:	e087      	b.n	8004288 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	ee07 3a90 	vmov	s15, r3
 800417e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004182:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004340 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004186:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800418a:	4b6a      	ldr	r3, [pc, #424]	; (8004334 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800418c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800418e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004192:	ee07 3a90 	vmov	s15, r3
 8004196:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800419a:	ed97 6a03 	vldr	s12, [r7, #12]
 800419e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800433c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80041a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80041ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041b6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80041ba:	e065      	b.n	8004288 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	ee07 3a90 	vmov	s15, r3
 80041c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041c6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004344 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80041ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041ce:	4b59      	ldr	r3, [pc, #356]	; (8004334 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80041d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041d6:	ee07 3a90 	vmov	s15, r3
 80041da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041de:	ed97 6a03 	vldr	s12, [r7, #12]
 80041e2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800433c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80041e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80041f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80041fe:	e043      	b.n	8004288 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	ee07 3a90 	vmov	s15, r3
 8004206:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800420a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004348 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800420e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004212:	4b48      	ldr	r3, [pc, #288]	; (8004334 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004216:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800421a:	ee07 3a90 	vmov	s15, r3
 800421e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004222:	ed97 6a03 	vldr	s12, [r7, #12]
 8004226:	eddf 5a45 	vldr	s11, [pc, #276]	; 800433c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800422a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800422e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004232:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004236:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800423a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800423e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004242:	e021      	b.n	8004288 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	ee07 3a90 	vmov	s15, r3
 800424a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800424e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004344 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004252:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004256:	4b37      	ldr	r3, [pc, #220]	; (8004334 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800425a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800425e:	ee07 3a90 	vmov	s15, r3
 8004262:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004266:	ed97 6a03 	vldr	s12, [r7, #12]
 800426a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800433c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800426e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004272:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004276:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800427a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800427e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004282:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004286:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004288:	4b2a      	ldr	r3, [pc, #168]	; (8004334 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800428a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800428c:	0a5b      	lsrs	r3, r3, #9
 800428e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004292:	ee07 3a90 	vmov	s15, r3
 8004296:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800429a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800429e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80042a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80042a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80042aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80042ae:	ee17 2a90 	vmov	r2, s15
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80042b6:	4b1f      	ldr	r3, [pc, #124]	; (8004334 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80042b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ba:	0c1b      	lsrs	r3, r3, #16
 80042bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042c0:	ee07 3a90 	vmov	s15, r3
 80042c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80042cc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80042d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80042d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80042d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80042dc:	ee17 2a90 	vmov	r2, s15
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80042e4:	4b13      	ldr	r3, [pc, #76]	; (8004334 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80042e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042e8:	0e1b      	lsrs	r3, r3, #24
 80042ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042ee:	ee07 3a90 	vmov	s15, r3
 80042f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80042fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80042fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8004302:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004306:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800430a:	ee17 2a90 	vmov	r2, s15
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004312:	e008      	b.n	8004326 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2200      	movs	r2, #0
 8004318:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	609a      	str	r2, [r3, #8]
}
 8004326:	bf00      	nop
 8004328:	3724      	adds	r7, #36	; 0x24
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr
 8004332:	bf00      	nop
 8004334:	58024400 	.word	0x58024400
 8004338:	03d09000 	.word	0x03d09000
 800433c:	46000000 	.word	0x46000000
 8004340:	4c742400 	.word	0x4c742400
 8004344:	4a742400 	.word	0x4a742400
 8004348:	4af42400 	.word	0x4af42400

0800434c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800434c:	b480      	push	{r7}
 800434e:	b089      	sub	sp, #36	; 0x24
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004354:	4ba1      	ldr	r3, [pc, #644]	; (80045dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004358:	f003 0303 	and.w	r3, r3, #3
 800435c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800435e:	4b9f      	ldr	r3, [pc, #636]	; (80045dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004362:	0d1b      	lsrs	r3, r3, #20
 8004364:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004368:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800436a:	4b9c      	ldr	r3, [pc, #624]	; (80045dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800436c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800436e:	0a1b      	lsrs	r3, r3, #8
 8004370:	f003 0301 	and.w	r3, r3, #1
 8004374:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004376:	4b99      	ldr	r3, [pc, #612]	; (80045dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800437a:	08db      	lsrs	r3, r3, #3
 800437c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004380:	693a      	ldr	r2, [r7, #16]
 8004382:	fb02 f303 	mul.w	r3, r2, r3
 8004386:	ee07 3a90 	vmov	s15, r3
 800438a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800438e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	2b00      	cmp	r3, #0
 8004396:	f000 8111 	beq.w	80045bc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800439a:	69bb      	ldr	r3, [r7, #24]
 800439c:	2b02      	cmp	r3, #2
 800439e:	f000 8083 	beq.w	80044a8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80043a2:	69bb      	ldr	r3, [r7, #24]
 80043a4:	2b02      	cmp	r3, #2
 80043a6:	f200 80a1 	bhi.w	80044ec <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80043aa:	69bb      	ldr	r3, [r7, #24]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d003      	beq.n	80043b8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80043b0:	69bb      	ldr	r3, [r7, #24]
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	d056      	beq.n	8004464 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80043b6:	e099      	b.n	80044ec <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80043b8:	4b88      	ldr	r3, [pc, #544]	; (80045dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f003 0320 	and.w	r3, r3, #32
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d02d      	beq.n	8004420 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80043c4:	4b85      	ldr	r3, [pc, #532]	; (80045dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	08db      	lsrs	r3, r3, #3
 80043ca:	f003 0303 	and.w	r3, r3, #3
 80043ce:	4a84      	ldr	r2, [pc, #528]	; (80045e0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80043d0:	fa22 f303 	lsr.w	r3, r2, r3
 80043d4:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	ee07 3a90 	vmov	s15, r3
 80043dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	ee07 3a90 	vmov	s15, r3
 80043e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043ee:	4b7b      	ldr	r3, [pc, #492]	; (80045dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043f6:	ee07 3a90 	vmov	s15, r3
 80043fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8004402:	eddf 5a78 	vldr	s11, [pc, #480]	; 80045e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004406:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800440a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800440e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004412:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004416:	ee67 7a27 	vmul.f32	s15, s14, s15
 800441a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800441e:	e087      	b.n	8004530 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	ee07 3a90 	vmov	s15, r3
 8004426:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800442a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80045e8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800442e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004432:	4b6a      	ldr	r3, [pc, #424]	; (80045dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004436:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800443a:	ee07 3a90 	vmov	s15, r3
 800443e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004442:	ed97 6a03 	vldr	s12, [r7, #12]
 8004446:	eddf 5a67 	vldr	s11, [pc, #412]	; 80045e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800444a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800444e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004452:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004456:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800445a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800445e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004462:	e065      	b.n	8004530 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	ee07 3a90 	vmov	s15, r3
 800446a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800446e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80045ec <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004472:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004476:	4b59      	ldr	r3, [pc, #356]	; (80045dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800447a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800447e:	ee07 3a90 	vmov	s15, r3
 8004482:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004486:	ed97 6a03 	vldr	s12, [r7, #12]
 800448a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80045e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800448e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004492:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004496:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800449a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800449e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044a2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80044a6:	e043      	b.n	8004530 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	ee07 3a90 	vmov	s15, r3
 80044ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044b2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80045f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80044b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044ba:	4b48      	ldr	r3, [pc, #288]	; (80045dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044c2:	ee07 3a90 	vmov	s15, r3
 80044c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80044ce:	eddf 5a45 	vldr	s11, [pc, #276]	; 80045e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80044d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80044ea:	e021      	b.n	8004530 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	ee07 3a90 	vmov	s15, r3
 80044f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044f6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80045ec <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80044fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044fe:	4b37      	ldr	r3, [pc, #220]	; (80045dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004502:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004506:	ee07 3a90 	vmov	s15, r3
 800450a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800450e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004512:	eddf 5a34 	vldr	s11, [pc, #208]	; 80045e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004516:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800451a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800451e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004522:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004526:	ee67 7a27 	vmul.f32	s15, s14, s15
 800452a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800452e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004530:	4b2a      	ldr	r3, [pc, #168]	; (80045dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004534:	0a5b      	lsrs	r3, r3, #9
 8004536:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800453a:	ee07 3a90 	vmov	s15, r3
 800453e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004542:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004546:	ee37 7a87 	vadd.f32	s14, s15, s14
 800454a:	edd7 6a07 	vldr	s13, [r7, #28]
 800454e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004552:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004556:	ee17 2a90 	vmov	r2, s15
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800455e:	4b1f      	ldr	r3, [pc, #124]	; (80045dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004562:	0c1b      	lsrs	r3, r3, #16
 8004564:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004568:	ee07 3a90 	vmov	s15, r3
 800456c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004570:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004574:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004578:	edd7 6a07 	vldr	s13, [r7, #28]
 800457c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004580:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004584:	ee17 2a90 	vmov	r2, s15
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800458c:	4b13      	ldr	r3, [pc, #76]	; (80045dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800458e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004590:	0e1b      	lsrs	r3, r3, #24
 8004592:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004596:	ee07 3a90 	vmov	s15, r3
 800459a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800459e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80045a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80045a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80045aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045b2:	ee17 2a90 	vmov	r2, s15
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80045ba:	e008      	b.n	80045ce <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2200      	movs	r2, #0
 80045c0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2200      	movs	r2, #0
 80045cc:	609a      	str	r2, [r3, #8]
}
 80045ce:	bf00      	nop
 80045d0:	3724      	adds	r7, #36	; 0x24
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr
 80045da:	bf00      	nop
 80045dc:	58024400 	.word	0x58024400
 80045e0:	03d09000 	.word	0x03d09000
 80045e4:	46000000 	.word	0x46000000
 80045e8:	4c742400 	.word	0x4c742400
 80045ec:	4a742400 	.word	0x4a742400
 80045f0:	4af42400 	.word	0x4af42400

080045f4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b084      	sub	sp, #16
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80045fe:	2300      	movs	r3, #0
 8004600:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004602:	4b53      	ldr	r3, [pc, #332]	; (8004750 <RCCEx_PLL2_Config+0x15c>)
 8004604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004606:	f003 0303 	and.w	r3, r3, #3
 800460a:	2b03      	cmp	r3, #3
 800460c:	d101      	bne.n	8004612 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	e099      	b.n	8004746 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004612:	4b4f      	ldr	r3, [pc, #316]	; (8004750 <RCCEx_PLL2_Config+0x15c>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a4e      	ldr	r2, [pc, #312]	; (8004750 <RCCEx_PLL2_Config+0x15c>)
 8004618:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800461c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800461e:	f7fc fd2f 	bl	8001080 <HAL_GetTick>
 8004622:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004624:	e008      	b.n	8004638 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004626:	f7fc fd2b 	bl	8001080 <HAL_GetTick>
 800462a:	4602      	mov	r2, r0
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	1ad3      	subs	r3, r2, r3
 8004630:	2b02      	cmp	r3, #2
 8004632:	d901      	bls.n	8004638 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004634:	2303      	movs	r3, #3
 8004636:	e086      	b.n	8004746 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004638:	4b45      	ldr	r3, [pc, #276]	; (8004750 <RCCEx_PLL2_Config+0x15c>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004640:	2b00      	cmp	r3, #0
 8004642:	d1f0      	bne.n	8004626 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004644:	4b42      	ldr	r3, [pc, #264]	; (8004750 <RCCEx_PLL2_Config+0x15c>)
 8004646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004648:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	031b      	lsls	r3, r3, #12
 8004652:	493f      	ldr	r1, [pc, #252]	; (8004750 <RCCEx_PLL2_Config+0x15c>)
 8004654:	4313      	orrs	r3, r2
 8004656:	628b      	str	r3, [r1, #40]	; 0x28
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	3b01      	subs	r3, #1
 800465e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	3b01      	subs	r3, #1
 8004668:	025b      	lsls	r3, r3, #9
 800466a:	b29b      	uxth	r3, r3
 800466c:	431a      	orrs	r2, r3
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	68db      	ldr	r3, [r3, #12]
 8004672:	3b01      	subs	r3, #1
 8004674:	041b      	lsls	r3, r3, #16
 8004676:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800467a:	431a      	orrs	r2, r3
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	691b      	ldr	r3, [r3, #16]
 8004680:	3b01      	subs	r3, #1
 8004682:	061b      	lsls	r3, r3, #24
 8004684:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004688:	4931      	ldr	r1, [pc, #196]	; (8004750 <RCCEx_PLL2_Config+0x15c>)
 800468a:	4313      	orrs	r3, r2
 800468c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800468e:	4b30      	ldr	r3, [pc, #192]	; (8004750 <RCCEx_PLL2_Config+0x15c>)
 8004690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004692:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	695b      	ldr	r3, [r3, #20]
 800469a:	492d      	ldr	r1, [pc, #180]	; (8004750 <RCCEx_PLL2_Config+0x15c>)
 800469c:	4313      	orrs	r3, r2
 800469e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80046a0:	4b2b      	ldr	r3, [pc, #172]	; (8004750 <RCCEx_PLL2_Config+0x15c>)
 80046a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a4:	f023 0220 	bic.w	r2, r3, #32
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	699b      	ldr	r3, [r3, #24]
 80046ac:	4928      	ldr	r1, [pc, #160]	; (8004750 <RCCEx_PLL2_Config+0x15c>)
 80046ae:	4313      	orrs	r3, r2
 80046b0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80046b2:	4b27      	ldr	r3, [pc, #156]	; (8004750 <RCCEx_PLL2_Config+0x15c>)
 80046b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b6:	4a26      	ldr	r2, [pc, #152]	; (8004750 <RCCEx_PLL2_Config+0x15c>)
 80046b8:	f023 0310 	bic.w	r3, r3, #16
 80046bc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80046be:	4b24      	ldr	r3, [pc, #144]	; (8004750 <RCCEx_PLL2_Config+0x15c>)
 80046c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046c2:	4b24      	ldr	r3, [pc, #144]	; (8004754 <RCCEx_PLL2_Config+0x160>)
 80046c4:	4013      	ands	r3, r2
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	69d2      	ldr	r2, [r2, #28]
 80046ca:	00d2      	lsls	r2, r2, #3
 80046cc:	4920      	ldr	r1, [pc, #128]	; (8004750 <RCCEx_PLL2_Config+0x15c>)
 80046ce:	4313      	orrs	r3, r2
 80046d0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80046d2:	4b1f      	ldr	r3, [pc, #124]	; (8004750 <RCCEx_PLL2_Config+0x15c>)
 80046d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d6:	4a1e      	ldr	r2, [pc, #120]	; (8004750 <RCCEx_PLL2_Config+0x15c>)
 80046d8:	f043 0310 	orr.w	r3, r3, #16
 80046dc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d106      	bne.n	80046f2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80046e4:	4b1a      	ldr	r3, [pc, #104]	; (8004750 <RCCEx_PLL2_Config+0x15c>)
 80046e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046e8:	4a19      	ldr	r2, [pc, #100]	; (8004750 <RCCEx_PLL2_Config+0x15c>)
 80046ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80046ee:	62d3      	str	r3, [r2, #44]	; 0x2c
 80046f0:	e00f      	b.n	8004712 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d106      	bne.n	8004706 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80046f8:	4b15      	ldr	r3, [pc, #84]	; (8004750 <RCCEx_PLL2_Config+0x15c>)
 80046fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046fc:	4a14      	ldr	r2, [pc, #80]	; (8004750 <RCCEx_PLL2_Config+0x15c>)
 80046fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004702:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004704:	e005      	b.n	8004712 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004706:	4b12      	ldr	r3, [pc, #72]	; (8004750 <RCCEx_PLL2_Config+0x15c>)
 8004708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800470a:	4a11      	ldr	r2, [pc, #68]	; (8004750 <RCCEx_PLL2_Config+0x15c>)
 800470c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004710:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004712:	4b0f      	ldr	r3, [pc, #60]	; (8004750 <RCCEx_PLL2_Config+0x15c>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a0e      	ldr	r2, [pc, #56]	; (8004750 <RCCEx_PLL2_Config+0x15c>)
 8004718:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800471c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800471e:	f7fc fcaf 	bl	8001080 <HAL_GetTick>
 8004722:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004724:	e008      	b.n	8004738 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004726:	f7fc fcab 	bl	8001080 <HAL_GetTick>
 800472a:	4602      	mov	r2, r0
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	1ad3      	subs	r3, r2, r3
 8004730:	2b02      	cmp	r3, #2
 8004732:	d901      	bls.n	8004738 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004734:	2303      	movs	r3, #3
 8004736:	e006      	b.n	8004746 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004738:	4b05      	ldr	r3, [pc, #20]	; (8004750 <RCCEx_PLL2_Config+0x15c>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004740:	2b00      	cmp	r3, #0
 8004742:	d0f0      	beq.n	8004726 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004744:	7bfb      	ldrb	r3, [r7, #15]
}
 8004746:	4618      	mov	r0, r3
 8004748:	3710      	adds	r7, #16
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}
 800474e:	bf00      	nop
 8004750:	58024400 	.word	0x58024400
 8004754:	ffff0007 	.word	0xffff0007

08004758 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b084      	sub	sp, #16
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
 8004760:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004762:	2300      	movs	r3, #0
 8004764:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004766:	4b53      	ldr	r3, [pc, #332]	; (80048b4 <RCCEx_PLL3_Config+0x15c>)
 8004768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800476a:	f003 0303 	and.w	r3, r3, #3
 800476e:	2b03      	cmp	r3, #3
 8004770:	d101      	bne.n	8004776 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	e099      	b.n	80048aa <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004776:	4b4f      	ldr	r3, [pc, #316]	; (80048b4 <RCCEx_PLL3_Config+0x15c>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a4e      	ldr	r2, [pc, #312]	; (80048b4 <RCCEx_PLL3_Config+0x15c>)
 800477c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004780:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004782:	f7fc fc7d 	bl	8001080 <HAL_GetTick>
 8004786:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004788:	e008      	b.n	800479c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800478a:	f7fc fc79 	bl	8001080 <HAL_GetTick>
 800478e:	4602      	mov	r2, r0
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	1ad3      	subs	r3, r2, r3
 8004794:	2b02      	cmp	r3, #2
 8004796:	d901      	bls.n	800479c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004798:	2303      	movs	r3, #3
 800479a:	e086      	b.n	80048aa <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800479c:	4b45      	ldr	r3, [pc, #276]	; (80048b4 <RCCEx_PLL3_Config+0x15c>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d1f0      	bne.n	800478a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80047a8:	4b42      	ldr	r3, [pc, #264]	; (80048b4 <RCCEx_PLL3_Config+0x15c>)
 80047aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ac:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	051b      	lsls	r3, r3, #20
 80047b6:	493f      	ldr	r1, [pc, #252]	; (80048b4 <RCCEx_PLL3_Config+0x15c>)
 80047b8:	4313      	orrs	r3, r2
 80047ba:	628b      	str	r3, [r1, #40]	; 0x28
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	3b01      	subs	r3, #1
 80047c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	3b01      	subs	r3, #1
 80047cc:	025b      	lsls	r3, r3, #9
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	431a      	orrs	r2, r3
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	68db      	ldr	r3, [r3, #12]
 80047d6:	3b01      	subs	r3, #1
 80047d8:	041b      	lsls	r3, r3, #16
 80047da:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80047de:	431a      	orrs	r2, r3
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	691b      	ldr	r3, [r3, #16]
 80047e4:	3b01      	subs	r3, #1
 80047e6:	061b      	lsls	r3, r3, #24
 80047e8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80047ec:	4931      	ldr	r1, [pc, #196]	; (80048b4 <RCCEx_PLL3_Config+0x15c>)
 80047ee:	4313      	orrs	r3, r2
 80047f0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80047f2:	4b30      	ldr	r3, [pc, #192]	; (80048b4 <RCCEx_PLL3_Config+0x15c>)
 80047f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	695b      	ldr	r3, [r3, #20]
 80047fe:	492d      	ldr	r1, [pc, #180]	; (80048b4 <RCCEx_PLL3_Config+0x15c>)
 8004800:	4313      	orrs	r3, r2
 8004802:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004804:	4b2b      	ldr	r3, [pc, #172]	; (80048b4 <RCCEx_PLL3_Config+0x15c>)
 8004806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004808:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	699b      	ldr	r3, [r3, #24]
 8004810:	4928      	ldr	r1, [pc, #160]	; (80048b4 <RCCEx_PLL3_Config+0x15c>)
 8004812:	4313      	orrs	r3, r2
 8004814:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004816:	4b27      	ldr	r3, [pc, #156]	; (80048b4 <RCCEx_PLL3_Config+0x15c>)
 8004818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800481a:	4a26      	ldr	r2, [pc, #152]	; (80048b4 <RCCEx_PLL3_Config+0x15c>)
 800481c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004820:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004822:	4b24      	ldr	r3, [pc, #144]	; (80048b4 <RCCEx_PLL3_Config+0x15c>)
 8004824:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004826:	4b24      	ldr	r3, [pc, #144]	; (80048b8 <RCCEx_PLL3_Config+0x160>)
 8004828:	4013      	ands	r3, r2
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	69d2      	ldr	r2, [r2, #28]
 800482e:	00d2      	lsls	r2, r2, #3
 8004830:	4920      	ldr	r1, [pc, #128]	; (80048b4 <RCCEx_PLL3_Config+0x15c>)
 8004832:	4313      	orrs	r3, r2
 8004834:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004836:	4b1f      	ldr	r3, [pc, #124]	; (80048b4 <RCCEx_PLL3_Config+0x15c>)
 8004838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800483a:	4a1e      	ldr	r2, [pc, #120]	; (80048b4 <RCCEx_PLL3_Config+0x15c>)
 800483c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004840:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d106      	bne.n	8004856 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004848:	4b1a      	ldr	r3, [pc, #104]	; (80048b4 <RCCEx_PLL3_Config+0x15c>)
 800484a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800484c:	4a19      	ldr	r2, [pc, #100]	; (80048b4 <RCCEx_PLL3_Config+0x15c>)
 800484e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004852:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004854:	e00f      	b.n	8004876 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	2b01      	cmp	r3, #1
 800485a:	d106      	bne.n	800486a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800485c:	4b15      	ldr	r3, [pc, #84]	; (80048b4 <RCCEx_PLL3_Config+0x15c>)
 800485e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004860:	4a14      	ldr	r2, [pc, #80]	; (80048b4 <RCCEx_PLL3_Config+0x15c>)
 8004862:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004866:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004868:	e005      	b.n	8004876 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800486a:	4b12      	ldr	r3, [pc, #72]	; (80048b4 <RCCEx_PLL3_Config+0x15c>)
 800486c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800486e:	4a11      	ldr	r2, [pc, #68]	; (80048b4 <RCCEx_PLL3_Config+0x15c>)
 8004870:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004874:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004876:	4b0f      	ldr	r3, [pc, #60]	; (80048b4 <RCCEx_PLL3_Config+0x15c>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a0e      	ldr	r2, [pc, #56]	; (80048b4 <RCCEx_PLL3_Config+0x15c>)
 800487c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004880:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004882:	f7fc fbfd 	bl	8001080 <HAL_GetTick>
 8004886:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004888:	e008      	b.n	800489c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800488a:	f7fc fbf9 	bl	8001080 <HAL_GetTick>
 800488e:	4602      	mov	r2, r0
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	1ad3      	subs	r3, r2, r3
 8004894:	2b02      	cmp	r3, #2
 8004896:	d901      	bls.n	800489c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004898:	2303      	movs	r3, #3
 800489a:	e006      	b.n	80048aa <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800489c:	4b05      	ldr	r3, [pc, #20]	; (80048b4 <RCCEx_PLL3_Config+0x15c>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d0f0      	beq.n	800488a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80048a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3710      	adds	r7, #16
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}
 80048b2:	bf00      	nop
 80048b4:	58024400 	.word	0x58024400
 80048b8:	ffff0007 	.word	0xffff0007

080048bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b082      	sub	sp, #8
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d101      	bne.n	80048ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	e042      	b.n	8004954 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d106      	bne.n	80048e6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2200      	movs	r2, #0
 80048dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	f7fc f9e9 	bl	8000cb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2224      	movs	r2, #36	; 0x24
 80048ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f022 0201 	bic.w	r2, r2, #1
 80048fc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f000 f8c2 	bl	8004a88 <UART_SetConfig>
 8004904:	4603      	mov	r3, r0
 8004906:	2b01      	cmp	r3, #1
 8004908:	d101      	bne.n	800490e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e022      	b.n	8004954 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004912:	2b00      	cmp	r3, #0
 8004914:	d002      	beq.n	800491c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f000 fe1e 	bl	8005558 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	685a      	ldr	r2, [r3, #4]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800492a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	689a      	ldr	r2, [r3, #8]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800493a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f042 0201 	orr.w	r2, r2, #1
 800494a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	f000 fea5 	bl	800569c <UART_CheckIdleState>
 8004952:	4603      	mov	r3, r0
}
 8004954:	4618      	mov	r0, r3
 8004956:	3708      	adds	r7, #8
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}

0800495c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b08a      	sub	sp, #40	; 0x28
 8004960:	af02      	add	r7, sp, #8
 8004962:	60f8      	str	r0, [r7, #12]
 8004964:	60b9      	str	r1, [r7, #8]
 8004966:	603b      	str	r3, [r7, #0]
 8004968:	4613      	mov	r3, r2
 800496a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004972:	2b20      	cmp	r3, #32
 8004974:	f040 8083 	bne.w	8004a7e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d002      	beq.n	8004984 <HAL_UART_Transmit+0x28>
 800497e:	88fb      	ldrh	r3, [r7, #6]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d101      	bne.n	8004988 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	e07b      	b.n	8004a80 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800498e:	2b01      	cmp	r3, #1
 8004990:	d101      	bne.n	8004996 <HAL_UART_Transmit+0x3a>
 8004992:	2302      	movs	r3, #2
 8004994:	e074      	b.n	8004a80 <HAL_UART_Transmit+0x124>
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2201      	movs	r2, #1
 800499a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2200      	movs	r2, #0
 80049a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2221      	movs	r2, #33	; 0x21
 80049aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80049ae:	f7fc fb67 	bl	8001080 <HAL_GetTick>
 80049b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	88fa      	ldrh	r2, [r7, #6]
 80049b8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	88fa      	ldrh	r2, [r7, #6]
 80049c0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049cc:	d108      	bne.n	80049e0 <HAL_UART_Transmit+0x84>
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	691b      	ldr	r3, [r3, #16]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d104      	bne.n	80049e0 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80049d6:	2300      	movs	r3, #0
 80049d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	61bb      	str	r3, [r7, #24]
 80049de:	e003      	b.n	80049e8 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80049e4:	2300      	movs	r3, #0
 80049e6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2200      	movs	r2, #0
 80049ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80049f0:	e02c      	b.n	8004a4c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	9300      	str	r3, [sp, #0]
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	2200      	movs	r2, #0
 80049fa:	2180      	movs	r1, #128	; 0x80
 80049fc:	68f8      	ldr	r0, [r7, #12]
 80049fe:	f000 fe98 	bl	8005732 <UART_WaitOnFlagUntilTimeout>
 8004a02:	4603      	mov	r3, r0
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d001      	beq.n	8004a0c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004a08:	2303      	movs	r3, #3
 8004a0a:	e039      	b.n	8004a80 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8004a0c:	69fb      	ldr	r3, [r7, #28]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d10b      	bne.n	8004a2a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a12:	69bb      	ldr	r3, [r7, #24]
 8004a14:	881b      	ldrh	r3, [r3, #0]
 8004a16:	461a      	mov	r2, r3
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a20:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004a22:	69bb      	ldr	r3, [r7, #24]
 8004a24:	3302      	adds	r3, #2
 8004a26:	61bb      	str	r3, [r7, #24]
 8004a28:	e007      	b.n	8004a3a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a2a:	69fb      	ldr	r3, [r7, #28]
 8004a2c:	781a      	ldrb	r2, [r3, #0]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004a34:	69fb      	ldr	r3, [r7, #28]
 8004a36:	3301      	adds	r3, #1
 8004a38:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	3b01      	subs	r3, #1
 8004a44:	b29a      	uxth	r2, r3
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004a52:	b29b      	uxth	r3, r3
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d1cc      	bne.n	80049f2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	9300      	str	r3, [sp, #0]
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	2140      	movs	r1, #64	; 0x40
 8004a62:	68f8      	ldr	r0, [r7, #12]
 8004a64:	f000 fe65 	bl	8005732 <UART_WaitOnFlagUntilTimeout>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d001      	beq.n	8004a72 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8004a6e:	2303      	movs	r3, #3
 8004a70:	e006      	b.n	8004a80 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2220      	movs	r2, #32
 8004a76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	e000      	b.n	8004a80 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8004a7e:	2302      	movs	r3, #2
  }
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	3720      	adds	r7, #32
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}

08004a88 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a8c:	b092      	sub	sp, #72	; 0x48
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a92:	2300      	movs	r3, #0
 8004a94:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	689a      	ldr	r2, [r3, #8]
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	691b      	ldr	r3, [r3, #16]
 8004aa0:	431a      	orrs	r2, r3
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	695b      	ldr	r3, [r3, #20]
 8004aa6:	431a      	orrs	r2, r3
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	69db      	ldr	r3, [r3, #28]
 8004aac:	4313      	orrs	r3, r2
 8004aae:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	4bbe      	ldr	r3, [pc, #760]	; (8004db0 <UART_SetConfig+0x328>)
 8004ab8:	4013      	ands	r3, r2
 8004aba:	697a      	ldr	r2, [r7, #20]
 8004abc:	6812      	ldr	r2, [r2, #0]
 8004abe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004ac0:	430b      	orrs	r3, r1
 8004ac2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	68da      	ldr	r2, [r3, #12]
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	430a      	orrs	r2, r1
 8004ad8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	699b      	ldr	r3, [r3, #24]
 8004ade:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4ab3      	ldr	r2, [pc, #716]	; (8004db4 <UART_SetConfig+0x32c>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d004      	beq.n	8004af4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	6a1b      	ldr	r3, [r3, #32]
 8004aee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004af0:	4313      	orrs	r3, r2
 8004af2:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	689a      	ldr	r2, [r3, #8]
 8004afa:	4baf      	ldr	r3, [pc, #700]	; (8004db8 <UART_SetConfig+0x330>)
 8004afc:	4013      	ands	r3, r2
 8004afe:	697a      	ldr	r2, [r7, #20]
 8004b00:	6812      	ldr	r2, [r2, #0]
 8004b02:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004b04:	430b      	orrs	r3, r1
 8004b06:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b0e:	f023 010f 	bic.w	r1, r3, #15
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	430a      	orrs	r2, r1
 8004b1c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4aa6      	ldr	r2, [pc, #664]	; (8004dbc <UART_SetConfig+0x334>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d177      	bne.n	8004c18 <UART_SetConfig+0x190>
 8004b28:	4ba5      	ldr	r3, [pc, #660]	; (8004dc0 <UART_SetConfig+0x338>)
 8004b2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b2c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b30:	2b28      	cmp	r3, #40	; 0x28
 8004b32:	d86d      	bhi.n	8004c10 <UART_SetConfig+0x188>
 8004b34:	a201      	add	r2, pc, #4	; (adr r2, 8004b3c <UART_SetConfig+0xb4>)
 8004b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b3a:	bf00      	nop
 8004b3c:	08004be1 	.word	0x08004be1
 8004b40:	08004c11 	.word	0x08004c11
 8004b44:	08004c11 	.word	0x08004c11
 8004b48:	08004c11 	.word	0x08004c11
 8004b4c:	08004c11 	.word	0x08004c11
 8004b50:	08004c11 	.word	0x08004c11
 8004b54:	08004c11 	.word	0x08004c11
 8004b58:	08004c11 	.word	0x08004c11
 8004b5c:	08004be9 	.word	0x08004be9
 8004b60:	08004c11 	.word	0x08004c11
 8004b64:	08004c11 	.word	0x08004c11
 8004b68:	08004c11 	.word	0x08004c11
 8004b6c:	08004c11 	.word	0x08004c11
 8004b70:	08004c11 	.word	0x08004c11
 8004b74:	08004c11 	.word	0x08004c11
 8004b78:	08004c11 	.word	0x08004c11
 8004b7c:	08004bf1 	.word	0x08004bf1
 8004b80:	08004c11 	.word	0x08004c11
 8004b84:	08004c11 	.word	0x08004c11
 8004b88:	08004c11 	.word	0x08004c11
 8004b8c:	08004c11 	.word	0x08004c11
 8004b90:	08004c11 	.word	0x08004c11
 8004b94:	08004c11 	.word	0x08004c11
 8004b98:	08004c11 	.word	0x08004c11
 8004b9c:	08004bf9 	.word	0x08004bf9
 8004ba0:	08004c11 	.word	0x08004c11
 8004ba4:	08004c11 	.word	0x08004c11
 8004ba8:	08004c11 	.word	0x08004c11
 8004bac:	08004c11 	.word	0x08004c11
 8004bb0:	08004c11 	.word	0x08004c11
 8004bb4:	08004c11 	.word	0x08004c11
 8004bb8:	08004c11 	.word	0x08004c11
 8004bbc:	08004c01 	.word	0x08004c01
 8004bc0:	08004c11 	.word	0x08004c11
 8004bc4:	08004c11 	.word	0x08004c11
 8004bc8:	08004c11 	.word	0x08004c11
 8004bcc:	08004c11 	.word	0x08004c11
 8004bd0:	08004c11 	.word	0x08004c11
 8004bd4:	08004c11 	.word	0x08004c11
 8004bd8:	08004c11 	.word	0x08004c11
 8004bdc:	08004c09 	.word	0x08004c09
 8004be0:	2301      	movs	r3, #1
 8004be2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004be6:	e222      	b.n	800502e <UART_SetConfig+0x5a6>
 8004be8:	2304      	movs	r3, #4
 8004bea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004bee:	e21e      	b.n	800502e <UART_SetConfig+0x5a6>
 8004bf0:	2308      	movs	r3, #8
 8004bf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004bf6:	e21a      	b.n	800502e <UART_SetConfig+0x5a6>
 8004bf8:	2310      	movs	r3, #16
 8004bfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004bfe:	e216      	b.n	800502e <UART_SetConfig+0x5a6>
 8004c00:	2320      	movs	r3, #32
 8004c02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c06:	e212      	b.n	800502e <UART_SetConfig+0x5a6>
 8004c08:	2340      	movs	r3, #64	; 0x40
 8004c0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c0e:	e20e      	b.n	800502e <UART_SetConfig+0x5a6>
 8004c10:	2380      	movs	r3, #128	; 0x80
 8004c12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c16:	e20a      	b.n	800502e <UART_SetConfig+0x5a6>
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a69      	ldr	r2, [pc, #420]	; (8004dc4 <UART_SetConfig+0x33c>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d130      	bne.n	8004c84 <UART_SetConfig+0x1fc>
 8004c22:	4b67      	ldr	r3, [pc, #412]	; (8004dc0 <UART_SetConfig+0x338>)
 8004c24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c26:	f003 0307 	and.w	r3, r3, #7
 8004c2a:	2b05      	cmp	r3, #5
 8004c2c:	d826      	bhi.n	8004c7c <UART_SetConfig+0x1f4>
 8004c2e:	a201      	add	r2, pc, #4	; (adr r2, 8004c34 <UART_SetConfig+0x1ac>)
 8004c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c34:	08004c4d 	.word	0x08004c4d
 8004c38:	08004c55 	.word	0x08004c55
 8004c3c:	08004c5d 	.word	0x08004c5d
 8004c40:	08004c65 	.word	0x08004c65
 8004c44:	08004c6d 	.word	0x08004c6d
 8004c48:	08004c75 	.word	0x08004c75
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c52:	e1ec      	b.n	800502e <UART_SetConfig+0x5a6>
 8004c54:	2304      	movs	r3, #4
 8004c56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c5a:	e1e8      	b.n	800502e <UART_SetConfig+0x5a6>
 8004c5c:	2308      	movs	r3, #8
 8004c5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c62:	e1e4      	b.n	800502e <UART_SetConfig+0x5a6>
 8004c64:	2310      	movs	r3, #16
 8004c66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c6a:	e1e0      	b.n	800502e <UART_SetConfig+0x5a6>
 8004c6c:	2320      	movs	r3, #32
 8004c6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c72:	e1dc      	b.n	800502e <UART_SetConfig+0x5a6>
 8004c74:	2340      	movs	r3, #64	; 0x40
 8004c76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c7a:	e1d8      	b.n	800502e <UART_SetConfig+0x5a6>
 8004c7c:	2380      	movs	r3, #128	; 0x80
 8004c7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c82:	e1d4      	b.n	800502e <UART_SetConfig+0x5a6>
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a4f      	ldr	r2, [pc, #316]	; (8004dc8 <UART_SetConfig+0x340>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d130      	bne.n	8004cf0 <UART_SetConfig+0x268>
 8004c8e:	4b4c      	ldr	r3, [pc, #304]	; (8004dc0 <UART_SetConfig+0x338>)
 8004c90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c92:	f003 0307 	and.w	r3, r3, #7
 8004c96:	2b05      	cmp	r3, #5
 8004c98:	d826      	bhi.n	8004ce8 <UART_SetConfig+0x260>
 8004c9a:	a201      	add	r2, pc, #4	; (adr r2, 8004ca0 <UART_SetConfig+0x218>)
 8004c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ca0:	08004cb9 	.word	0x08004cb9
 8004ca4:	08004cc1 	.word	0x08004cc1
 8004ca8:	08004cc9 	.word	0x08004cc9
 8004cac:	08004cd1 	.word	0x08004cd1
 8004cb0:	08004cd9 	.word	0x08004cd9
 8004cb4:	08004ce1 	.word	0x08004ce1
 8004cb8:	2300      	movs	r3, #0
 8004cba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004cbe:	e1b6      	b.n	800502e <UART_SetConfig+0x5a6>
 8004cc0:	2304      	movs	r3, #4
 8004cc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004cc6:	e1b2      	b.n	800502e <UART_SetConfig+0x5a6>
 8004cc8:	2308      	movs	r3, #8
 8004cca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004cce:	e1ae      	b.n	800502e <UART_SetConfig+0x5a6>
 8004cd0:	2310      	movs	r3, #16
 8004cd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004cd6:	e1aa      	b.n	800502e <UART_SetConfig+0x5a6>
 8004cd8:	2320      	movs	r3, #32
 8004cda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004cde:	e1a6      	b.n	800502e <UART_SetConfig+0x5a6>
 8004ce0:	2340      	movs	r3, #64	; 0x40
 8004ce2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ce6:	e1a2      	b.n	800502e <UART_SetConfig+0x5a6>
 8004ce8:	2380      	movs	r3, #128	; 0x80
 8004cea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004cee:	e19e      	b.n	800502e <UART_SetConfig+0x5a6>
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a35      	ldr	r2, [pc, #212]	; (8004dcc <UART_SetConfig+0x344>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d130      	bne.n	8004d5c <UART_SetConfig+0x2d4>
 8004cfa:	4b31      	ldr	r3, [pc, #196]	; (8004dc0 <UART_SetConfig+0x338>)
 8004cfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cfe:	f003 0307 	and.w	r3, r3, #7
 8004d02:	2b05      	cmp	r3, #5
 8004d04:	d826      	bhi.n	8004d54 <UART_SetConfig+0x2cc>
 8004d06:	a201      	add	r2, pc, #4	; (adr r2, 8004d0c <UART_SetConfig+0x284>)
 8004d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d0c:	08004d25 	.word	0x08004d25
 8004d10:	08004d2d 	.word	0x08004d2d
 8004d14:	08004d35 	.word	0x08004d35
 8004d18:	08004d3d 	.word	0x08004d3d
 8004d1c:	08004d45 	.word	0x08004d45
 8004d20:	08004d4d 	.word	0x08004d4d
 8004d24:	2300      	movs	r3, #0
 8004d26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d2a:	e180      	b.n	800502e <UART_SetConfig+0x5a6>
 8004d2c:	2304      	movs	r3, #4
 8004d2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d32:	e17c      	b.n	800502e <UART_SetConfig+0x5a6>
 8004d34:	2308      	movs	r3, #8
 8004d36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d3a:	e178      	b.n	800502e <UART_SetConfig+0x5a6>
 8004d3c:	2310      	movs	r3, #16
 8004d3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d42:	e174      	b.n	800502e <UART_SetConfig+0x5a6>
 8004d44:	2320      	movs	r3, #32
 8004d46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d4a:	e170      	b.n	800502e <UART_SetConfig+0x5a6>
 8004d4c:	2340      	movs	r3, #64	; 0x40
 8004d4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d52:	e16c      	b.n	800502e <UART_SetConfig+0x5a6>
 8004d54:	2380      	movs	r3, #128	; 0x80
 8004d56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d5a:	e168      	b.n	800502e <UART_SetConfig+0x5a6>
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a1b      	ldr	r2, [pc, #108]	; (8004dd0 <UART_SetConfig+0x348>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d142      	bne.n	8004dec <UART_SetConfig+0x364>
 8004d66:	4b16      	ldr	r3, [pc, #88]	; (8004dc0 <UART_SetConfig+0x338>)
 8004d68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d6a:	f003 0307 	and.w	r3, r3, #7
 8004d6e:	2b05      	cmp	r3, #5
 8004d70:	d838      	bhi.n	8004de4 <UART_SetConfig+0x35c>
 8004d72:	a201      	add	r2, pc, #4	; (adr r2, 8004d78 <UART_SetConfig+0x2f0>)
 8004d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d78:	08004d91 	.word	0x08004d91
 8004d7c:	08004d99 	.word	0x08004d99
 8004d80:	08004da1 	.word	0x08004da1
 8004d84:	08004da9 	.word	0x08004da9
 8004d88:	08004dd5 	.word	0x08004dd5
 8004d8c:	08004ddd 	.word	0x08004ddd
 8004d90:	2300      	movs	r3, #0
 8004d92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d96:	e14a      	b.n	800502e <UART_SetConfig+0x5a6>
 8004d98:	2304      	movs	r3, #4
 8004d9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d9e:	e146      	b.n	800502e <UART_SetConfig+0x5a6>
 8004da0:	2308      	movs	r3, #8
 8004da2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004da6:	e142      	b.n	800502e <UART_SetConfig+0x5a6>
 8004da8:	2310      	movs	r3, #16
 8004daa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004dae:	e13e      	b.n	800502e <UART_SetConfig+0x5a6>
 8004db0:	cfff69f3 	.word	0xcfff69f3
 8004db4:	58000c00 	.word	0x58000c00
 8004db8:	11fff4ff 	.word	0x11fff4ff
 8004dbc:	40011000 	.word	0x40011000
 8004dc0:	58024400 	.word	0x58024400
 8004dc4:	40004400 	.word	0x40004400
 8004dc8:	40004800 	.word	0x40004800
 8004dcc:	40004c00 	.word	0x40004c00
 8004dd0:	40005000 	.word	0x40005000
 8004dd4:	2320      	movs	r3, #32
 8004dd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004dda:	e128      	b.n	800502e <UART_SetConfig+0x5a6>
 8004ddc:	2340      	movs	r3, #64	; 0x40
 8004dde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004de2:	e124      	b.n	800502e <UART_SetConfig+0x5a6>
 8004de4:	2380      	movs	r3, #128	; 0x80
 8004de6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004dea:	e120      	b.n	800502e <UART_SetConfig+0x5a6>
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4acb      	ldr	r2, [pc, #812]	; (8005120 <UART_SetConfig+0x698>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d176      	bne.n	8004ee4 <UART_SetConfig+0x45c>
 8004df6:	4bcb      	ldr	r3, [pc, #812]	; (8005124 <UART_SetConfig+0x69c>)
 8004df8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dfa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004dfe:	2b28      	cmp	r3, #40	; 0x28
 8004e00:	d86c      	bhi.n	8004edc <UART_SetConfig+0x454>
 8004e02:	a201      	add	r2, pc, #4	; (adr r2, 8004e08 <UART_SetConfig+0x380>)
 8004e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e08:	08004ead 	.word	0x08004ead
 8004e0c:	08004edd 	.word	0x08004edd
 8004e10:	08004edd 	.word	0x08004edd
 8004e14:	08004edd 	.word	0x08004edd
 8004e18:	08004edd 	.word	0x08004edd
 8004e1c:	08004edd 	.word	0x08004edd
 8004e20:	08004edd 	.word	0x08004edd
 8004e24:	08004edd 	.word	0x08004edd
 8004e28:	08004eb5 	.word	0x08004eb5
 8004e2c:	08004edd 	.word	0x08004edd
 8004e30:	08004edd 	.word	0x08004edd
 8004e34:	08004edd 	.word	0x08004edd
 8004e38:	08004edd 	.word	0x08004edd
 8004e3c:	08004edd 	.word	0x08004edd
 8004e40:	08004edd 	.word	0x08004edd
 8004e44:	08004edd 	.word	0x08004edd
 8004e48:	08004ebd 	.word	0x08004ebd
 8004e4c:	08004edd 	.word	0x08004edd
 8004e50:	08004edd 	.word	0x08004edd
 8004e54:	08004edd 	.word	0x08004edd
 8004e58:	08004edd 	.word	0x08004edd
 8004e5c:	08004edd 	.word	0x08004edd
 8004e60:	08004edd 	.word	0x08004edd
 8004e64:	08004edd 	.word	0x08004edd
 8004e68:	08004ec5 	.word	0x08004ec5
 8004e6c:	08004edd 	.word	0x08004edd
 8004e70:	08004edd 	.word	0x08004edd
 8004e74:	08004edd 	.word	0x08004edd
 8004e78:	08004edd 	.word	0x08004edd
 8004e7c:	08004edd 	.word	0x08004edd
 8004e80:	08004edd 	.word	0x08004edd
 8004e84:	08004edd 	.word	0x08004edd
 8004e88:	08004ecd 	.word	0x08004ecd
 8004e8c:	08004edd 	.word	0x08004edd
 8004e90:	08004edd 	.word	0x08004edd
 8004e94:	08004edd 	.word	0x08004edd
 8004e98:	08004edd 	.word	0x08004edd
 8004e9c:	08004edd 	.word	0x08004edd
 8004ea0:	08004edd 	.word	0x08004edd
 8004ea4:	08004edd 	.word	0x08004edd
 8004ea8:	08004ed5 	.word	0x08004ed5
 8004eac:	2301      	movs	r3, #1
 8004eae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004eb2:	e0bc      	b.n	800502e <UART_SetConfig+0x5a6>
 8004eb4:	2304      	movs	r3, #4
 8004eb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004eba:	e0b8      	b.n	800502e <UART_SetConfig+0x5a6>
 8004ebc:	2308      	movs	r3, #8
 8004ebe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ec2:	e0b4      	b.n	800502e <UART_SetConfig+0x5a6>
 8004ec4:	2310      	movs	r3, #16
 8004ec6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004eca:	e0b0      	b.n	800502e <UART_SetConfig+0x5a6>
 8004ecc:	2320      	movs	r3, #32
 8004ece:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ed2:	e0ac      	b.n	800502e <UART_SetConfig+0x5a6>
 8004ed4:	2340      	movs	r3, #64	; 0x40
 8004ed6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004eda:	e0a8      	b.n	800502e <UART_SetConfig+0x5a6>
 8004edc:	2380      	movs	r3, #128	; 0x80
 8004ede:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ee2:	e0a4      	b.n	800502e <UART_SetConfig+0x5a6>
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a8f      	ldr	r2, [pc, #572]	; (8005128 <UART_SetConfig+0x6a0>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d130      	bne.n	8004f50 <UART_SetConfig+0x4c8>
 8004eee:	4b8d      	ldr	r3, [pc, #564]	; (8005124 <UART_SetConfig+0x69c>)
 8004ef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ef2:	f003 0307 	and.w	r3, r3, #7
 8004ef6:	2b05      	cmp	r3, #5
 8004ef8:	d826      	bhi.n	8004f48 <UART_SetConfig+0x4c0>
 8004efa:	a201      	add	r2, pc, #4	; (adr r2, 8004f00 <UART_SetConfig+0x478>)
 8004efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f00:	08004f19 	.word	0x08004f19
 8004f04:	08004f21 	.word	0x08004f21
 8004f08:	08004f29 	.word	0x08004f29
 8004f0c:	08004f31 	.word	0x08004f31
 8004f10:	08004f39 	.word	0x08004f39
 8004f14:	08004f41 	.word	0x08004f41
 8004f18:	2300      	movs	r3, #0
 8004f1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f1e:	e086      	b.n	800502e <UART_SetConfig+0x5a6>
 8004f20:	2304      	movs	r3, #4
 8004f22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f26:	e082      	b.n	800502e <UART_SetConfig+0x5a6>
 8004f28:	2308      	movs	r3, #8
 8004f2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f2e:	e07e      	b.n	800502e <UART_SetConfig+0x5a6>
 8004f30:	2310      	movs	r3, #16
 8004f32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f36:	e07a      	b.n	800502e <UART_SetConfig+0x5a6>
 8004f38:	2320      	movs	r3, #32
 8004f3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f3e:	e076      	b.n	800502e <UART_SetConfig+0x5a6>
 8004f40:	2340      	movs	r3, #64	; 0x40
 8004f42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f46:	e072      	b.n	800502e <UART_SetConfig+0x5a6>
 8004f48:	2380      	movs	r3, #128	; 0x80
 8004f4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f4e:	e06e      	b.n	800502e <UART_SetConfig+0x5a6>
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a75      	ldr	r2, [pc, #468]	; (800512c <UART_SetConfig+0x6a4>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d130      	bne.n	8004fbc <UART_SetConfig+0x534>
 8004f5a:	4b72      	ldr	r3, [pc, #456]	; (8005124 <UART_SetConfig+0x69c>)
 8004f5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f5e:	f003 0307 	and.w	r3, r3, #7
 8004f62:	2b05      	cmp	r3, #5
 8004f64:	d826      	bhi.n	8004fb4 <UART_SetConfig+0x52c>
 8004f66:	a201      	add	r2, pc, #4	; (adr r2, 8004f6c <UART_SetConfig+0x4e4>)
 8004f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f6c:	08004f85 	.word	0x08004f85
 8004f70:	08004f8d 	.word	0x08004f8d
 8004f74:	08004f95 	.word	0x08004f95
 8004f78:	08004f9d 	.word	0x08004f9d
 8004f7c:	08004fa5 	.word	0x08004fa5
 8004f80:	08004fad 	.word	0x08004fad
 8004f84:	2300      	movs	r3, #0
 8004f86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f8a:	e050      	b.n	800502e <UART_SetConfig+0x5a6>
 8004f8c:	2304      	movs	r3, #4
 8004f8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f92:	e04c      	b.n	800502e <UART_SetConfig+0x5a6>
 8004f94:	2308      	movs	r3, #8
 8004f96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f9a:	e048      	b.n	800502e <UART_SetConfig+0x5a6>
 8004f9c:	2310      	movs	r3, #16
 8004f9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fa2:	e044      	b.n	800502e <UART_SetConfig+0x5a6>
 8004fa4:	2320      	movs	r3, #32
 8004fa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004faa:	e040      	b.n	800502e <UART_SetConfig+0x5a6>
 8004fac:	2340      	movs	r3, #64	; 0x40
 8004fae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fb2:	e03c      	b.n	800502e <UART_SetConfig+0x5a6>
 8004fb4:	2380      	movs	r3, #128	; 0x80
 8004fb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fba:	e038      	b.n	800502e <UART_SetConfig+0x5a6>
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a5b      	ldr	r2, [pc, #364]	; (8005130 <UART_SetConfig+0x6a8>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d130      	bne.n	8005028 <UART_SetConfig+0x5a0>
 8004fc6:	4b57      	ldr	r3, [pc, #348]	; (8005124 <UART_SetConfig+0x69c>)
 8004fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fca:	f003 0307 	and.w	r3, r3, #7
 8004fce:	2b05      	cmp	r3, #5
 8004fd0:	d826      	bhi.n	8005020 <UART_SetConfig+0x598>
 8004fd2:	a201      	add	r2, pc, #4	; (adr r2, 8004fd8 <UART_SetConfig+0x550>)
 8004fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fd8:	08004ff1 	.word	0x08004ff1
 8004fdc:	08004ff9 	.word	0x08004ff9
 8004fe0:	08005001 	.word	0x08005001
 8004fe4:	08005009 	.word	0x08005009
 8004fe8:	08005011 	.word	0x08005011
 8004fec:	08005019 	.word	0x08005019
 8004ff0:	2302      	movs	r3, #2
 8004ff2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ff6:	e01a      	b.n	800502e <UART_SetConfig+0x5a6>
 8004ff8:	2304      	movs	r3, #4
 8004ffa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ffe:	e016      	b.n	800502e <UART_SetConfig+0x5a6>
 8005000:	2308      	movs	r3, #8
 8005002:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005006:	e012      	b.n	800502e <UART_SetConfig+0x5a6>
 8005008:	2310      	movs	r3, #16
 800500a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800500e:	e00e      	b.n	800502e <UART_SetConfig+0x5a6>
 8005010:	2320      	movs	r3, #32
 8005012:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005016:	e00a      	b.n	800502e <UART_SetConfig+0x5a6>
 8005018:	2340      	movs	r3, #64	; 0x40
 800501a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800501e:	e006      	b.n	800502e <UART_SetConfig+0x5a6>
 8005020:	2380      	movs	r3, #128	; 0x80
 8005022:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005026:	e002      	b.n	800502e <UART_SetConfig+0x5a6>
 8005028:	2380      	movs	r3, #128	; 0x80
 800502a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a3f      	ldr	r2, [pc, #252]	; (8005130 <UART_SetConfig+0x6a8>)
 8005034:	4293      	cmp	r3, r2
 8005036:	f040 80f8 	bne.w	800522a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800503a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800503e:	2b20      	cmp	r3, #32
 8005040:	dc46      	bgt.n	80050d0 <UART_SetConfig+0x648>
 8005042:	2b02      	cmp	r3, #2
 8005044:	f2c0 8082 	blt.w	800514c <UART_SetConfig+0x6c4>
 8005048:	3b02      	subs	r3, #2
 800504a:	2b1e      	cmp	r3, #30
 800504c:	d87e      	bhi.n	800514c <UART_SetConfig+0x6c4>
 800504e:	a201      	add	r2, pc, #4	; (adr r2, 8005054 <UART_SetConfig+0x5cc>)
 8005050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005054:	080050d7 	.word	0x080050d7
 8005058:	0800514d 	.word	0x0800514d
 800505c:	080050df 	.word	0x080050df
 8005060:	0800514d 	.word	0x0800514d
 8005064:	0800514d 	.word	0x0800514d
 8005068:	0800514d 	.word	0x0800514d
 800506c:	080050ef 	.word	0x080050ef
 8005070:	0800514d 	.word	0x0800514d
 8005074:	0800514d 	.word	0x0800514d
 8005078:	0800514d 	.word	0x0800514d
 800507c:	0800514d 	.word	0x0800514d
 8005080:	0800514d 	.word	0x0800514d
 8005084:	0800514d 	.word	0x0800514d
 8005088:	0800514d 	.word	0x0800514d
 800508c:	080050ff 	.word	0x080050ff
 8005090:	0800514d 	.word	0x0800514d
 8005094:	0800514d 	.word	0x0800514d
 8005098:	0800514d 	.word	0x0800514d
 800509c:	0800514d 	.word	0x0800514d
 80050a0:	0800514d 	.word	0x0800514d
 80050a4:	0800514d 	.word	0x0800514d
 80050a8:	0800514d 	.word	0x0800514d
 80050ac:	0800514d 	.word	0x0800514d
 80050b0:	0800514d 	.word	0x0800514d
 80050b4:	0800514d 	.word	0x0800514d
 80050b8:	0800514d 	.word	0x0800514d
 80050bc:	0800514d 	.word	0x0800514d
 80050c0:	0800514d 	.word	0x0800514d
 80050c4:	0800514d 	.word	0x0800514d
 80050c8:	0800514d 	.word	0x0800514d
 80050cc:	0800513f 	.word	0x0800513f
 80050d0:	2b40      	cmp	r3, #64	; 0x40
 80050d2:	d037      	beq.n	8005144 <UART_SetConfig+0x6bc>
 80050d4:	e03a      	b.n	800514c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80050d6:	f7fe ffcf 	bl	8004078 <HAL_RCCEx_GetD3PCLK1Freq>
 80050da:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80050dc:	e03c      	b.n	8005158 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80050de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80050e2:	4618      	mov	r0, r3
 80050e4:	f7fe ffde 	bl	80040a4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80050e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80050ec:	e034      	b.n	8005158 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80050ee:	f107 0318 	add.w	r3, r7, #24
 80050f2:	4618      	mov	r0, r3
 80050f4:	f7ff f92a 	bl	800434c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80050f8:	69fb      	ldr	r3, [r7, #28]
 80050fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80050fc:	e02c      	b.n	8005158 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80050fe:	4b09      	ldr	r3, [pc, #36]	; (8005124 <UART_SetConfig+0x69c>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f003 0320 	and.w	r3, r3, #32
 8005106:	2b00      	cmp	r3, #0
 8005108:	d016      	beq.n	8005138 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800510a:	4b06      	ldr	r3, [pc, #24]	; (8005124 <UART_SetConfig+0x69c>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	08db      	lsrs	r3, r3, #3
 8005110:	f003 0303 	and.w	r3, r3, #3
 8005114:	4a07      	ldr	r2, [pc, #28]	; (8005134 <UART_SetConfig+0x6ac>)
 8005116:	fa22 f303 	lsr.w	r3, r2, r3
 800511a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800511c:	e01c      	b.n	8005158 <UART_SetConfig+0x6d0>
 800511e:	bf00      	nop
 8005120:	40011400 	.word	0x40011400
 8005124:	58024400 	.word	0x58024400
 8005128:	40007800 	.word	0x40007800
 800512c:	40007c00 	.word	0x40007c00
 8005130:	58000c00 	.word	0x58000c00
 8005134:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8005138:	4b9d      	ldr	r3, [pc, #628]	; (80053b0 <UART_SetConfig+0x928>)
 800513a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800513c:	e00c      	b.n	8005158 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800513e:	4b9d      	ldr	r3, [pc, #628]	; (80053b4 <UART_SetConfig+0x92c>)
 8005140:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005142:	e009      	b.n	8005158 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005144:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005148:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800514a:	e005      	b.n	8005158 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800514c:	2300      	movs	r3, #0
 800514e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005150:	2301      	movs	r3, #1
 8005152:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005156:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005158:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800515a:	2b00      	cmp	r3, #0
 800515c:	f000 81de 	beq.w	800551c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005164:	4a94      	ldr	r2, [pc, #592]	; (80053b8 <UART_SetConfig+0x930>)
 8005166:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800516a:	461a      	mov	r2, r3
 800516c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800516e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005172:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	685a      	ldr	r2, [r3, #4]
 8005178:	4613      	mov	r3, r2
 800517a:	005b      	lsls	r3, r3, #1
 800517c:	4413      	add	r3, r2
 800517e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005180:	429a      	cmp	r2, r3
 8005182:	d305      	bcc.n	8005190 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800518a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800518c:	429a      	cmp	r2, r3
 800518e:	d903      	bls.n	8005198 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8005190:	2301      	movs	r3, #1
 8005192:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005196:	e1c1      	b.n	800551c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005198:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800519a:	2200      	movs	r2, #0
 800519c:	60bb      	str	r3, [r7, #8]
 800519e:	60fa      	str	r2, [r7, #12]
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a4:	4a84      	ldr	r2, [pc, #528]	; (80053b8 <UART_SetConfig+0x930>)
 80051a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80051aa:	b29b      	uxth	r3, r3
 80051ac:	2200      	movs	r2, #0
 80051ae:	603b      	str	r3, [r7, #0]
 80051b0:	607a      	str	r2, [r7, #4]
 80051b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80051b6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80051ba:	f7fb f8e1 	bl	8000380 <__aeabi_uldivmod>
 80051be:	4602      	mov	r2, r0
 80051c0:	460b      	mov	r3, r1
 80051c2:	4610      	mov	r0, r2
 80051c4:	4619      	mov	r1, r3
 80051c6:	f04f 0200 	mov.w	r2, #0
 80051ca:	f04f 0300 	mov.w	r3, #0
 80051ce:	020b      	lsls	r3, r1, #8
 80051d0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80051d4:	0202      	lsls	r2, r0, #8
 80051d6:	6979      	ldr	r1, [r7, #20]
 80051d8:	6849      	ldr	r1, [r1, #4]
 80051da:	0849      	lsrs	r1, r1, #1
 80051dc:	2000      	movs	r0, #0
 80051de:	460c      	mov	r4, r1
 80051e0:	4605      	mov	r5, r0
 80051e2:	eb12 0804 	adds.w	r8, r2, r4
 80051e6:	eb43 0905 	adc.w	r9, r3, r5
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	2200      	movs	r2, #0
 80051f0:	469a      	mov	sl, r3
 80051f2:	4693      	mov	fp, r2
 80051f4:	4652      	mov	r2, sl
 80051f6:	465b      	mov	r3, fp
 80051f8:	4640      	mov	r0, r8
 80051fa:	4649      	mov	r1, r9
 80051fc:	f7fb f8c0 	bl	8000380 <__aeabi_uldivmod>
 8005200:	4602      	mov	r2, r0
 8005202:	460b      	mov	r3, r1
 8005204:	4613      	mov	r3, r2
 8005206:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800520a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800520e:	d308      	bcc.n	8005222 <UART_SetConfig+0x79a>
 8005210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005212:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005216:	d204      	bcs.n	8005222 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800521e:	60da      	str	r2, [r3, #12]
 8005220:	e17c      	b.n	800551c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005228:	e178      	b.n	800551c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	69db      	ldr	r3, [r3, #28]
 800522e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005232:	f040 80c5 	bne.w	80053c0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8005236:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800523a:	2b20      	cmp	r3, #32
 800523c:	dc48      	bgt.n	80052d0 <UART_SetConfig+0x848>
 800523e:	2b00      	cmp	r3, #0
 8005240:	db7b      	blt.n	800533a <UART_SetConfig+0x8b2>
 8005242:	2b20      	cmp	r3, #32
 8005244:	d879      	bhi.n	800533a <UART_SetConfig+0x8b2>
 8005246:	a201      	add	r2, pc, #4	; (adr r2, 800524c <UART_SetConfig+0x7c4>)
 8005248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800524c:	080052d7 	.word	0x080052d7
 8005250:	080052df 	.word	0x080052df
 8005254:	0800533b 	.word	0x0800533b
 8005258:	0800533b 	.word	0x0800533b
 800525c:	080052e7 	.word	0x080052e7
 8005260:	0800533b 	.word	0x0800533b
 8005264:	0800533b 	.word	0x0800533b
 8005268:	0800533b 	.word	0x0800533b
 800526c:	080052f7 	.word	0x080052f7
 8005270:	0800533b 	.word	0x0800533b
 8005274:	0800533b 	.word	0x0800533b
 8005278:	0800533b 	.word	0x0800533b
 800527c:	0800533b 	.word	0x0800533b
 8005280:	0800533b 	.word	0x0800533b
 8005284:	0800533b 	.word	0x0800533b
 8005288:	0800533b 	.word	0x0800533b
 800528c:	08005307 	.word	0x08005307
 8005290:	0800533b 	.word	0x0800533b
 8005294:	0800533b 	.word	0x0800533b
 8005298:	0800533b 	.word	0x0800533b
 800529c:	0800533b 	.word	0x0800533b
 80052a0:	0800533b 	.word	0x0800533b
 80052a4:	0800533b 	.word	0x0800533b
 80052a8:	0800533b 	.word	0x0800533b
 80052ac:	0800533b 	.word	0x0800533b
 80052b0:	0800533b 	.word	0x0800533b
 80052b4:	0800533b 	.word	0x0800533b
 80052b8:	0800533b 	.word	0x0800533b
 80052bc:	0800533b 	.word	0x0800533b
 80052c0:	0800533b 	.word	0x0800533b
 80052c4:	0800533b 	.word	0x0800533b
 80052c8:	0800533b 	.word	0x0800533b
 80052cc:	0800532d 	.word	0x0800532d
 80052d0:	2b40      	cmp	r3, #64	; 0x40
 80052d2:	d02e      	beq.n	8005332 <UART_SetConfig+0x8aa>
 80052d4:	e031      	b.n	800533a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052d6:	f7fd ff5d 	bl	8003194 <HAL_RCC_GetPCLK1Freq>
 80052da:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80052dc:	e033      	b.n	8005346 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052de:	f7fd ff6f 	bl	80031c0 <HAL_RCC_GetPCLK2Freq>
 80052e2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80052e4:	e02f      	b.n	8005346 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80052e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80052ea:	4618      	mov	r0, r3
 80052ec:	f7fe feda 	bl	80040a4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80052f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80052f4:	e027      	b.n	8005346 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80052f6:	f107 0318 	add.w	r3, r7, #24
 80052fa:	4618      	mov	r0, r3
 80052fc:	f7ff f826 	bl	800434c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005300:	69fb      	ldr	r3, [r7, #28]
 8005302:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005304:	e01f      	b.n	8005346 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005306:	4b2d      	ldr	r3, [pc, #180]	; (80053bc <UART_SetConfig+0x934>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f003 0320 	and.w	r3, r3, #32
 800530e:	2b00      	cmp	r3, #0
 8005310:	d009      	beq.n	8005326 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005312:	4b2a      	ldr	r3, [pc, #168]	; (80053bc <UART_SetConfig+0x934>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	08db      	lsrs	r3, r3, #3
 8005318:	f003 0303 	and.w	r3, r3, #3
 800531c:	4a24      	ldr	r2, [pc, #144]	; (80053b0 <UART_SetConfig+0x928>)
 800531e:	fa22 f303 	lsr.w	r3, r2, r3
 8005322:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005324:	e00f      	b.n	8005346 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005326:	4b22      	ldr	r3, [pc, #136]	; (80053b0 <UART_SetConfig+0x928>)
 8005328:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800532a:	e00c      	b.n	8005346 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800532c:	4b21      	ldr	r3, [pc, #132]	; (80053b4 <UART_SetConfig+0x92c>)
 800532e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005330:	e009      	b.n	8005346 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005332:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005336:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005338:	e005      	b.n	8005346 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800533a:	2300      	movs	r3, #0
 800533c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005344:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005346:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005348:	2b00      	cmp	r3, #0
 800534a:	f000 80e7 	beq.w	800551c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005352:	4a19      	ldr	r2, [pc, #100]	; (80053b8 <UART_SetConfig+0x930>)
 8005354:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005358:	461a      	mov	r2, r3
 800535a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800535c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005360:	005a      	lsls	r2, r3, #1
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	085b      	lsrs	r3, r3, #1
 8005368:	441a      	add	r2, r3
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005372:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005376:	2b0f      	cmp	r3, #15
 8005378:	d916      	bls.n	80053a8 <UART_SetConfig+0x920>
 800537a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800537c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005380:	d212      	bcs.n	80053a8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005384:	b29b      	uxth	r3, r3
 8005386:	f023 030f 	bic.w	r3, r3, #15
 800538a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800538c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800538e:	085b      	lsrs	r3, r3, #1
 8005390:	b29b      	uxth	r3, r3
 8005392:	f003 0307 	and.w	r3, r3, #7
 8005396:	b29a      	uxth	r2, r3
 8005398:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800539a:	4313      	orrs	r3, r2
 800539c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80053a4:	60da      	str	r2, [r3, #12]
 80053a6:	e0b9      	b.n	800551c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80053a8:	2301      	movs	r3, #1
 80053aa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80053ae:	e0b5      	b.n	800551c <UART_SetConfig+0xa94>
 80053b0:	03d09000 	.word	0x03d09000
 80053b4:	003d0900 	.word	0x003d0900
 80053b8:	08006a78 	.word	0x08006a78
 80053bc:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80053c0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80053c4:	2b20      	cmp	r3, #32
 80053c6:	dc49      	bgt.n	800545c <UART_SetConfig+0x9d4>
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	db7c      	blt.n	80054c6 <UART_SetConfig+0xa3e>
 80053cc:	2b20      	cmp	r3, #32
 80053ce:	d87a      	bhi.n	80054c6 <UART_SetConfig+0xa3e>
 80053d0:	a201      	add	r2, pc, #4	; (adr r2, 80053d8 <UART_SetConfig+0x950>)
 80053d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053d6:	bf00      	nop
 80053d8:	08005463 	.word	0x08005463
 80053dc:	0800546b 	.word	0x0800546b
 80053e0:	080054c7 	.word	0x080054c7
 80053e4:	080054c7 	.word	0x080054c7
 80053e8:	08005473 	.word	0x08005473
 80053ec:	080054c7 	.word	0x080054c7
 80053f0:	080054c7 	.word	0x080054c7
 80053f4:	080054c7 	.word	0x080054c7
 80053f8:	08005483 	.word	0x08005483
 80053fc:	080054c7 	.word	0x080054c7
 8005400:	080054c7 	.word	0x080054c7
 8005404:	080054c7 	.word	0x080054c7
 8005408:	080054c7 	.word	0x080054c7
 800540c:	080054c7 	.word	0x080054c7
 8005410:	080054c7 	.word	0x080054c7
 8005414:	080054c7 	.word	0x080054c7
 8005418:	08005493 	.word	0x08005493
 800541c:	080054c7 	.word	0x080054c7
 8005420:	080054c7 	.word	0x080054c7
 8005424:	080054c7 	.word	0x080054c7
 8005428:	080054c7 	.word	0x080054c7
 800542c:	080054c7 	.word	0x080054c7
 8005430:	080054c7 	.word	0x080054c7
 8005434:	080054c7 	.word	0x080054c7
 8005438:	080054c7 	.word	0x080054c7
 800543c:	080054c7 	.word	0x080054c7
 8005440:	080054c7 	.word	0x080054c7
 8005444:	080054c7 	.word	0x080054c7
 8005448:	080054c7 	.word	0x080054c7
 800544c:	080054c7 	.word	0x080054c7
 8005450:	080054c7 	.word	0x080054c7
 8005454:	080054c7 	.word	0x080054c7
 8005458:	080054b9 	.word	0x080054b9
 800545c:	2b40      	cmp	r3, #64	; 0x40
 800545e:	d02e      	beq.n	80054be <UART_SetConfig+0xa36>
 8005460:	e031      	b.n	80054c6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005462:	f7fd fe97 	bl	8003194 <HAL_RCC_GetPCLK1Freq>
 8005466:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005468:	e033      	b.n	80054d2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800546a:	f7fd fea9 	bl	80031c0 <HAL_RCC_GetPCLK2Freq>
 800546e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005470:	e02f      	b.n	80054d2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005472:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005476:	4618      	mov	r0, r3
 8005478:	f7fe fe14 	bl	80040a4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800547c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800547e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005480:	e027      	b.n	80054d2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005482:	f107 0318 	add.w	r3, r7, #24
 8005486:	4618      	mov	r0, r3
 8005488:	f7fe ff60 	bl	800434c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800548c:	69fb      	ldr	r3, [r7, #28]
 800548e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005490:	e01f      	b.n	80054d2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005492:	4b2d      	ldr	r3, [pc, #180]	; (8005548 <UART_SetConfig+0xac0>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f003 0320 	and.w	r3, r3, #32
 800549a:	2b00      	cmp	r3, #0
 800549c:	d009      	beq.n	80054b2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800549e:	4b2a      	ldr	r3, [pc, #168]	; (8005548 <UART_SetConfig+0xac0>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	08db      	lsrs	r3, r3, #3
 80054a4:	f003 0303 	and.w	r3, r3, #3
 80054a8:	4a28      	ldr	r2, [pc, #160]	; (800554c <UART_SetConfig+0xac4>)
 80054aa:	fa22 f303 	lsr.w	r3, r2, r3
 80054ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80054b0:	e00f      	b.n	80054d2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80054b2:	4b26      	ldr	r3, [pc, #152]	; (800554c <UART_SetConfig+0xac4>)
 80054b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80054b6:	e00c      	b.n	80054d2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80054b8:	4b25      	ldr	r3, [pc, #148]	; (8005550 <UART_SetConfig+0xac8>)
 80054ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80054bc:	e009      	b.n	80054d2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80054c4:	e005      	b.n	80054d2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80054c6:	2300      	movs	r3, #0
 80054c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80054ca:	2301      	movs	r3, #1
 80054cc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80054d0:	bf00      	nop
    }

    if (pclk != 0U)
 80054d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d021      	beq.n	800551c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054dc:	4a1d      	ldr	r2, [pc, #116]	; (8005554 <UART_SetConfig+0xacc>)
 80054de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80054e2:	461a      	mov	r2, r3
 80054e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054e6:	fbb3 f2f2 	udiv	r2, r3, r2
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	085b      	lsrs	r3, r3, #1
 80054f0:	441a      	add	r2, r3
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80054fa:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054fe:	2b0f      	cmp	r3, #15
 8005500:	d909      	bls.n	8005516 <UART_SetConfig+0xa8e>
 8005502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005504:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005508:	d205      	bcs.n	8005516 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800550a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800550c:	b29a      	uxth	r2, r3
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	60da      	str	r2, [r3, #12]
 8005514:	e002      	b.n	800551c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	2201      	movs	r2, #1
 8005520:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	2201      	movs	r2, #1
 8005528:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	2200      	movs	r2, #0
 8005530:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	2200      	movs	r2, #0
 8005536:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005538:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800553c:	4618      	mov	r0, r3
 800553e:	3748      	adds	r7, #72	; 0x48
 8005540:	46bd      	mov	sp, r7
 8005542:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005546:	bf00      	nop
 8005548:	58024400 	.word	0x58024400
 800554c:	03d09000 	.word	0x03d09000
 8005550:	003d0900 	.word	0x003d0900
 8005554:	08006a78 	.word	0x08006a78

08005558 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005558:	b480      	push	{r7}
 800555a:	b083      	sub	sp, #12
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005564:	f003 0301 	and.w	r3, r3, #1
 8005568:	2b00      	cmp	r3, #0
 800556a:	d00a      	beq.n	8005582 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	430a      	orrs	r2, r1
 8005580:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005586:	f003 0302 	and.w	r3, r3, #2
 800558a:	2b00      	cmp	r3, #0
 800558c:	d00a      	beq.n	80055a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	430a      	orrs	r2, r1
 80055a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055a8:	f003 0304 	and.w	r3, r3, #4
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d00a      	beq.n	80055c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	430a      	orrs	r2, r1
 80055c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ca:	f003 0308 	and.w	r3, r3, #8
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d00a      	beq.n	80055e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	430a      	orrs	r2, r1
 80055e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ec:	f003 0310 	and.w	r3, r3, #16
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d00a      	beq.n	800560a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	430a      	orrs	r2, r1
 8005608:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800560e:	f003 0320 	and.w	r3, r3, #32
 8005612:	2b00      	cmp	r3, #0
 8005614:	d00a      	beq.n	800562c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	689b      	ldr	r3, [r3, #8]
 800561c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	430a      	orrs	r2, r1
 800562a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005630:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005634:	2b00      	cmp	r3, #0
 8005636:	d01a      	beq.n	800566e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	430a      	orrs	r2, r1
 800564c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005652:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005656:	d10a      	bne.n	800566e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	430a      	orrs	r2, r1
 800566c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005672:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005676:	2b00      	cmp	r3, #0
 8005678:	d00a      	beq.n	8005690 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	430a      	orrs	r2, r1
 800568e:	605a      	str	r2, [r3, #4]
  }
}
 8005690:	bf00      	nop
 8005692:	370c      	adds	r7, #12
 8005694:	46bd      	mov	sp, r7
 8005696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569a:	4770      	bx	lr

0800569c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b086      	sub	sp, #24
 80056a0:	af02      	add	r7, sp, #8
 80056a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2200      	movs	r2, #0
 80056a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80056ac:	f7fb fce8 	bl	8001080 <HAL_GetTick>
 80056b0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f003 0308 	and.w	r3, r3, #8
 80056bc:	2b08      	cmp	r3, #8
 80056be:	d10e      	bne.n	80056de <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80056c4:	9300      	str	r3, [sp, #0]
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2200      	movs	r2, #0
 80056ca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f000 f82f 	bl	8005732 <UART_WaitOnFlagUntilTimeout>
 80056d4:	4603      	mov	r3, r0
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d001      	beq.n	80056de <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80056da:	2303      	movs	r3, #3
 80056dc:	e025      	b.n	800572a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f003 0304 	and.w	r3, r3, #4
 80056e8:	2b04      	cmp	r3, #4
 80056ea:	d10e      	bne.n	800570a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80056f0:	9300      	str	r3, [sp, #0]
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	2200      	movs	r2, #0
 80056f6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f000 f819 	bl	8005732 <UART_WaitOnFlagUntilTimeout>
 8005700:	4603      	mov	r3, r0
 8005702:	2b00      	cmp	r3, #0
 8005704:	d001      	beq.n	800570a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005706:	2303      	movs	r3, #3
 8005708:	e00f      	b.n	800572a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2220      	movs	r2, #32
 800570e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2220      	movs	r2, #32
 8005716:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2200      	movs	r2, #0
 800571e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2200      	movs	r2, #0
 8005724:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005728:	2300      	movs	r3, #0
}
 800572a:	4618      	mov	r0, r3
 800572c:	3710      	adds	r7, #16
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}

08005732 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005732:	b580      	push	{r7, lr}
 8005734:	b09c      	sub	sp, #112	; 0x70
 8005736:	af00      	add	r7, sp, #0
 8005738:	60f8      	str	r0, [r7, #12]
 800573a:	60b9      	str	r1, [r7, #8]
 800573c:	603b      	str	r3, [r7, #0]
 800573e:	4613      	mov	r3, r2
 8005740:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005742:	e0a9      	b.n	8005898 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005744:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005746:	f1b3 3fff 	cmp.w	r3, #4294967295
 800574a:	f000 80a5 	beq.w	8005898 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800574e:	f7fb fc97 	bl	8001080 <HAL_GetTick>
 8005752:	4602      	mov	r2, r0
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	1ad3      	subs	r3, r2, r3
 8005758:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800575a:	429a      	cmp	r2, r3
 800575c:	d302      	bcc.n	8005764 <UART_WaitOnFlagUntilTimeout+0x32>
 800575e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005760:	2b00      	cmp	r3, #0
 8005762:	d140      	bne.n	80057e6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800576a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800576c:	e853 3f00 	ldrex	r3, [r3]
 8005770:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005772:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005774:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005778:	667b      	str	r3, [r7, #100]	; 0x64
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	461a      	mov	r2, r3
 8005780:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005782:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005784:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005786:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005788:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800578a:	e841 2300 	strex	r3, r2, [r1]
 800578e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005790:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005792:	2b00      	cmp	r3, #0
 8005794:	d1e6      	bne.n	8005764 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	3308      	adds	r3, #8
 800579c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800579e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057a0:	e853 3f00 	ldrex	r3, [r3]
 80057a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80057a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057a8:	f023 0301 	bic.w	r3, r3, #1
 80057ac:	663b      	str	r3, [r7, #96]	; 0x60
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	3308      	adds	r3, #8
 80057b4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80057b6:	64ba      	str	r2, [r7, #72]	; 0x48
 80057b8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80057bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80057be:	e841 2300 	strex	r3, r2, [r1]
 80057c2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80057c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d1e5      	bne.n	8005796 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2220      	movs	r2, #32
 80057ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2220      	movs	r2, #32
 80057d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2200      	movs	r2, #0
 80057de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80057e2:	2303      	movs	r3, #3
 80057e4:	e069      	b.n	80058ba <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f003 0304 	and.w	r3, r3, #4
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d051      	beq.n	8005898 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	69db      	ldr	r3, [r3, #28]
 80057fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005802:	d149      	bne.n	8005898 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800580c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005816:	e853 3f00 	ldrex	r3, [r3]
 800581a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800581c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800581e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005822:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	461a      	mov	r2, r3
 800582a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800582c:	637b      	str	r3, [r7, #52]	; 0x34
 800582e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005830:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005832:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005834:	e841 2300 	strex	r3, r2, [r1]
 8005838:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800583a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800583c:	2b00      	cmp	r3, #0
 800583e:	d1e6      	bne.n	800580e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	3308      	adds	r3, #8
 8005846:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	e853 3f00 	ldrex	r3, [r3]
 800584e:	613b      	str	r3, [r7, #16]
   return(result);
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	f023 0301 	bic.w	r3, r3, #1
 8005856:	66bb      	str	r3, [r7, #104]	; 0x68
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	3308      	adds	r3, #8
 800585e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005860:	623a      	str	r2, [r7, #32]
 8005862:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005864:	69f9      	ldr	r1, [r7, #28]
 8005866:	6a3a      	ldr	r2, [r7, #32]
 8005868:	e841 2300 	strex	r3, r2, [r1]
 800586c:	61bb      	str	r3, [r7, #24]
   return(result);
 800586e:	69bb      	ldr	r3, [r7, #24]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d1e5      	bne.n	8005840 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2220      	movs	r2, #32
 8005878:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2220      	movs	r2, #32
 8005880:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2220      	movs	r2, #32
 8005888:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2200      	movs	r2, #0
 8005890:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005894:	2303      	movs	r3, #3
 8005896:	e010      	b.n	80058ba <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	69da      	ldr	r2, [r3, #28]
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	4013      	ands	r3, r2
 80058a2:	68ba      	ldr	r2, [r7, #8]
 80058a4:	429a      	cmp	r2, r3
 80058a6:	bf0c      	ite	eq
 80058a8:	2301      	moveq	r3, #1
 80058aa:	2300      	movne	r3, #0
 80058ac:	b2db      	uxtb	r3, r3
 80058ae:	461a      	mov	r2, r3
 80058b0:	79fb      	ldrb	r3, [r7, #7]
 80058b2:	429a      	cmp	r2, r3
 80058b4:	f43f af46 	beq.w	8005744 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80058b8:	2300      	movs	r3, #0
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	3770      	adds	r7, #112	; 0x70
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}

080058c2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80058c2:	b480      	push	{r7}
 80058c4:	b085      	sub	sp, #20
 80058c6:	af00      	add	r7, sp, #0
 80058c8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80058d0:	2b01      	cmp	r3, #1
 80058d2:	d101      	bne.n	80058d8 <HAL_UARTEx_DisableFifoMode+0x16>
 80058d4:	2302      	movs	r3, #2
 80058d6:	e027      	b.n	8005928 <HAL_UARTEx_DisableFifoMode+0x66>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2201      	movs	r2, #1
 80058dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2224      	movs	r2, #36	; 0x24
 80058e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	681a      	ldr	r2, [r3, #0]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f022 0201 	bic.w	r2, r2, #1
 80058fe:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005906:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2200      	movs	r2, #0
 800590c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	68fa      	ldr	r2, [r7, #12]
 8005914:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2220      	movs	r2, #32
 800591a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2200      	movs	r2, #0
 8005922:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005926:	2300      	movs	r3, #0
}
 8005928:	4618      	mov	r0, r3
 800592a:	3714      	adds	r7, #20
 800592c:	46bd      	mov	sp, r7
 800592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005932:	4770      	bx	lr

08005934 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b084      	sub	sp, #16
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005944:	2b01      	cmp	r3, #1
 8005946:	d101      	bne.n	800594c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005948:	2302      	movs	r3, #2
 800594a:	e02d      	b.n	80059a8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2201      	movs	r2, #1
 8005950:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2224      	movs	r2, #36	; 0x24
 8005958:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	681a      	ldr	r2, [r3, #0]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f022 0201 	bic.w	r2, r2, #1
 8005972:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	689b      	ldr	r3, [r3, #8]
 800597a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	683a      	ldr	r2, [r7, #0]
 8005984:	430a      	orrs	r2, r1
 8005986:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f000 f84f 	bl	8005a2c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	68fa      	ldr	r2, [r7, #12]
 8005994:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2220      	movs	r2, #32
 800599a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2200      	movs	r2, #0
 80059a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80059a6:	2300      	movs	r3, #0
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	3710      	adds	r7, #16
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}

080059b0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b084      	sub	sp, #16
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
 80059b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d101      	bne.n	80059c8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80059c4:	2302      	movs	r3, #2
 80059c6:	e02d      	b.n	8005a24 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2201      	movs	r2, #1
 80059cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2224      	movs	r2, #36	; 0x24
 80059d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	681a      	ldr	r2, [r3, #0]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f022 0201 	bic.w	r2, r2, #1
 80059ee:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	689b      	ldr	r3, [r3, #8]
 80059f6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	683a      	ldr	r2, [r7, #0]
 8005a00:	430a      	orrs	r2, r1
 8005a02:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f000 f811 	bl	8005a2c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	68fa      	ldr	r2, [r7, #12]
 8005a10:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2220      	movs	r2, #32
 8005a16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005a22:	2300      	movs	r3, #0
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	3710      	adds	r7, #16
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}

08005a2c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b085      	sub	sp, #20
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d108      	bne.n	8005a4e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2201      	movs	r2, #1
 8005a48:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005a4c:	e031      	b.n	8005ab2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005a4e:	2310      	movs	r3, #16
 8005a50:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005a52:	2310      	movs	r3, #16
 8005a54:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	0e5b      	lsrs	r3, r3, #25
 8005a5e:	b2db      	uxtb	r3, r3
 8005a60:	f003 0307 	and.w	r3, r3, #7
 8005a64:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	689b      	ldr	r3, [r3, #8]
 8005a6c:	0f5b      	lsrs	r3, r3, #29
 8005a6e:	b2db      	uxtb	r3, r3
 8005a70:	f003 0307 	and.w	r3, r3, #7
 8005a74:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005a76:	7bbb      	ldrb	r3, [r7, #14]
 8005a78:	7b3a      	ldrb	r2, [r7, #12]
 8005a7a:	4911      	ldr	r1, [pc, #68]	; (8005ac0 <UARTEx_SetNbDataToProcess+0x94>)
 8005a7c:	5c8a      	ldrb	r2, [r1, r2]
 8005a7e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005a82:	7b3a      	ldrb	r2, [r7, #12]
 8005a84:	490f      	ldr	r1, [pc, #60]	; (8005ac4 <UARTEx_SetNbDataToProcess+0x98>)
 8005a86:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005a88:	fb93 f3f2 	sdiv	r3, r3, r2
 8005a8c:	b29a      	uxth	r2, r3
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005a94:	7bfb      	ldrb	r3, [r7, #15]
 8005a96:	7b7a      	ldrb	r2, [r7, #13]
 8005a98:	4909      	ldr	r1, [pc, #36]	; (8005ac0 <UARTEx_SetNbDataToProcess+0x94>)
 8005a9a:	5c8a      	ldrb	r2, [r1, r2]
 8005a9c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005aa0:	7b7a      	ldrb	r2, [r7, #13]
 8005aa2:	4908      	ldr	r1, [pc, #32]	; (8005ac4 <UARTEx_SetNbDataToProcess+0x98>)
 8005aa4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005aa6:	fb93 f3f2 	sdiv	r3, r3, r2
 8005aaa:	b29a      	uxth	r2, r3
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005ab2:	bf00      	nop
 8005ab4:	3714      	adds	r7, #20
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abc:	4770      	bx	lr
 8005abe:	bf00      	nop
 8005ac0:	08006a90 	.word	0x08006a90
 8005ac4:	08006a98 	.word	0x08006a98

08005ac8 <__errno>:
 8005ac8:	4b01      	ldr	r3, [pc, #4]	; (8005ad0 <__errno+0x8>)
 8005aca:	6818      	ldr	r0, [r3, #0]
 8005acc:	4770      	bx	lr
 8005ace:	bf00      	nop
 8005ad0:	24000010 	.word	0x24000010

08005ad4 <__libc_init_array>:
 8005ad4:	b570      	push	{r4, r5, r6, lr}
 8005ad6:	4d0d      	ldr	r5, [pc, #52]	; (8005b0c <__libc_init_array+0x38>)
 8005ad8:	4c0d      	ldr	r4, [pc, #52]	; (8005b10 <__libc_init_array+0x3c>)
 8005ada:	1b64      	subs	r4, r4, r5
 8005adc:	10a4      	asrs	r4, r4, #2
 8005ade:	2600      	movs	r6, #0
 8005ae0:	42a6      	cmp	r6, r4
 8005ae2:	d109      	bne.n	8005af8 <__libc_init_array+0x24>
 8005ae4:	4d0b      	ldr	r5, [pc, #44]	; (8005b14 <__libc_init_array+0x40>)
 8005ae6:	4c0c      	ldr	r4, [pc, #48]	; (8005b18 <__libc_init_array+0x44>)
 8005ae8:	f000 ffae 	bl	8006a48 <_init>
 8005aec:	1b64      	subs	r4, r4, r5
 8005aee:	10a4      	asrs	r4, r4, #2
 8005af0:	2600      	movs	r6, #0
 8005af2:	42a6      	cmp	r6, r4
 8005af4:	d105      	bne.n	8005b02 <__libc_init_array+0x2e>
 8005af6:	bd70      	pop	{r4, r5, r6, pc}
 8005af8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005afc:	4798      	blx	r3
 8005afe:	3601      	adds	r6, #1
 8005b00:	e7ee      	b.n	8005ae0 <__libc_init_array+0xc>
 8005b02:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b06:	4798      	blx	r3
 8005b08:	3601      	adds	r6, #1
 8005b0a:	e7f2      	b.n	8005af2 <__libc_init_array+0x1e>
 8005b0c:	08006b40 	.word	0x08006b40
 8005b10:	08006b40 	.word	0x08006b40
 8005b14:	08006b40 	.word	0x08006b40
 8005b18:	08006b44 	.word	0x08006b44

08005b1c <memset>:
 8005b1c:	4402      	add	r2, r0
 8005b1e:	4603      	mov	r3, r0
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d100      	bne.n	8005b26 <memset+0xa>
 8005b24:	4770      	bx	lr
 8005b26:	f803 1b01 	strb.w	r1, [r3], #1
 8005b2a:	e7f9      	b.n	8005b20 <memset+0x4>

08005b2c <iprintf>:
 8005b2c:	b40f      	push	{r0, r1, r2, r3}
 8005b2e:	4b0a      	ldr	r3, [pc, #40]	; (8005b58 <iprintf+0x2c>)
 8005b30:	b513      	push	{r0, r1, r4, lr}
 8005b32:	681c      	ldr	r4, [r3, #0]
 8005b34:	b124      	cbz	r4, 8005b40 <iprintf+0x14>
 8005b36:	69a3      	ldr	r3, [r4, #24]
 8005b38:	b913      	cbnz	r3, 8005b40 <iprintf+0x14>
 8005b3a:	4620      	mov	r0, r4
 8005b3c:	f000 f866 	bl	8005c0c <__sinit>
 8005b40:	ab05      	add	r3, sp, #20
 8005b42:	9a04      	ldr	r2, [sp, #16]
 8005b44:	68a1      	ldr	r1, [r4, #8]
 8005b46:	9301      	str	r3, [sp, #4]
 8005b48:	4620      	mov	r0, r4
 8005b4a:	f000 f9bd 	bl	8005ec8 <_vfiprintf_r>
 8005b4e:	b002      	add	sp, #8
 8005b50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b54:	b004      	add	sp, #16
 8005b56:	4770      	bx	lr
 8005b58:	24000010 	.word	0x24000010

08005b5c <std>:
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	b510      	push	{r4, lr}
 8005b60:	4604      	mov	r4, r0
 8005b62:	e9c0 3300 	strd	r3, r3, [r0]
 8005b66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005b6a:	6083      	str	r3, [r0, #8]
 8005b6c:	8181      	strh	r1, [r0, #12]
 8005b6e:	6643      	str	r3, [r0, #100]	; 0x64
 8005b70:	81c2      	strh	r2, [r0, #14]
 8005b72:	6183      	str	r3, [r0, #24]
 8005b74:	4619      	mov	r1, r3
 8005b76:	2208      	movs	r2, #8
 8005b78:	305c      	adds	r0, #92	; 0x5c
 8005b7a:	f7ff ffcf 	bl	8005b1c <memset>
 8005b7e:	4b05      	ldr	r3, [pc, #20]	; (8005b94 <std+0x38>)
 8005b80:	6263      	str	r3, [r4, #36]	; 0x24
 8005b82:	4b05      	ldr	r3, [pc, #20]	; (8005b98 <std+0x3c>)
 8005b84:	62a3      	str	r3, [r4, #40]	; 0x28
 8005b86:	4b05      	ldr	r3, [pc, #20]	; (8005b9c <std+0x40>)
 8005b88:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005b8a:	4b05      	ldr	r3, [pc, #20]	; (8005ba0 <std+0x44>)
 8005b8c:	6224      	str	r4, [r4, #32]
 8005b8e:	6323      	str	r3, [r4, #48]	; 0x30
 8005b90:	bd10      	pop	{r4, pc}
 8005b92:	bf00      	nop
 8005b94:	08006471 	.word	0x08006471
 8005b98:	08006493 	.word	0x08006493
 8005b9c:	080064cb 	.word	0x080064cb
 8005ba0:	080064ef 	.word	0x080064ef

08005ba4 <_cleanup_r>:
 8005ba4:	4901      	ldr	r1, [pc, #4]	; (8005bac <_cleanup_r+0x8>)
 8005ba6:	f000 b8af 	b.w	8005d08 <_fwalk_reent>
 8005baa:	bf00      	nop
 8005bac:	080067c9 	.word	0x080067c9

08005bb0 <__sfmoreglue>:
 8005bb0:	b570      	push	{r4, r5, r6, lr}
 8005bb2:	2268      	movs	r2, #104	; 0x68
 8005bb4:	1e4d      	subs	r5, r1, #1
 8005bb6:	4355      	muls	r5, r2
 8005bb8:	460e      	mov	r6, r1
 8005bba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005bbe:	f000 f8e5 	bl	8005d8c <_malloc_r>
 8005bc2:	4604      	mov	r4, r0
 8005bc4:	b140      	cbz	r0, 8005bd8 <__sfmoreglue+0x28>
 8005bc6:	2100      	movs	r1, #0
 8005bc8:	e9c0 1600 	strd	r1, r6, [r0]
 8005bcc:	300c      	adds	r0, #12
 8005bce:	60a0      	str	r0, [r4, #8]
 8005bd0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005bd4:	f7ff ffa2 	bl	8005b1c <memset>
 8005bd8:	4620      	mov	r0, r4
 8005bda:	bd70      	pop	{r4, r5, r6, pc}

08005bdc <__sfp_lock_acquire>:
 8005bdc:	4801      	ldr	r0, [pc, #4]	; (8005be4 <__sfp_lock_acquire+0x8>)
 8005bde:	f000 b8b3 	b.w	8005d48 <__retarget_lock_acquire_recursive>
 8005be2:	bf00      	nop
 8005be4:	24000175 	.word	0x24000175

08005be8 <__sfp_lock_release>:
 8005be8:	4801      	ldr	r0, [pc, #4]	; (8005bf0 <__sfp_lock_release+0x8>)
 8005bea:	f000 b8ae 	b.w	8005d4a <__retarget_lock_release_recursive>
 8005bee:	bf00      	nop
 8005bf0:	24000175 	.word	0x24000175

08005bf4 <__sinit_lock_acquire>:
 8005bf4:	4801      	ldr	r0, [pc, #4]	; (8005bfc <__sinit_lock_acquire+0x8>)
 8005bf6:	f000 b8a7 	b.w	8005d48 <__retarget_lock_acquire_recursive>
 8005bfa:	bf00      	nop
 8005bfc:	24000176 	.word	0x24000176

08005c00 <__sinit_lock_release>:
 8005c00:	4801      	ldr	r0, [pc, #4]	; (8005c08 <__sinit_lock_release+0x8>)
 8005c02:	f000 b8a2 	b.w	8005d4a <__retarget_lock_release_recursive>
 8005c06:	bf00      	nop
 8005c08:	24000176 	.word	0x24000176

08005c0c <__sinit>:
 8005c0c:	b510      	push	{r4, lr}
 8005c0e:	4604      	mov	r4, r0
 8005c10:	f7ff fff0 	bl	8005bf4 <__sinit_lock_acquire>
 8005c14:	69a3      	ldr	r3, [r4, #24]
 8005c16:	b11b      	cbz	r3, 8005c20 <__sinit+0x14>
 8005c18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c1c:	f7ff bff0 	b.w	8005c00 <__sinit_lock_release>
 8005c20:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005c24:	6523      	str	r3, [r4, #80]	; 0x50
 8005c26:	4b13      	ldr	r3, [pc, #76]	; (8005c74 <__sinit+0x68>)
 8005c28:	4a13      	ldr	r2, [pc, #76]	; (8005c78 <__sinit+0x6c>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	62a2      	str	r2, [r4, #40]	; 0x28
 8005c2e:	42a3      	cmp	r3, r4
 8005c30:	bf04      	itt	eq
 8005c32:	2301      	moveq	r3, #1
 8005c34:	61a3      	streq	r3, [r4, #24]
 8005c36:	4620      	mov	r0, r4
 8005c38:	f000 f820 	bl	8005c7c <__sfp>
 8005c3c:	6060      	str	r0, [r4, #4]
 8005c3e:	4620      	mov	r0, r4
 8005c40:	f000 f81c 	bl	8005c7c <__sfp>
 8005c44:	60a0      	str	r0, [r4, #8]
 8005c46:	4620      	mov	r0, r4
 8005c48:	f000 f818 	bl	8005c7c <__sfp>
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	60e0      	str	r0, [r4, #12]
 8005c50:	2104      	movs	r1, #4
 8005c52:	6860      	ldr	r0, [r4, #4]
 8005c54:	f7ff ff82 	bl	8005b5c <std>
 8005c58:	68a0      	ldr	r0, [r4, #8]
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	2109      	movs	r1, #9
 8005c5e:	f7ff ff7d 	bl	8005b5c <std>
 8005c62:	68e0      	ldr	r0, [r4, #12]
 8005c64:	2202      	movs	r2, #2
 8005c66:	2112      	movs	r1, #18
 8005c68:	f7ff ff78 	bl	8005b5c <std>
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	61a3      	str	r3, [r4, #24]
 8005c70:	e7d2      	b.n	8005c18 <__sinit+0xc>
 8005c72:	bf00      	nop
 8005c74:	08006aa0 	.word	0x08006aa0
 8005c78:	08005ba5 	.word	0x08005ba5

08005c7c <__sfp>:
 8005c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c7e:	4607      	mov	r7, r0
 8005c80:	f7ff ffac 	bl	8005bdc <__sfp_lock_acquire>
 8005c84:	4b1e      	ldr	r3, [pc, #120]	; (8005d00 <__sfp+0x84>)
 8005c86:	681e      	ldr	r6, [r3, #0]
 8005c88:	69b3      	ldr	r3, [r6, #24]
 8005c8a:	b913      	cbnz	r3, 8005c92 <__sfp+0x16>
 8005c8c:	4630      	mov	r0, r6
 8005c8e:	f7ff ffbd 	bl	8005c0c <__sinit>
 8005c92:	3648      	adds	r6, #72	; 0x48
 8005c94:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005c98:	3b01      	subs	r3, #1
 8005c9a:	d503      	bpl.n	8005ca4 <__sfp+0x28>
 8005c9c:	6833      	ldr	r3, [r6, #0]
 8005c9e:	b30b      	cbz	r3, 8005ce4 <__sfp+0x68>
 8005ca0:	6836      	ldr	r6, [r6, #0]
 8005ca2:	e7f7      	b.n	8005c94 <__sfp+0x18>
 8005ca4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005ca8:	b9d5      	cbnz	r5, 8005ce0 <__sfp+0x64>
 8005caa:	4b16      	ldr	r3, [pc, #88]	; (8005d04 <__sfp+0x88>)
 8005cac:	60e3      	str	r3, [r4, #12]
 8005cae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005cb2:	6665      	str	r5, [r4, #100]	; 0x64
 8005cb4:	f000 f847 	bl	8005d46 <__retarget_lock_init_recursive>
 8005cb8:	f7ff ff96 	bl	8005be8 <__sfp_lock_release>
 8005cbc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005cc0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005cc4:	6025      	str	r5, [r4, #0]
 8005cc6:	61a5      	str	r5, [r4, #24]
 8005cc8:	2208      	movs	r2, #8
 8005cca:	4629      	mov	r1, r5
 8005ccc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005cd0:	f7ff ff24 	bl	8005b1c <memset>
 8005cd4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005cd8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005cdc:	4620      	mov	r0, r4
 8005cde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ce0:	3468      	adds	r4, #104	; 0x68
 8005ce2:	e7d9      	b.n	8005c98 <__sfp+0x1c>
 8005ce4:	2104      	movs	r1, #4
 8005ce6:	4638      	mov	r0, r7
 8005ce8:	f7ff ff62 	bl	8005bb0 <__sfmoreglue>
 8005cec:	4604      	mov	r4, r0
 8005cee:	6030      	str	r0, [r6, #0]
 8005cf0:	2800      	cmp	r0, #0
 8005cf2:	d1d5      	bne.n	8005ca0 <__sfp+0x24>
 8005cf4:	f7ff ff78 	bl	8005be8 <__sfp_lock_release>
 8005cf8:	230c      	movs	r3, #12
 8005cfa:	603b      	str	r3, [r7, #0]
 8005cfc:	e7ee      	b.n	8005cdc <__sfp+0x60>
 8005cfe:	bf00      	nop
 8005d00:	08006aa0 	.word	0x08006aa0
 8005d04:	ffff0001 	.word	0xffff0001

08005d08 <_fwalk_reent>:
 8005d08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d0c:	4606      	mov	r6, r0
 8005d0e:	4688      	mov	r8, r1
 8005d10:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005d14:	2700      	movs	r7, #0
 8005d16:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005d1a:	f1b9 0901 	subs.w	r9, r9, #1
 8005d1e:	d505      	bpl.n	8005d2c <_fwalk_reent+0x24>
 8005d20:	6824      	ldr	r4, [r4, #0]
 8005d22:	2c00      	cmp	r4, #0
 8005d24:	d1f7      	bne.n	8005d16 <_fwalk_reent+0xe>
 8005d26:	4638      	mov	r0, r7
 8005d28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d2c:	89ab      	ldrh	r3, [r5, #12]
 8005d2e:	2b01      	cmp	r3, #1
 8005d30:	d907      	bls.n	8005d42 <_fwalk_reent+0x3a>
 8005d32:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005d36:	3301      	adds	r3, #1
 8005d38:	d003      	beq.n	8005d42 <_fwalk_reent+0x3a>
 8005d3a:	4629      	mov	r1, r5
 8005d3c:	4630      	mov	r0, r6
 8005d3e:	47c0      	blx	r8
 8005d40:	4307      	orrs	r7, r0
 8005d42:	3568      	adds	r5, #104	; 0x68
 8005d44:	e7e9      	b.n	8005d1a <_fwalk_reent+0x12>

08005d46 <__retarget_lock_init_recursive>:
 8005d46:	4770      	bx	lr

08005d48 <__retarget_lock_acquire_recursive>:
 8005d48:	4770      	bx	lr

08005d4a <__retarget_lock_release_recursive>:
 8005d4a:	4770      	bx	lr

08005d4c <sbrk_aligned>:
 8005d4c:	b570      	push	{r4, r5, r6, lr}
 8005d4e:	4e0e      	ldr	r6, [pc, #56]	; (8005d88 <sbrk_aligned+0x3c>)
 8005d50:	460c      	mov	r4, r1
 8005d52:	6831      	ldr	r1, [r6, #0]
 8005d54:	4605      	mov	r5, r0
 8005d56:	b911      	cbnz	r1, 8005d5e <sbrk_aligned+0x12>
 8005d58:	f000 fb7a 	bl	8006450 <_sbrk_r>
 8005d5c:	6030      	str	r0, [r6, #0]
 8005d5e:	4621      	mov	r1, r4
 8005d60:	4628      	mov	r0, r5
 8005d62:	f000 fb75 	bl	8006450 <_sbrk_r>
 8005d66:	1c43      	adds	r3, r0, #1
 8005d68:	d00a      	beq.n	8005d80 <sbrk_aligned+0x34>
 8005d6a:	1cc4      	adds	r4, r0, #3
 8005d6c:	f024 0403 	bic.w	r4, r4, #3
 8005d70:	42a0      	cmp	r0, r4
 8005d72:	d007      	beq.n	8005d84 <sbrk_aligned+0x38>
 8005d74:	1a21      	subs	r1, r4, r0
 8005d76:	4628      	mov	r0, r5
 8005d78:	f000 fb6a 	bl	8006450 <_sbrk_r>
 8005d7c:	3001      	adds	r0, #1
 8005d7e:	d101      	bne.n	8005d84 <sbrk_aligned+0x38>
 8005d80:	f04f 34ff 	mov.w	r4, #4294967295
 8005d84:	4620      	mov	r0, r4
 8005d86:	bd70      	pop	{r4, r5, r6, pc}
 8005d88:	2400017c 	.word	0x2400017c

08005d8c <_malloc_r>:
 8005d8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d90:	1ccd      	adds	r5, r1, #3
 8005d92:	f025 0503 	bic.w	r5, r5, #3
 8005d96:	3508      	adds	r5, #8
 8005d98:	2d0c      	cmp	r5, #12
 8005d9a:	bf38      	it	cc
 8005d9c:	250c      	movcc	r5, #12
 8005d9e:	2d00      	cmp	r5, #0
 8005da0:	4607      	mov	r7, r0
 8005da2:	db01      	blt.n	8005da8 <_malloc_r+0x1c>
 8005da4:	42a9      	cmp	r1, r5
 8005da6:	d905      	bls.n	8005db4 <_malloc_r+0x28>
 8005da8:	230c      	movs	r3, #12
 8005daa:	603b      	str	r3, [r7, #0]
 8005dac:	2600      	movs	r6, #0
 8005dae:	4630      	mov	r0, r6
 8005db0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005db4:	4e2e      	ldr	r6, [pc, #184]	; (8005e70 <_malloc_r+0xe4>)
 8005db6:	f000 fdbb 	bl	8006930 <__malloc_lock>
 8005dba:	6833      	ldr	r3, [r6, #0]
 8005dbc:	461c      	mov	r4, r3
 8005dbe:	bb34      	cbnz	r4, 8005e0e <_malloc_r+0x82>
 8005dc0:	4629      	mov	r1, r5
 8005dc2:	4638      	mov	r0, r7
 8005dc4:	f7ff ffc2 	bl	8005d4c <sbrk_aligned>
 8005dc8:	1c43      	adds	r3, r0, #1
 8005dca:	4604      	mov	r4, r0
 8005dcc:	d14d      	bne.n	8005e6a <_malloc_r+0xde>
 8005dce:	6834      	ldr	r4, [r6, #0]
 8005dd0:	4626      	mov	r6, r4
 8005dd2:	2e00      	cmp	r6, #0
 8005dd4:	d140      	bne.n	8005e58 <_malloc_r+0xcc>
 8005dd6:	6823      	ldr	r3, [r4, #0]
 8005dd8:	4631      	mov	r1, r6
 8005dda:	4638      	mov	r0, r7
 8005ddc:	eb04 0803 	add.w	r8, r4, r3
 8005de0:	f000 fb36 	bl	8006450 <_sbrk_r>
 8005de4:	4580      	cmp	r8, r0
 8005de6:	d13a      	bne.n	8005e5e <_malloc_r+0xd2>
 8005de8:	6821      	ldr	r1, [r4, #0]
 8005dea:	3503      	adds	r5, #3
 8005dec:	1a6d      	subs	r5, r5, r1
 8005dee:	f025 0503 	bic.w	r5, r5, #3
 8005df2:	3508      	adds	r5, #8
 8005df4:	2d0c      	cmp	r5, #12
 8005df6:	bf38      	it	cc
 8005df8:	250c      	movcc	r5, #12
 8005dfa:	4629      	mov	r1, r5
 8005dfc:	4638      	mov	r0, r7
 8005dfe:	f7ff ffa5 	bl	8005d4c <sbrk_aligned>
 8005e02:	3001      	adds	r0, #1
 8005e04:	d02b      	beq.n	8005e5e <_malloc_r+0xd2>
 8005e06:	6823      	ldr	r3, [r4, #0]
 8005e08:	442b      	add	r3, r5
 8005e0a:	6023      	str	r3, [r4, #0]
 8005e0c:	e00e      	b.n	8005e2c <_malloc_r+0xa0>
 8005e0e:	6822      	ldr	r2, [r4, #0]
 8005e10:	1b52      	subs	r2, r2, r5
 8005e12:	d41e      	bmi.n	8005e52 <_malloc_r+0xc6>
 8005e14:	2a0b      	cmp	r2, #11
 8005e16:	d916      	bls.n	8005e46 <_malloc_r+0xba>
 8005e18:	1961      	adds	r1, r4, r5
 8005e1a:	42a3      	cmp	r3, r4
 8005e1c:	6025      	str	r5, [r4, #0]
 8005e1e:	bf18      	it	ne
 8005e20:	6059      	strne	r1, [r3, #4]
 8005e22:	6863      	ldr	r3, [r4, #4]
 8005e24:	bf08      	it	eq
 8005e26:	6031      	streq	r1, [r6, #0]
 8005e28:	5162      	str	r2, [r4, r5]
 8005e2a:	604b      	str	r3, [r1, #4]
 8005e2c:	4638      	mov	r0, r7
 8005e2e:	f104 060b 	add.w	r6, r4, #11
 8005e32:	f000 fd83 	bl	800693c <__malloc_unlock>
 8005e36:	f026 0607 	bic.w	r6, r6, #7
 8005e3a:	1d23      	adds	r3, r4, #4
 8005e3c:	1af2      	subs	r2, r6, r3
 8005e3e:	d0b6      	beq.n	8005dae <_malloc_r+0x22>
 8005e40:	1b9b      	subs	r3, r3, r6
 8005e42:	50a3      	str	r3, [r4, r2]
 8005e44:	e7b3      	b.n	8005dae <_malloc_r+0x22>
 8005e46:	6862      	ldr	r2, [r4, #4]
 8005e48:	42a3      	cmp	r3, r4
 8005e4a:	bf0c      	ite	eq
 8005e4c:	6032      	streq	r2, [r6, #0]
 8005e4e:	605a      	strne	r2, [r3, #4]
 8005e50:	e7ec      	b.n	8005e2c <_malloc_r+0xa0>
 8005e52:	4623      	mov	r3, r4
 8005e54:	6864      	ldr	r4, [r4, #4]
 8005e56:	e7b2      	b.n	8005dbe <_malloc_r+0x32>
 8005e58:	4634      	mov	r4, r6
 8005e5a:	6876      	ldr	r6, [r6, #4]
 8005e5c:	e7b9      	b.n	8005dd2 <_malloc_r+0x46>
 8005e5e:	230c      	movs	r3, #12
 8005e60:	603b      	str	r3, [r7, #0]
 8005e62:	4638      	mov	r0, r7
 8005e64:	f000 fd6a 	bl	800693c <__malloc_unlock>
 8005e68:	e7a1      	b.n	8005dae <_malloc_r+0x22>
 8005e6a:	6025      	str	r5, [r4, #0]
 8005e6c:	e7de      	b.n	8005e2c <_malloc_r+0xa0>
 8005e6e:	bf00      	nop
 8005e70:	24000178 	.word	0x24000178

08005e74 <__sfputc_r>:
 8005e74:	6893      	ldr	r3, [r2, #8]
 8005e76:	3b01      	subs	r3, #1
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	b410      	push	{r4}
 8005e7c:	6093      	str	r3, [r2, #8]
 8005e7e:	da08      	bge.n	8005e92 <__sfputc_r+0x1e>
 8005e80:	6994      	ldr	r4, [r2, #24]
 8005e82:	42a3      	cmp	r3, r4
 8005e84:	db01      	blt.n	8005e8a <__sfputc_r+0x16>
 8005e86:	290a      	cmp	r1, #10
 8005e88:	d103      	bne.n	8005e92 <__sfputc_r+0x1e>
 8005e8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005e8e:	f000 bb33 	b.w	80064f8 <__swbuf_r>
 8005e92:	6813      	ldr	r3, [r2, #0]
 8005e94:	1c58      	adds	r0, r3, #1
 8005e96:	6010      	str	r0, [r2, #0]
 8005e98:	7019      	strb	r1, [r3, #0]
 8005e9a:	4608      	mov	r0, r1
 8005e9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ea0:	4770      	bx	lr

08005ea2 <__sfputs_r>:
 8005ea2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ea4:	4606      	mov	r6, r0
 8005ea6:	460f      	mov	r7, r1
 8005ea8:	4614      	mov	r4, r2
 8005eaa:	18d5      	adds	r5, r2, r3
 8005eac:	42ac      	cmp	r4, r5
 8005eae:	d101      	bne.n	8005eb4 <__sfputs_r+0x12>
 8005eb0:	2000      	movs	r0, #0
 8005eb2:	e007      	b.n	8005ec4 <__sfputs_r+0x22>
 8005eb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005eb8:	463a      	mov	r2, r7
 8005eba:	4630      	mov	r0, r6
 8005ebc:	f7ff ffda 	bl	8005e74 <__sfputc_r>
 8005ec0:	1c43      	adds	r3, r0, #1
 8005ec2:	d1f3      	bne.n	8005eac <__sfputs_r+0xa>
 8005ec4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005ec8 <_vfiprintf_r>:
 8005ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ecc:	460d      	mov	r5, r1
 8005ece:	b09d      	sub	sp, #116	; 0x74
 8005ed0:	4614      	mov	r4, r2
 8005ed2:	4698      	mov	r8, r3
 8005ed4:	4606      	mov	r6, r0
 8005ed6:	b118      	cbz	r0, 8005ee0 <_vfiprintf_r+0x18>
 8005ed8:	6983      	ldr	r3, [r0, #24]
 8005eda:	b90b      	cbnz	r3, 8005ee0 <_vfiprintf_r+0x18>
 8005edc:	f7ff fe96 	bl	8005c0c <__sinit>
 8005ee0:	4b89      	ldr	r3, [pc, #548]	; (8006108 <_vfiprintf_r+0x240>)
 8005ee2:	429d      	cmp	r5, r3
 8005ee4:	d11b      	bne.n	8005f1e <_vfiprintf_r+0x56>
 8005ee6:	6875      	ldr	r5, [r6, #4]
 8005ee8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005eea:	07d9      	lsls	r1, r3, #31
 8005eec:	d405      	bmi.n	8005efa <_vfiprintf_r+0x32>
 8005eee:	89ab      	ldrh	r3, [r5, #12]
 8005ef0:	059a      	lsls	r2, r3, #22
 8005ef2:	d402      	bmi.n	8005efa <_vfiprintf_r+0x32>
 8005ef4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005ef6:	f7ff ff27 	bl	8005d48 <__retarget_lock_acquire_recursive>
 8005efa:	89ab      	ldrh	r3, [r5, #12]
 8005efc:	071b      	lsls	r3, r3, #28
 8005efe:	d501      	bpl.n	8005f04 <_vfiprintf_r+0x3c>
 8005f00:	692b      	ldr	r3, [r5, #16]
 8005f02:	b9eb      	cbnz	r3, 8005f40 <_vfiprintf_r+0x78>
 8005f04:	4629      	mov	r1, r5
 8005f06:	4630      	mov	r0, r6
 8005f08:	f000 fb5a 	bl	80065c0 <__swsetup_r>
 8005f0c:	b1c0      	cbz	r0, 8005f40 <_vfiprintf_r+0x78>
 8005f0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005f10:	07dc      	lsls	r4, r3, #31
 8005f12:	d50e      	bpl.n	8005f32 <_vfiprintf_r+0x6a>
 8005f14:	f04f 30ff 	mov.w	r0, #4294967295
 8005f18:	b01d      	add	sp, #116	; 0x74
 8005f1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f1e:	4b7b      	ldr	r3, [pc, #492]	; (800610c <_vfiprintf_r+0x244>)
 8005f20:	429d      	cmp	r5, r3
 8005f22:	d101      	bne.n	8005f28 <_vfiprintf_r+0x60>
 8005f24:	68b5      	ldr	r5, [r6, #8]
 8005f26:	e7df      	b.n	8005ee8 <_vfiprintf_r+0x20>
 8005f28:	4b79      	ldr	r3, [pc, #484]	; (8006110 <_vfiprintf_r+0x248>)
 8005f2a:	429d      	cmp	r5, r3
 8005f2c:	bf08      	it	eq
 8005f2e:	68f5      	ldreq	r5, [r6, #12]
 8005f30:	e7da      	b.n	8005ee8 <_vfiprintf_r+0x20>
 8005f32:	89ab      	ldrh	r3, [r5, #12]
 8005f34:	0598      	lsls	r0, r3, #22
 8005f36:	d4ed      	bmi.n	8005f14 <_vfiprintf_r+0x4c>
 8005f38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005f3a:	f7ff ff06 	bl	8005d4a <__retarget_lock_release_recursive>
 8005f3e:	e7e9      	b.n	8005f14 <_vfiprintf_r+0x4c>
 8005f40:	2300      	movs	r3, #0
 8005f42:	9309      	str	r3, [sp, #36]	; 0x24
 8005f44:	2320      	movs	r3, #32
 8005f46:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005f4a:	f8cd 800c 	str.w	r8, [sp, #12]
 8005f4e:	2330      	movs	r3, #48	; 0x30
 8005f50:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006114 <_vfiprintf_r+0x24c>
 8005f54:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005f58:	f04f 0901 	mov.w	r9, #1
 8005f5c:	4623      	mov	r3, r4
 8005f5e:	469a      	mov	sl, r3
 8005f60:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005f64:	b10a      	cbz	r2, 8005f6a <_vfiprintf_r+0xa2>
 8005f66:	2a25      	cmp	r2, #37	; 0x25
 8005f68:	d1f9      	bne.n	8005f5e <_vfiprintf_r+0x96>
 8005f6a:	ebba 0b04 	subs.w	fp, sl, r4
 8005f6e:	d00b      	beq.n	8005f88 <_vfiprintf_r+0xc0>
 8005f70:	465b      	mov	r3, fp
 8005f72:	4622      	mov	r2, r4
 8005f74:	4629      	mov	r1, r5
 8005f76:	4630      	mov	r0, r6
 8005f78:	f7ff ff93 	bl	8005ea2 <__sfputs_r>
 8005f7c:	3001      	adds	r0, #1
 8005f7e:	f000 80aa 	beq.w	80060d6 <_vfiprintf_r+0x20e>
 8005f82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f84:	445a      	add	r2, fp
 8005f86:	9209      	str	r2, [sp, #36]	; 0x24
 8005f88:	f89a 3000 	ldrb.w	r3, [sl]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	f000 80a2 	beq.w	80060d6 <_vfiprintf_r+0x20e>
 8005f92:	2300      	movs	r3, #0
 8005f94:	f04f 32ff 	mov.w	r2, #4294967295
 8005f98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005f9c:	f10a 0a01 	add.w	sl, sl, #1
 8005fa0:	9304      	str	r3, [sp, #16]
 8005fa2:	9307      	str	r3, [sp, #28]
 8005fa4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005fa8:	931a      	str	r3, [sp, #104]	; 0x68
 8005faa:	4654      	mov	r4, sl
 8005fac:	2205      	movs	r2, #5
 8005fae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fb2:	4858      	ldr	r0, [pc, #352]	; (8006114 <_vfiprintf_r+0x24c>)
 8005fb4:	f7fa f994 	bl	80002e0 <memchr>
 8005fb8:	9a04      	ldr	r2, [sp, #16]
 8005fba:	b9d8      	cbnz	r0, 8005ff4 <_vfiprintf_r+0x12c>
 8005fbc:	06d1      	lsls	r1, r2, #27
 8005fbe:	bf44      	itt	mi
 8005fc0:	2320      	movmi	r3, #32
 8005fc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005fc6:	0713      	lsls	r3, r2, #28
 8005fc8:	bf44      	itt	mi
 8005fca:	232b      	movmi	r3, #43	; 0x2b
 8005fcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005fd0:	f89a 3000 	ldrb.w	r3, [sl]
 8005fd4:	2b2a      	cmp	r3, #42	; 0x2a
 8005fd6:	d015      	beq.n	8006004 <_vfiprintf_r+0x13c>
 8005fd8:	9a07      	ldr	r2, [sp, #28]
 8005fda:	4654      	mov	r4, sl
 8005fdc:	2000      	movs	r0, #0
 8005fde:	f04f 0c0a 	mov.w	ip, #10
 8005fe2:	4621      	mov	r1, r4
 8005fe4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005fe8:	3b30      	subs	r3, #48	; 0x30
 8005fea:	2b09      	cmp	r3, #9
 8005fec:	d94e      	bls.n	800608c <_vfiprintf_r+0x1c4>
 8005fee:	b1b0      	cbz	r0, 800601e <_vfiprintf_r+0x156>
 8005ff0:	9207      	str	r2, [sp, #28]
 8005ff2:	e014      	b.n	800601e <_vfiprintf_r+0x156>
 8005ff4:	eba0 0308 	sub.w	r3, r0, r8
 8005ff8:	fa09 f303 	lsl.w	r3, r9, r3
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	9304      	str	r3, [sp, #16]
 8006000:	46a2      	mov	sl, r4
 8006002:	e7d2      	b.n	8005faa <_vfiprintf_r+0xe2>
 8006004:	9b03      	ldr	r3, [sp, #12]
 8006006:	1d19      	adds	r1, r3, #4
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	9103      	str	r1, [sp, #12]
 800600c:	2b00      	cmp	r3, #0
 800600e:	bfbb      	ittet	lt
 8006010:	425b      	neglt	r3, r3
 8006012:	f042 0202 	orrlt.w	r2, r2, #2
 8006016:	9307      	strge	r3, [sp, #28]
 8006018:	9307      	strlt	r3, [sp, #28]
 800601a:	bfb8      	it	lt
 800601c:	9204      	strlt	r2, [sp, #16]
 800601e:	7823      	ldrb	r3, [r4, #0]
 8006020:	2b2e      	cmp	r3, #46	; 0x2e
 8006022:	d10c      	bne.n	800603e <_vfiprintf_r+0x176>
 8006024:	7863      	ldrb	r3, [r4, #1]
 8006026:	2b2a      	cmp	r3, #42	; 0x2a
 8006028:	d135      	bne.n	8006096 <_vfiprintf_r+0x1ce>
 800602a:	9b03      	ldr	r3, [sp, #12]
 800602c:	1d1a      	adds	r2, r3, #4
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	9203      	str	r2, [sp, #12]
 8006032:	2b00      	cmp	r3, #0
 8006034:	bfb8      	it	lt
 8006036:	f04f 33ff 	movlt.w	r3, #4294967295
 800603a:	3402      	adds	r4, #2
 800603c:	9305      	str	r3, [sp, #20]
 800603e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006124 <_vfiprintf_r+0x25c>
 8006042:	7821      	ldrb	r1, [r4, #0]
 8006044:	2203      	movs	r2, #3
 8006046:	4650      	mov	r0, sl
 8006048:	f7fa f94a 	bl	80002e0 <memchr>
 800604c:	b140      	cbz	r0, 8006060 <_vfiprintf_r+0x198>
 800604e:	2340      	movs	r3, #64	; 0x40
 8006050:	eba0 000a 	sub.w	r0, r0, sl
 8006054:	fa03 f000 	lsl.w	r0, r3, r0
 8006058:	9b04      	ldr	r3, [sp, #16]
 800605a:	4303      	orrs	r3, r0
 800605c:	3401      	adds	r4, #1
 800605e:	9304      	str	r3, [sp, #16]
 8006060:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006064:	482c      	ldr	r0, [pc, #176]	; (8006118 <_vfiprintf_r+0x250>)
 8006066:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800606a:	2206      	movs	r2, #6
 800606c:	f7fa f938 	bl	80002e0 <memchr>
 8006070:	2800      	cmp	r0, #0
 8006072:	d03f      	beq.n	80060f4 <_vfiprintf_r+0x22c>
 8006074:	4b29      	ldr	r3, [pc, #164]	; (800611c <_vfiprintf_r+0x254>)
 8006076:	bb1b      	cbnz	r3, 80060c0 <_vfiprintf_r+0x1f8>
 8006078:	9b03      	ldr	r3, [sp, #12]
 800607a:	3307      	adds	r3, #7
 800607c:	f023 0307 	bic.w	r3, r3, #7
 8006080:	3308      	adds	r3, #8
 8006082:	9303      	str	r3, [sp, #12]
 8006084:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006086:	443b      	add	r3, r7
 8006088:	9309      	str	r3, [sp, #36]	; 0x24
 800608a:	e767      	b.n	8005f5c <_vfiprintf_r+0x94>
 800608c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006090:	460c      	mov	r4, r1
 8006092:	2001      	movs	r0, #1
 8006094:	e7a5      	b.n	8005fe2 <_vfiprintf_r+0x11a>
 8006096:	2300      	movs	r3, #0
 8006098:	3401      	adds	r4, #1
 800609a:	9305      	str	r3, [sp, #20]
 800609c:	4619      	mov	r1, r3
 800609e:	f04f 0c0a 	mov.w	ip, #10
 80060a2:	4620      	mov	r0, r4
 80060a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80060a8:	3a30      	subs	r2, #48	; 0x30
 80060aa:	2a09      	cmp	r2, #9
 80060ac:	d903      	bls.n	80060b6 <_vfiprintf_r+0x1ee>
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d0c5      	beq.n	800603e <_vfiprintf_r+0x176>
 80060b2:	9105      	str	r1, [sp, #20]
 80060b4:	e7c3      	b.n	800603e <_vfiprintf_r+0x176>
 80060b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80060ba:	4604      	mov	r4, r0
 80060bc:	2301      	movs	r3, #1
 80060be:	e7f0      	b.n	80060a2 <_vfiprintf_r+0x1da>
 80060c0:	ab03      	add	r3, sp, #12
 80060c2:	9300      	str	r3, [sp, #0]
 80060c4:	462a      	mov	r2, r5
 80060c6:	4b16      	ldr	r3, [pc, #88]	; (8006120 <_vfiprintf_r+0x258>)
 80060c8:	a904      	add	r1, sp, #16
 80060ca:	4630      	mov	r0, r6
 80060cc:	f3af 8000 	nop.w
 80060d0:	4607      	mov	r7, r0
 80060d2:	1c78      	adds	r0, r7, #1
 80060d4:	d1d6      	bne.n	8006084 <_vfiprintf_r+0x1bc>
 80060d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80060d8:	07d9      	lsls	r1, r3, #31
 80060da:	d405      	bmi.n	80060e8 <_vfiprintf_r+0x220>
 80060dc:	89ab      	ldrh	r3, [r5, #12]
 80060de:	059a      	lsls	r2, r3, #22
 80060e0:	d402      	bmi.n	80060e8 <_vfiprintf_r+0x220>
 80060e2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80060e4:	f7ff fe31 	bl	8005d4a <__retarget_lock_release_recursive>
 80060e8:	89ab      	ldrh	r3, [r5, #12]
 80060ea:	065b      	lsls	r3, r3, #25
 80060ec:	f53f af12 	bmi.w	8005f14 <_vfiprintf_r+0x4c>
 80060f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80060f2:	e711      	b.n	8005f18 <_vfiprintf_r+0x50>
 80060f4:	ab03      	add	r3, sp, #12
 80060f6:	9300      	str	r3, [sp, #0]
 80060f8:	462a      	mov	r2, r5
 80060fa:	4b09      	ldr	r3, [pc, #36]	; (8006120 <_vfiprintf_r+0x258>)
 80060fc:	a904      	add	r1, sp, #16
 80060fe:	4630      	mov	r0, r6
 8006100:	f000 f880 	bl	8006204 <_printf_i>
 8006104:	e7e4      	b.n	80060d0 <_vfiprintf_r+0x208>
 8006106:	bf00      	nop
 8006108:	08006ac4 	.word	0x08006ac4
 800610c:	08006ae4 	.word	0x08006ae4
 8006110:	08006aa4 	.word	0x08006aa4
 8006114:	08006b04 	.word	0x08006b04
 8006118:	08006b0e 	.word	0x08006b0e
 800611c:	00000000 	.word	0x00000000
 8006120:	08005ea3 	.word	0x08005ea3
 8006124:	08006b0a 	.word	0x08006b0a

08006128 <_printf_common>:
 8006128:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800612c:	4616      	mov	r6, r2
 800612e:	4699      	mov	r9, r3
 8006130:	688a      	ldr	r2, [r1, #8]
 8006132:	690b      	ldr	r3, [r1, #16]
 8006134:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006138:	4293      	cmp	r3, r2
 800613a:	bfb8      	it	lt
 800613c:	4613      	movlt	r3, r2
 800613e:	6033      	str	r3, [r6, #0]
 8006140:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006144:	4607      	mov	r7, r0
 8006146:	460c      	mov	r4, r1
 8006148:	b10a      	cbz	r2, 800614e <_printf_common+0x26>
 800614a:	3301      	adds	r3, #1
 800614c:	6033      	str	r3, [r6, #0]
 800614e:	6823      	ldr	r3, [r4, #0]
 8006150:	0699      	lsls	r1, r3, #26
 8006152:	bf42      	ittt	mi
 8006154:	6833      	ldrmi	r3, [r6, #0]
 8006156:	3302      	addmi	r3, #2
 8006158:	6033      	strmi	r3, [r6, #0]
 800615a:	6825      	ldr	r5, [r4, #0]
 800615c:	f015 0506 	ands.w	r5, r5, #6
 8006160:	d106      	bne.n	8006170 <_printf_common+0x48>
 8006162:	f104 0a19 	add.w	sl, r4, #25
 8006166:	68e3      	ldr	r3, [r4, #12]
 8006168:	6832      	ldr	r2, [r6, #0]
 800616a:	1a9b      	subs	r3, r3, r2
 800616c:	42ab      	cmp	r3, r5
 800616e:	dc26      	bgt.n	80061be <_printf_common+0x96>
 8006170:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006174:	1e13      	subs	r3, r2, #0
 8006176:	6822      	ldr	r2, [r4, #0]
 8006178:	bf18      	it	ne
 800617a:	2301      	movne	r3, #1
 800617c:	0692      	lsls	r2, r2, #26
 800617e:	d42b      	bmi.n	80061d8 <_printf_common+0xb0>
 8006180:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006184:	4649      	mov	r1, r9
 8006186:	4638      	mov	r0, r7
 8006188:	47c0      	blx	r8
 800618a:	3001      	adds	r0, #1
 800618c:	d01e      	beq.n	80061cc <_printf_common+0xa4>
 800618e:	6823      	ldr	r3, [r4, #0]
 8006190:	68e5      	ldr	r5, [r4, #12]
 8006192:	6832      	ldr	r2, [r6, #0]
 8006194:	f003 0306 	and.w	r3, r3, #6
 8006198:	2b04      	cmp	r3, #4
 800619a:	bf08      	it	eq
 800619c:	1aad      	subeq	r5, r5, r2
 800619e:	68a3      	ldr	r3, [r4, #8]
 80061a0:	6922      	ldr	r2, [r4, #16]
 80061a2:	bf0c      	ite	eq
 80061a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80061a8:	2500      	movne	r5, #0
 80061aa:	4293      	cmp	r3, r2
 80061ac:	bfc4      	itt	gt
 80061ae:	1a9b      	subgt	r3, r3, r2
 80061b0:	18ed      	addgt	r5, r5, r3
 80061b2:	2600      	movs	r6, #0
 80061b4:	341a      	adds	r4, #26
 80061b6:	42b5      	cmp	r5, r6
 80061b8:	d11a      	bne.n	80061f0 <_printf_common+0xc8>
 80061ba:	2000      	movs	r0, #0
 80061bc:	e008      	b.n	80061d0 <_printf_common+0xa8>
 80061be:	2301      	movs	r3, #1
 80061c0:	4652      	mov	r2, sl
 80061c2:	4649      	mov	r1, r9
 80061c4:	4638      	mov	r0, r7
 80061c6:	47c0      	blx	r8
 80061c8:	3001      	adds	r0, #1
 80061ca:	d103      	bne.n	80061d4 <_printf_common+0xac>
 80061cc:	f04f 30ff 	mov.w	r0, #4294967295
 80061d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061d4:	3501      	adds	r5, #1
 80061d6:	e7c6      	b.n	8006166 <_printf_common+0x3e>
 80061d8:	18e1      	adds	r1, r4, r3
 80061da:	1c5a      	adds	r2, r3, #1
 80061dc:	2030      	movs	r0, #48	; 0x30
 80061de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80061e2:	4422      	add	r2, r4
 80061e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80061e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80061ec:	3302      	adds	r3, #2
 80061ee:	e7c7      	b.n	8006180 <_printf_common+0x58>
 80061f0:	2301      	movs	r3, #1
 80061f2:	4622      	mov	r2, r4
 80061f4:	4649      	mov	r1, r9
 80061f6:	4638      	mov	r0, r7
 80061f8:	47c0      	blx	r8
 80061fa:	3001      	adds	r0, #1
 80061fc:	d0e6      	beq.n	80061cc <_printf_common+0xa4>
 80061fe:	3601      	adds	r6, #1
 8006200:	e7d9      	b.n	80061b6 <_printf_common+0x8e>
	...

08006204 <_printf_i>:
 8006204:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006208:	7e0f      	ldrb	r7, [r1, #24]
 800620a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800620c:	2f78      	cmp	r7, #120	; 0x78
 800620e:	4691      	mov	r9, r2
 8006210:	4680      	mov	r8, r0
 8006212:	460c      	mov	r4, r1
 8006214:	469a      	mov	sl, r3
 8006216:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800621a:	d807      	bhi.n	800622c <_printf_i+0x28>
 800621c:	2f62      	cmp	r7, #98	; 0x62
 800621e:	d80a      	bhi.n	8006236 <_printf_i+0x32>
 8006220:	2f00      	cmp	r7, #0
 8006222:	f000 80d8 	beq.w	80063d6 <_printf_i+0x1d2>
 8006226:	2f58      	cmp	r7, #88	; 0x58
 8006228:	f000 80a3 	beq.w	8006372 <_printf_i+0x16e>
 800622c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006230:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006234:	e03a      	b.n	80062ac <_printf_i+0xa8>
 8006236:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800623a:	2b15      	cmp	r3, #21
 800623c:	d8f6      	bhi.n	800622c <_printf_i+0x28>
 800623e:	a101      	add	r1, pc, #4	; (adr r1, 8006244 <_printf_i+0x40>)
 8006240:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006244:	0800629d 	.word	0x0800629d
 8006248:	080062b1 	.word	0x080062b1
 800624c:	0800622d 	.word	0x0800622d
 8006250:	0800622d 	.word	0x0800622d
 8006254:	0800622d 	.word	0x0800622d
 8006258:	0800622d 	.word	0x0800622d
 800625c:	080062b1 	.word	0x080062b1
 8006260:	0800622d 	.word	0x0800622d
 8006264:	0800622d 	.word	0x0800622d
 8006268:	0800622d 	.word	0x0800622d
 800626c:	0800622d 	.word	0x0800622d
 8006270:	080063bd 	.word	0x080063bd
 8006274:	080062e1 	.word	0x080062e1
 8006278:	0800639f 	.word	0x0800639f
 800627c:	0800622d 	.word	0x0800622d
 8006280:	0800622d 	.word	0x0800622d
 8006284:	080063df 	.word	0x080063df
 8006288:	0800622d 	.word	0x0800622d
 800628c:	080062e1 	.word	0x080062e1
 8006290:	0800622d 	.word	0x0800622d
 8006294:	0800622d 	.word	0x0800622d
 8006298:	080063a7 	.word	0x080063a7
 800629c:	682b      	ldr	r3, [r5, #0]
 800629e:	1d1a      	adds	r2, r3, #4
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	602a      	str	r2, [r5, #0]
 80062a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80062a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80062ac:	2301      	movs	r3, #1
 80062ae:	e0a3      	b.n	80063f8 <_printf_i+0x1f4>
 80062b0:	6820      	ldr	r0, [r4, #0]
 80062b2:	6829      	ldr	r1, [r5, #0]
 80062b4:	0606      	lsls	r6, r0, #24
 80062b6:	f101 0304 	add.w	r3, r1, #4
 80062ba:	d50a      	bpl.n	80062d2 <_printf_i+0xce>
 80062bc:	680e      	ldr	r6, [r1, #0]
 80062be:	602b      	str	r3, [r5, #0]
 80062c0:	2e00      	cmp	r6, #0
 80062c2:	da03      	bge.n	80062cc <_printf_i+0xc8>
 80062c4:	232d      	movs	r3, #45	; 0x2d
 80062c6:	4276      	negs	r6, r6
 80062c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062cc:	485e      	ldr	r0, [pc, #376]	; (8006448 <_printf_i+0x244>)
 80062ce:	230a      	movs	r3, #10
 80062d0:	e019      	b.n	8006306 <_printf_i+0x102>
 80062d2:	680e      	ldr	r6, [r1, #0]
 80062d4:	602b      	str	r3, [r5, #0]
 80062d6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80062da:	bf18      	it	ne
 80062dc:	b236      	sxthne	r6, r6
 80062de:	e7ef      	b.n	80062c0 <_printf_i+0xbc>
 80062e0:	682b      	ldr	r3, [r5, #0]
 80062e2:	6820      	ldr	r0, [r4, #0]
 80062e4:	1d19      	adds	r1, r3, #4
 80062e6:	6029      	str	r1, [r5, #0]
 80062e8:	0601      	lsls	r1, r0, #24
 80062ea:	d501      	bpl.n	80062f0 <_printf_i+0xec>
 80062ec:	681e      	ldr	r6, [r3, #0]
 80062ee:	e002      	b.n	80062f6 <_printf_i+0xf2>
 80062f0:	0646      	lsls	r6, r0, #25
 80062f2:	d5fb      	bpl.n	80062ec <_printf_i+0xe8>
 80062f4:	881e      	ldrh	r6, [r3, #0]
 80062f6:	4854      	ldr	r0, [pc, #336]	; (8006448 <_printf_i+0x244>)
 80062f8:	2f6f      	cmp	r7, #111	; 0x6f
 80062fa:	bf0c      	ite	eq
 80062fc:	2308      	moveq	r3, #8
 80062fe:	230a      	movne	r3, #10
 8006300:	2100      	movs	r1, #0
 8006302:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006306:	6865      	ldr	r5, [r4, #4]
 8006308:	60a5      	str	r5, [r4, #8]
 800630a:	2d00      	cmp	r5, #0
 800630c:	bfa2      	ittt	ge
 800630e:	6821      	ldrge	r1, [r4, #0]
 8006310:	f021 0104 	bicge.w	r1, r1, #4
 8006314:	6021      	strge	r1, [r4, #0]
 8006316:	b90e      	cbnz	r6, 800631c <_printf_i+0x118>
 8006318:	2d00      	cmp	r5, #0
 800631a:	d04d      	beq.n	80063b8 <_printf_i+0x1b4>
 800631c:	4615      	mov	r5, r2
 800631e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006322:	fb03 6711 	mls	r7, r3, r1, r6
 8006326:	5dc7      	ldrb	r7, [r0, r7]
 8006328:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800632c:	4637      	mov	r7, r6
 800632e:	42bb      	cmp	r3, r7
 8006330:	460e      	mov	r6, r1
 8006332:	d9f4      	bls.n	800631e <_printf_i+0x11a>
 8006334:	2b08      	cmp	r3, #8
 8006336:	d10b      	bne.n	8006350 <_printf_i+0x14c>
 8006338:	6823      	ldr	r3, [r4, #0]
 800633a:	07de      	lsls	r6, r3, #31
 800633c:	d508      	bpl.n	8006350 <_printf_i+0x14c>
 800633e:	6923      	ldr	r3, [r4, #16]
 8006340:	6861      	ldr	r1, [r4, #4]
 8006342:	4299      	cmp	r1, r3
 8006344:	bfde      	ittt	le
 8006346:	2330      	movle	r3, #48	; 0x30
 8006348:	f805 3c01 	strble.w	r3, [r5, #-1]
 800634c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006350:	1b52      	subs	r2, r2, r5
 8006352:	6122      	str	r2, [r4, #16]
 8006354:	f8cd a000 	str.w	sl, [sp]
 8006358:	464b      	mov	r3, r9
 800635a:	aa03      	add	r2, sp, #12
 800635c:	4621      	mov	r1, r4
 800635e:	4640      	mov	r0, r8
 8006360:	f7ff fee2 	bl	8006128 <_printf_common>
 8006364:	3001      	adds	r0, #1
 8006366:	d14c      	bne.n	8006402 <_printf_i+0x1fe>
 8006368:	f04f 30ff 	mov.w	r0, #4294967295
 800636c:	b004      	add	sp, #16
 800636e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006372:	4835      	ldr	r0, [pc, #212]	; (8006448 <_printf_i+0x244>)
 8006374:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006378:	6829      	ldr	r1, [r5, #0]
 800637a:	6823      	ldr	r3, [r4, #0]
 800637c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006380:	6029      	str	r1, [r5, #0]
 8006382:	061d      	lsls	r5, r3, #24
 8006384:	d514      	bpl.n	80063b0 <_printf_i+0x1ac>
 8006386:	07df      	lsls	r7, r3, #31
 8006388:	bf44      	itt	mi
 800638a:	f043 0320 	orrmi.w	r3, r3, #32
 800638e:	6023      	strmi	r3, [r4, #0]
 8006390:	b91e      	cbnz	r6, 800639a <_printf_i+0x196>
 8006392:	6823      	ldr	r3, [r4, #0]
 8006394:	f023 0320 	bic.w	r3, r3, #32
 8006398:	6023      	str	r3, [r4, #0]
 800639a:	2310      	movs	r3, #16
 800639c:	e7b0      	b.n	8006300 <_printf_i+0xfc>
 800639e:	6823      	ldr	r3, [r4, #0]
 80063a0:	f043 0320 	orr.w	r3, r3, #32
 80063a4:	6023      	str	r3, [r4, #0]
 80063a6:	2378      	movs	r3, #120	; 0x78
 80063a8:	4828      	ldr	r0, [pc, #160]	; (800644c <_printf_i+0x248>)
 80063aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80063ae:	e7e3      	b.n	8006378 <_printf_i+0x174>
 80063b0:	0659      	lsls	r1, r3, #25
 80063b2:	bf48      	it	mi
 80063b4:	b2b6      	uxthmi	r6, r6
 80063b6:	e7e6      	b.n	8006386 <_printf_i+0x182>
 80063b8:	4615      	mov	r5, r2
 80063ba:	e7bb      	b.n	8006334 <_printf_i+0x130>
 80063bc:	682b      	ldr	r3, [r5, #0]
 80063be:	6826      	ldr	r6, [r4, #0]
 80063c0:	6961      	ldr	r1, [r4, #20]
 80063c2:	1d18      	adds	r0, r3, #4
 80063c4:	6028      	str	r0, [r5, #0]
 80063c6:	0635      	lsls	r5, r6, #24
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	d501      	bpl.n	80063d0 <_printf_i+0x1cc>
 80063cc:	6019      	str	r1, [r3, #0]
 80063ce:	e002      	b.n	80063d6 <_printf_i+0x1d2>
 80063d0:	0670      	lsls	r0, r6, #25
 80063d2:	d5fb      	bpl.n	80063cc <_printf_i+0x1c8>
 80063d4:	8019      	strh	r1, [r3, #0]
 80063d6:	2300      	movs	r3, #0
 80063d8:	6123      	str	r3, [r4, #16]
 80063da:	4615      	mov	r5, r2
 80063dc:	e7ba      	b.n	8006354 <_printf_i+0x150>
 80063de:	682b      	ldr	r3, [r5, #0]
 80063e0:	1d1a      	adds	r2, r3, #4
 80063e2:	602a      	str	r2, [r5, #0]
 80063e4:	681d      	ldr	r5, [r3, #0]
 80063e6:	6862      	ldr	r2, [r4, #4]
 80063e8:	2100      	movs	r1, #0
 80063ea:	4628      	mov	r0, r5
 80063ec:	f7f9 ff78 	bl	80002e0 <memchr>
 80063f0:	b108      	cbz	r0, 80063f6 <_printf_i+0x1f2>
 80063f2:	1b40      	subs	r0, r0, r5
 80063f4:	6060      	str	r0, [r4, #4]
 80063f6:	6863      	ldr	r3, [r4, #4]
 80063f8:	6123      	str	r3, [r4, #16]
 80063fa:	2300      	movs	r3, #0
 80063fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006400:	e7a8      	b.n	8006354 <_printf_i+0x150>
 8006402:	6923      	ldr	r3, [r4, #16]
 8006404:	462a      	mov	r2, r5
 8006406:	4649      	mov	r1, r9
 8006408:	4640      	mov	r0, r8
 800640a:	47d0      	blx	sl
 800640c:	3001      	adds	r0, #1
 800640e:	d0ab      	beq.n	8006368 <_printf_i+0x164>
 8006410:	6823      	ldr	r3, [r4, #0]
 8006412:	079b      	lsls	r3, r3, #30
 8006414:	d413      	bmi.n	800643e <_printf_i+0x23a>
 8006416:	68e0      	ldr	r0, [r4, #12]
 8006418:	9b03      	ldr	r3, [sp, #12]
 800641a:	4298      	cmp	r0, r3
 800641c:	bfb8      	it	lt
 800641e:	4618      	movlt	r0, r3
 8006420:	e7a4      	b.n	800636c <_printf_i+0x168>
 8006422:	2301      	movs	r3, #1
 8006424:	4632      	mov	r2, r6
 8006426:	4649      	mov	r1, r9
 8006428:	4640      	mov	r0, r8
 800642a:	47d0      	blx	sl
 800642c:	3001      	adds	r0, #1
 800642e:	d09b      	beq.n	8006368 <_printf_i+0x164>
 8006430:	3501      	adds	r5, #1
 8006432:	68e3      	ldr	r3, [r4, #12]
 8006434:	9903      	ldr	r1, [sp, #12]
 8006436:	1a5b      	subs	r3, r3, r1
 8006438:	42ab      	cmp	r3, r5
 800643a:	dcf2      	bgt.n	8006422 <_printf_i+0x21e>
 800643c:	e7eb      	b.n	8006416 <_printf_i+0x212>
 800643e:	2500      	movs	r5, #0
 8006440:	f104 0619 	add.w	r6, r4, #25
 8006444:	e7f5      	b.n	8006432 <_printf_i+0x22e>
 8006446:	bf00      	nop
 8006448:	08006b15 	.word	0x08006b15
 800644c:	08006b26 	.word	0x08006b26

08006450 <_sbrk_r>:
 8006450:	b538      	push	{r3, r4, r5, lr}
 8006452:	4d06      	ldr	r5, [pc, #24]	; (800646c <_sbrk_r+0x1c>)
 8006454:	2300      	movs	r3, #0
 8006456:	4604      	mov	r4, r0
 8006458:	4608      	mov	r0, r1
 800645a:	602b      	str	r3, [r5, #0]
 800645c:	f7fa fd2a 	bl	8000eb4 <_sbrk>
 8006460:	1c43      	adds	r3, r0, #1
 8006462:	d102      	bne.n	800646a <_sbrk_r+0x1a>
 8006464:	682b      	ldr	r3, [r5, #0]
 8006466:	b103      	cbz	r3, 800646a <_sbrk_r+0x1a>
 8006468:	6023      	str	r3, [r4, #0]
 800646a:	bd38      	pop	{r3, r4, r5, pc}
 800646c:	24000180 	.word	0x24000180

08006470 <__sread>:
 8006470:	b510      	push	{r4, lr}
 8006472:	460c      	mov	r4, r1
 8006474:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006478:	f000 fab2 	bl	80069e0 <_read_r>
 800647c:	2800      	cmp	r0, #0
 800647e:	bfab      	itete	ge
 8006480:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006482:	89a3      	ldrhlt	r3, [r4, #12]
 8006484:	181b      	addge	r3, r3, r0
 8006486:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800648a:	bfac      	ite	ge
 800648c:	6563      	strge	r3, [r4, #84]	; 0x54
 800648e:	81a3      	strhlt	r3, [r4, #12]
 8006490:	bd10      	pop	{r4, pc}

08006492 <__swrite>:
 8006492:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006496:	461f      	mov	r7, r3
 8006498:	898b      	ldrh	r3, [r1, #12]
 800649a:	05db      	lsls	r3, r3, #23
 800649c:	4605      	mov	r5, r0
 800649e:	460c      	mov	r4, r1
 80064a0:	4616      	mov	r6, r2
 80064a2:	d505      	bpl.n	80064b0 <__swrite+0x1e>
 80064a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064a8:	2302      	movs	r3, #2
 80064aa:	2200      	movs	r2, #0
 80064ac:	f000 f9c8 	bl	8006840 <_lseek_r>
 80064b0:	89a3      	ldrh	r3, [r4, #12]
 80064b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80064b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80064ba:	81a3      	strh	r3, [r4, #12]
 80064bc:	4632      	mov	r2, r6
 80064be:	463b      	mov	r3, r7
 80064c0:	4628      	mov	r0, r5
 80064c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80064c6:	f000 b869 	b.w	800659c <_write_r>

080064ca <__sseek>:
 80064ca:	b510      	push	{r4, lr}
 80064cc:	460c      	mov	r4, r1
 80064ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064d2:	f000 f9b5 	bl	8006840 <_lseek_r>
 80064d6:	1c43      	adds	r3, r0, #1
 80064d8:	89a3      	ldrh	r3, [r4, #12]
 80064da:	bf15      	itete	ne
 80064dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80064de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80064e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80064e6:	81a3      	strheq	r3, [r4, #12]
 80064e8:	bf18      	it	ne
 80064ea:	81a3      	strhne	r3, [r4, #12]
 80064ec:	bd10      	pop	{r4, pc}

080064ee <__sclose>:
 80064ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064f2:	f000 b8d3 	b.w	800669c <_close_r>
	...

080064f8 <__swbuf_r>:
 80064f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064fa:	460e      	mov	r6, r1
 80064fc:	4614      	mov	r4, r2
 80064fe:	4605      	mov	r5, r0
 8006500:	b118      	cbz	r0, 800650a <__swbuf_r+0x12>
 8006502:	6983      	ldr	r3, [r0, #24]
 8006504:	b90b      	cbnz	r3, 800650a <__swbuf_r+0x12>
 8006506:	f7ff fb81 	bl	8005c0c <__sinit>
 800650a:	4b21      	ldr	r3, [pc, #132]	; (8006590 <__swbuf_r+0x98>)
 800650c:	429c      	cmp	r4, r3
 800650e:	d12b      	bne.n	8006568 <__swbuf_r+0x70>
 8006510:	686c      	ldr	r4, [r5, #4]
 8006512:	69a3      	ldr	r3, [r4, #24]
 8006514:	60a3      	str	r3, [r4, #8]
 8006516:	89a3      	ldrh	r3, [r4, #12]
 8006518:	071a      	lsls	r2, r3, #28
 800651a:	d52f      	bpl.n	800657c <__swbuf_r+0x84>
 800651c:	6923      	ldr	r3, [r4, #16]
 800651e:	b36b      	cbz	r3, 800657c <__swbuf_r+0x84>
 8006520:	6923      	ldr	r3, [r4, #16]
 8006522:	6820      	ldr	r0, [r4, #0]
 8006524:	1ac0      	subs	r0, r0, r3
 8006526:	6963      	ldr	r3, [r4, #20]
 8006528:	b2f6      	uxtb	r6, r6
 800652a:	4283      	cmp	r3, r0
 800652c:	4637      	mov	r7, r6
 800652e:	dc04      	bgt.n	800653a <__swbuf_r+0x42>
 8006530:	4621      	mov	r1, r4
 8006532:	4628      	mov	r0, r5
 8006534:	f000 f948 	bl	80067c8 <_fflush_r>
 8006538:	bb30      	cbnz	r0, 8006588 <__swbuf_r+0x90>
 800653a:	68a3      	ldr	r3, [r4, #8]
 800653c:	3b01      	subs	r3, #1
 800653e:	60a3      	str	r3, [r4, #8]
 8006540:	6823      	ldr	r3, [r4, #0]
 8006542:	1c5a      	adds	r2, r3, #1
 8006544:	6022      	str	r2, [r4, #0]
 8006546:	701e      	strb	r6, [r3, #0]
 8006548:	6963      	ldr	r3, [r4, #20]
 800654a:	3001      	adds	r0, #1
 800654c:	4283      	cmp	r3, r0
 800654e:	d004      	beq.n	800655a <__swbuf_r+0x62>
 8006550:	89a3      	ldrh	r3, [r4, #12]
 8006552:	07db      	lsls	r3, r3, #31
 8006554:	d506      	bpl.n	8006564 <__swbuf_r+0x6c>
 8006556:	2e0a      	cmp	r6, #10
 8006558:	d104      	bne.n	8006564 <__swbuf_r+0x6c>
 800655a:	4621      	mov	r1, r4
 800655c:	4628      	mov	r0, r5
 800655e:	f000 f933 	bl	80067c8 <_fflush_r>
 8006562:	b988      	cbnz	r0, 8006588 <__swbuf_r+0x90>
 8006564:	4638      	mov	r0, r7
 8006566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006568:	4b0a      	ldr	r3, [pc, #40]	; (8006594 <__swbuf_r+0x9c>)
 800656a:	429c      	cmp	r4, r3
 800656c:	d101      	bne.n	8006572 <__swbuf_r+0x7a>
 800656e:	68ac      	ldr	r4, [r5, #8]
 8006570:	e7cf      	b.n	8006512 <__swbuf_r+0x1a>
 8006572:	4b09      	ldr	r3, [pc, #36]	; (8006598 <__swbuf_r+0xa0>)
 8006574:	429c      	cmp	r4, r3
 8006576:	bf08      	it	eq
 8006578:	68ec      	ldreq	r4, [r5, #12]
 800657a:	e7ca      	b.n	8006512 <__swbuf_r+0x1a>
 800657c:	4621      	mov	r1, r4
 800657e:	4628      	mov	r0, r5
 8006580:	f000 f81e 	bl	80065c0 <__swsetup_r>
 8006584:	2800      	cmp	r0, #0
 8006586:	d0cb      	beq.n	8006520 <__swbuf_r+0x28>
 8006588:	f04f 37ff 	mov.w	r7, #4294967295
 800658c:	e7ea      	b.n	8006564 <__swbuf_r+0x6c>
 800658e:	bf00      	nop
 8006590:	08006ac4 	.word	0x08006ac4
 8006594:	08006ae4 	.word	0x08006ae4
 8006598:	08006aa4 	.word	0x08006aa4

0800659c <_write_r>:
 800659c:	b538      	push	{r3, r4, r5, lr}
 800659e:	4d07      	ldr	r5, [pc, #28]	; (80065bc <_write_r+0x20>)
 80065a0:	4604      	mov	r4, r0
 80065a2:	4608      	mov	r0, r1
 80065a4:	4611      	mov	r1, r2
 80065a6:	2200      	movs	r2, #0
 80065a8:	602a      	str	r2, [r5, #0]
 80065aa:	461a      	mov	r2, r3
 80065ac:	f7fa fc31 	bl	8000e12 <_write>
 80065b0:	1c43      	adds	r3, r0, #1
 80065b2:	d102      	bne.n	80065ba <_write_r+0x1e>
 80065b4:	682b      	ldr	r3, [r5, #0]
 80065b6:	b103      	cbz	r3, 80065ba <_write_r+0x1e>
 80065b8:	6023      	str	r3, [r4, #0]
 80065ba:	bd38      	pop	{r3, r4, r5, pc}
 80065bc:	24000180 	.word	0x24000180

080065c0 <__swsetup_r>:
 80065c0:	4b32      	ldr	r3, [pc, #200]	; (800668c <__swsetup_r+0xcc>)
 80065c2:	b570      	push	{r4, r5, r6, lr}
 80065c4:	681d      	ldr	r5, [r3, #0]
 80065c6:	4606      	mov	r6, r0
 80065c8:	460c      	mov	r4, r1
 80065ca:	b125      	cbz	r5, 80065d6 <__swsetup_r+0x16>
 80065cc:	69ab      	ldr	r3, [r5, #24]
 80065ce:	b913      	cbnz	r3, 80065d6 <__swsetup_r+0x16>
 80065d0:	4628      	mov	r0, r5
 80065d2:	f7ff fb1b 	bl	8005c0c <__sinit>
 80065d6:	4b2e      	ldr	r3, [pc, #184]	; (8006690 <__swsetup_r+0xd0>)
 80065d8:	429c      	cmp	r4, r3
 80065da:	d10f      	bne.n	80065fc <__swsetup_r+0x3c>
 80065dc:	686c      	ldr	r4, [r5, #4]
 80065de:	89a3      	ldrh	r3, [r4, #12]
 80065e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80065e4:	0719      	lsls	r1, r3, #28
 80065e6:	d42c      	bmi.n	8006642 <__swsetup_r+0x82>
 80065e8:	06dd      	lsls	r5, r3, #27
 80065ea:	d411      	bmi.n	8006610 <__swsetup_r+0x50>
 80065ec:	2309      	movs	r3, #9
 80065ee:	6033      	str	r3, [r6, #0]
 80065f0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80065f4:	81a3      	strh	r3, [r4, #12]
 80065f6:	f04f 30ff 	mov.w	r0, #4294967295
 80065fa:	e03e      	b.n	800667a <__swsetup_r+0xba>
 80065fc:	4b25      	ldr	r3, [pc, #148]	; (8006694 <__swsetup_r+0xd4>)
 80065fe:	429c      	cmp	r4, r3
 8006600:	d101      	bne.n	8006606 <__swsetup_r+0x46>
 8006602:	68ac      	ldr	r4, [r5, #8]
 8006604:	e7eb      	b.n	80065de <__swsetup_r+0x1e>
 8006606:	4b24      	ldr	r3, [pc, #144]	; (8006698 <__swsetup_r+0xd8>)
 8006608:	429c      	cmp	r4, r3
 800660a:	bf08      	it	eq
 800660c:	68ec      	ldreq	r4, [r5, #12]
 800660e:	e7e6      	b.n	80065de <__swsetup_r+0x1e>
 8006610:	0758      	lsls	r0, r3, #29
 8006612:	d512      	bpl.n	800663a <__swsetup_r+0x7a>
 8006614:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006616:	b141      	cbz	r1, 800662a <__swsetup_r+0x6a>
 8006618:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800661c:	4299      	cmp	r1, r3
 800661e:	d002      	beq.n	8006626 <__swsetup_r+0x66>
 8006620:	4630      	mov	r0, r6
 8006622:	f000 f991 	bl	8006948 <_free_r>
 8006626:	2300      	movs	r3, #0
 8006628:	6363      	str	r3, [r4, #52]	; 0x34
 800662a:	89a3      	ldrh	r3, [r4, #12]
 800662c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006630:	81a3      	strh	r3, [r4, #12]
 8006632:	2300      	movs	r3, #0
 8006634:	6063      	str	r3, [r4, #4]
 8006636:	6923      	ldr	r3, [r4, #16]
 8006638:	6023      	str	r3, [r4, #0]
 800663a:	89a3      	ldrh	r3, [r4, #12]
 800663c:	f043 0308 	orr.w	r3, r3, #8
 8006640:	81a3      	strh	r3, [r4, #12]
 8006642:	6923      	ldr	r3, [r4, #16]
 8006644:	b94b      	cbnz	r3, 800665a <__swsetup_r+0x9a>
 8006646:	89a3      	ldrh	r3, [r4, #12]
 8006648:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800664c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006650:	d003      	beq.n	800665a <__swsetup_r+0x9a>
 8006652:	4621      	mov	r1, r4
 8006654:	4630      	mov	r0, r6
 8006656:	f000 f92b 	bl	80068b0 <__smakebuf_r>
 800665a:	89a0      	ldrh	r0, [r4, #12]
 800665c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006660:	f010 0301 	ands.w	r3, r0, #1
 8006664:	d00a      	beq.n	800667c <__swsetup_r+0xbc>
 8006666:	2300      	movs	r3, #0
 8006668:	60a3      	str	r3, [r4, #8]
 800666a:	6963      	ldr	r3, [r4, #20]
 800666c:	425b      	negs	r3, r3
 800666e:	61a3      	str	r3, [r4, #24]
 8006670:	6923      	ldr	r3, [r4, #16]
 8006672:	b943      	cbnz	r3, 8006686 <__swsetup_r+0xc6>
 8006674:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006678:	d1ba      	bne.n	80065f0 <__swsetup_r+0x30>
 800667a:	bd70      	pop	{r4, r5, r6, pc}
 800667c:	0781      	lsls	r1, r0, #30
 800667e:	bf58      	it	pl
 8006680:	6963      	ldrpl	r3, [r4, #20]
 8006682:	60a3      	str	r3, [r4, #8]
 8006684:	e7f4      	b.n	8006670 <__swsetup_r+0xb0>
 8006686:	2000      	movs	r0, #0
 8006688:	e7f7      	b.n	800667a <__swsetup_r+0xba>
 800668a:	bf00      	nop
 800668c:	24000010 	.word	0x24000010
 8006690:	08006ac4 	.word	0x08006ac4
 8006694:	08006ae4 	.word	0x08006ae4
 8006698:	08006aa4 	.word	0x08006aa4

0800669c <_close_r>:
 800669c:	b538      	push	{r3, r4, r5, lr}
 800669e:	4d06      	ldr	r5, [pc, #24]	; (80066b8 <_close_r+0x1c>)
 80066a0:	2300      	movs	r3, #0
 80066a2:	4604      	mov	r4, r0
 80066a4:	4608      	mov	r0, r1
 80066a6:	602b      	str	r3, [r5, #0]
 80066a8:	f7fa fbcf 	bl	8000e4a <_close>
 80066ac:	1c43      	adds	r3, r0, #1
 80066ae:	d102      	bne.n	80066b6 <_close_r+0x1a>
 80066b0:	682b      	ldr	r3, [r5, #0]
 80066b2:	b103      	cbz	r3, 80066b6 <_close_r+0x1a>
 80066b4:	6023      	str	r3, [r4, #0]
 80066b6:	bd38      	pop	{r3, r4, r5, pc}
 80066b8:	24000180 	.word	0x24000180

080066bc <__sflush_r>:
 80066bc:	898a      	ldrh	r2, [r1, #12]
 80066be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066c2:	4605      	mov	r5, r0
 80066c4:	0710      	lsls	r0, r2, #28
 80066c6:	460c      	mov	r4, r1
 80066c8:	d458      	bmi.n	800677c <__sflush_r+0xc0>
 80066ca:	684b      	ldr	r3, [r1, #4]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	dc05      	bgt.n	80066dc <__sflush_r+0x20>
 80066d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	dc02      	bgt.n	80066dc <__sflush_r+0x20>
 80066d6:	2000      	movs	r0, #0
 80066d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80066de:	2e00      	cmp	r6, #0
 80066e0:	d0f9      	beq.n	80066d6 <__sflush_r+0x1a>
 80066e2:	2300      	movs	r3, #0
 80066e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80066e8:	682f      	ldr	r7, [r5, #0]
 80066ea:	602b      	str	r3, [r5, #0]
 80066ec:	d032      	beq.n	8006754 <__sflush_r+0x98>
 80066ee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80066f0:	89a3      	ldrh	r3, [r4, #12]
 80066f2:	075a      	lsls	r2, r3, #29
 80066f4:	d505      	bpl.n	8006702 <__sflush_r+0x46>
 80066f6:	6863      	ldr	r3, [r4, #4]
 80066f8:	1ac0      	subs	r0, r0, r3
 80066fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80066fc:	b10b      	cbz	r3, 8006702 <__sflush_r+0x46>
 80066fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006700:	1ac0      	subs	r0, r0, r3
 8006702:	2300      	movs	r3, #0
 8006704:	4602      	mov	r2, r0
 8006706:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006708:	6a21      	ldr	r1, [r4, #32]
 800670a:	4628      	mov	r0, r5
 800670c:	47b0      	blx	r6
 800670e:	1c43      	adds	r3, r0, #1
 8006710:	89a3      	ldrh	r3, [r4, #12]
 8006712:	d106      	bne.n	8006722 <__sflush_r+0x66>
 8006714:	6829      	ldr	r1, [r5, #0]
 8006716:	291d      	cmp	r1, #29
 8006718:	d82c      	bhi.n	8006774 <__sflush_r+0xb8>
 800671a:	4a2a      	ldr	r2, [pc, #168]	; (80067c4 <__sflush_r+0x108>)
 800671c:	40ca      	lsrs	r2, r1
 800671e:	07d6      	lsls	r6, r2, #31
 8006720:	d528      	bpl.n	8006774 <__sflush_r+0xb8>
 8006722:	2200      	movs	r2, #0
 8006724:	6062      	str	r2, [r4, #4]
 8006726:	04d9      	lsls	r1, r3, #19
 8006728:	6922      	ldr	r2, [r4, #16]
 800672a:	6022      	str	r2, [r4, #0]
 800672c:	d504      	bpl.n	8006738 <__sflush_r+0x7c>
 800672e:	1c42      	adds	r2, r0, #1
 8006730:	d101      	bne.n	8006736 <__sflush_r+0x7a>
 8006732:	682b      	ldr	r3, [r5, #0]
 8006734:	b903      	cbnz	r3, 8006738 <__sflush_r+0x7c>
 8006736:	6560      	str	r0, [r4, #84]	; 0x54
 8006738:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800673a:	602f      	str	r7, [r5, #0]
 800673c:	2900      	cmp	r1, #0
 800673e:	d0ca      	beq.n	80066d6 <__sflush_r+0x1a>
 8006740:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006744:	4299      	cmp	r1, r3
 8006746:	d002      	beq.n	800674e <__sflush_r+0x92>
 8006748:	4628      	mov	r0, r5
 800674a:	f000 f8fd 	bl	8006948 <_free_r>
 800674e:	2000      	movs	r0, #0
 8006750:	6360      	str	r0, [r4, #52]	; 0x34
 8006752:	e7c1      	b.n	80066d8 <__sflush_r+0x1c>
 8006754:	6a21      	ldr	r1, [r4, #32]
 8006756:	2301      	movs	r3, #1
 8006758:	4628      	mov	r0, r5
 800675a:	47b0      	blx	r6
 800675c:	1c41      	adds	r1, r0, #1
 800675e:	d1c7      	bne.n	80066f0 <__sflush_r+0x34>
 8006760:	682b      	ldr	r3, [r5, #0]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d0c4      	beq.n	80066f0 <__sflush_r+0x34>
 8006766:	2b1d      	cmp	r3, #29
 8006768:	d001      	beq.n	800676e <__sflush_r+0xb2>
 800676a:	2b16      	cmp	r3, #22
 800676c:	d101      	bne.n	8006772 <__sflush_r+0xb6>
 800676e:	602f      	str	r7, [r5, #0]
 8006770:	e7b1      	b.n	80066d6 <__sflush_r+0x1a>
 8006772:	89a3      	ldrh	r3, [r4, #12]
 8006774:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006778:	81a3      	strh	r3, [r4, #12]
 800677a:	e7ad      	b.n	80066d8 <__sflush_r+0x1c>
 800677c:	690f      	ldr	r7, [r1, #16]
 800677e:	2f00      	cmp	r7, #0
 8006780:	d0a9      	beq.n	80066d6 <__sflush_r+0x1a>
 8006782:	0793      	lsls	r3, r2, #30
 8006784:	680e      	ldr	r6, [r1, #0]
 8006786:	bf08      	it	eq
 8006788:	694b      	ldreq	r3, [r1, #20]
 800678a:	600f      	str	r7, [r1, #0]
 800678c:	bf18      	it	ne
 800678e:	2300      	movne	r3, #0
 8006790:	eba6 0807 	sub.w	r8, r6, r7
 8006794:	608b      	str	r3, [r1, #8]
 8006796:	f1b8 0f00 	cmp.w	r8, #0
 800679a:	dd9c      	ble.n	80066d6 <__sflush_r+0x1a>
 800679c:	6a21      	ldr	r1, [r4, #32]
 800679e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80067a0:	4643      	mov	r3, r8
 80067a2:	463a      	mov	r2, r7
 80067a4:	4628      	mov	r0, r5
 80067a6:	47b0      	blx	r6
 80067a8:	2800      	cmp	r0, #0
 80067aa:	dc06      	bgt.n	80067ba <__sflush_r+0xfe>
 80067ac:	89a3      	ldrh	r3, [r4, #12]
 80067ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80067b2:	81a3      	strh	r3, [r4, #12]
 80067b4:	f04f 30ff 	mov.w	r0, #4294967295
 80067b8:	e78e      	b.n	80066d8 <__sflush_r+0x1c>
 80067ba:	4407      	add	r7, r0
 80067bc:	eba8 0800 	sub.w	r8, r8, r0
 80067c0:	e7e9      	b.n	8006796 <__sflush_r+0xda>
 80067c2:	bf00      	nop
 80067c4:	20400001 	.word	0x20400001

080067c8 <_fflush_r>:
 80067c8:	b538      	push	{r3, r4, r5, lr}
 80067ca:	690b      	ldr	r3, [r1, #16]
 80067cc:	4605      	mov	r5, r0
 80067ce:	460c      	mov	r4, r1
 80067d0:	b913      	cbnz	r3, 80067d8 <_fflush_r+0x10>
 80067d2:	2500      	movs	r5, #0
 80067d4:	4628      	mov	r0, r5
 80067d6:	bd38      	pop	{r3, r4, r5, pc}
 80067d8:	b118      	cbz	r0, 80067e2 <_fflush_r+0x1a>
 80067da:	6983      	ldr	r3, [r0, #24]
 80067dc:	b90b      	cbnz	r3, 80067e2 <_fflush_r+0x1a>
 80067de:	f7ff fa15 	bl	8005c0c <__sinit>
 80067e2:	4b14      	ldr	r3, [pc, #80]	; (8006834 <_fflush_r+0x6c>)
 80067e4:	429c      	cmp	r4, r3
 80067e6:	d11b      	bne.n	8006820 <_fflush_r+0x58>
 80067e8:	686c      	ldr	r4, [r5, #4]
 80067ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d0ef      	beq.n	80067d2 <_fflush_r+0xa>
 80067f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80067f4:	07d0      	lsls	r0, r2, #31
 80067f6:	d404      	bmi.n	8006802 <_fflush_r+0x3a>
 80067f8:	0599      	lsls	r1, r3, #22
 80067fa:	d402      	bmi.n	8006802 <_fflush_r+0x3a>
 80067fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80067fe:	f7ff faa3 	bl	8005d48 <__retarget_lock_acquire_recursive>
 8006802:	4628      	mov	r0, r5
 8006804:	4621      	mov	r1, r4
 8006806:	f7ff ff59 	bl	80066bc <__sflush_r>
 800680a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800680c:	07da      	lsls	r2, r3, #31
 800680e:	4605      	mov	r5, r0
 8006810:	d4e0      	bmi.n	80067d4 <_fflush_r+0xc>
 8006812:	89a3      	ldrh	r3, [r4, #12]
 8006814:	059b      	lsls	r3, r3, #22
 8006816:	d4dd      	bmi.n	80067d4 <_fflush_r+0xc>
 8006818:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800681a:	f7ff fa96 	bl	8005d4a <__retarget_lock_release_recursive>
 800681e:	e7d9      	b.n	80067d4 <_fflush_r+0xc>
 8006820:	4b05      	ldr	r3, [pc, #20]	; (8006838 <_fflush_r+0x70>)
 8006822:	429c      	cmp	r4, r3
 8006824:	d101      	bne.n	800682a <_fflush_r+0x62>
 8006826:	68ac      	ldr	r4, [r5, #8]
 8006828:	e7df      	b.n	80067ea <_fflush_r+0x22>
 800682a:	4b04      	ldr	r3, [pc, #16]	; (800683c <_fflush_r+0x74>)
 800682c:	429c      	cmp	r4, r3
 800682e:	bf08      	it	eq
 8006830:	68ec      	ldreq	r4, [r5, #12]
 8006832:	e7da      	b.n	80067ea <_fflush_r+0x22>
 8006834:	08006ac4 	.word	0x08006ac4
 8006838:	08006ae4 	.word	0x08006ae4
 800683c:	08006aa4 	.word	0x08006aa4

08006840 <_lseek_r>:
 8006840:	b538      	push	{r3, r4, r5, lr}
 8006842:	4d07      	ldr	r5, [pc, #28]	; (8006860 <_lseek_r+0x20>)
 8006844:	4604      	mov	r4, r0
 8006846:	4608      	mov	r0, r1
 8006848:	4611      	mov	r1, r2
 800684a:	2200      	movs	r2, #0
 800684c:	602a      	str	r2, [r5, #0]
 800684e:	461a      	mov	r2, r3
 8006850:	f7fa fb22 	bl	8000e98 <_lseek>
 8006854:	1c43      	adds	r3, r0, #1
 8006856:	d102      	bne.n	800685e <_lseek_r+0x1e>
 8006858:	682b      	ldr	r3, [r5, #0]
 800685a:	b103      	cbz	r3, 800685e <_lseek_r+0x1e>
 800685c:	6023      	str	r3, [r4, #0]
 800685e:	bd38      	pop	{r3, r4, r5, pc}
 8006860:	24000180 	.word	0x24000180

08006864 <__swhatbuf_r>:
 8006864:	b570      	push	{r4, r5, r6, lr}
 8006866:	460e      	mov	r6, r1
 8006868:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800686c:	2900      	cmp	r1, #0
 800686e:	b096      	sub	sp, #88	; 0x58
 8006870:	4614      	mov	r4, r2
 8006872:	461d      	mov	r5, r3
 8006874:	da08      	bge.n	8006888 <__swhatbuf_r+0x24>
 8006876:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800687a:	2200      	movs	r2, #0
 800687c:	602a      	str	r2, [r5, #0]
 800687e:	061a      	lsls	r2, r3, #24
 8006880:	d410      	bmi.n	80068a4 <__swhatbuf_r+0x40>
 8006882:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006886:	e00e      	b.n	80068a6 <__swhatbuf_r+0x42>
 8006888:	466a      	mov	r2, sp
 800688a:	f000 f8bb 	bl	8006a04 <_fstat_r>
 800688e:	2800      	cmp	r0, #0
 8006890:	dbf1      	blt.n	8006876 <__swhatbuf_r+0x12>
 8006892:	9a01      	ldr	r2, [sp, #4]
 8006894:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006898:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800689c:	425a      	negs	r2, r3
 800689e:	415a      	adcs	r2, r3
 80068a0:	602a      	str	r2, [r5, #0]
 80068a2:	e7ee      	b.n	8006882 <__swhatbuf_r+0x1e>
 80068a4:	2340      	movs	r3, #64	; 0x40
 80068a6:	2000      	movs	r0, #0
 80068a8:	6023      	str	r3, [r4, #0]
 80068aa:	b016      	add	sp, #88	; 0x58
 80068ac:	bd70      	pop	{r4, r5, r6, pc}
	...

080068b0 <__smakebuf_r>:
 80068b0:	898b      	ldrh	r3, [r1, #12]
 80068b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80068b4:	079d      	lsls	r5, r3, #30
 80068b6:	4606      	mov	r6, r0
 80068b8:	460c      	mov	r4, r1
 80068ba:	d507      	bpl.n	80068cc <__smakebuf_r+0x1c>
 80068bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80068c0:	6023      	str	r3, [r4, #0]
 80068c2:	6123      	str	r3, [r4, #16]
 80068c4:	2301      	movs	r3, #1
 80068c6:	6163      	str	r3, [r4, #20]
 80068c8:	b002      	add	sp, #8
 80068ca:	bd70      	pop	{r4, r5, r6, pc}
 80068cc:	ab01      	add	r3, sp, #4
 80068ce:	466a      	mov	r2, sp
 80068d0:	f7ff ffc8 	bl	8006864 <__swhatbuf_r>
 80068d4:	9900      	ldr	r1, [sp, #0]
 80068d6:	4605      	mov	r5, r0
 80068d8:	4630      	mov	r0, r6
 80068da:	f7ff fa57 	bl	8005d8c <_malloc_r>
 80068de:	b948      	cbnz	r0, 80068f4 <__smakebuf_r+0x44>
 80068e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068e4:	059a      	lsls	r2, r3, #22
 80068e6:	d4ef      	bmi.n	80068c8 <__smakebuf_r+0x18>
 80068e8:	f023 0303 	bic.w	r3, r3, #3
 80068ec:	f043 0302 	orr.w	r3, r3, #2
 80068f0:	81a3      	strh	r3, [r4, #12]
 80068f2:	e7e3      	b.n	80068bc <__smakebuf_r+0xc>
 80068f4:	4b0d      	ldr	r3, [pc, #52]	; (800692c <__smakebuf_r+0x7c>)
 80068f6:	62b3      	str	r3, [r6, #40]	; 0x28
 80068f8:	89a3      	ldrh	r3, [r4, #12]
 80068fa:	6020      	str	r0, [r4, #0]
 80068fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006900:	81a3      	strh	r3, [r4, #12]
 8006902:	9b00      	ldr	r3, [sp, #0]
 8006904:	6163      	str	r3, [r4, #20]
 8006906:	9b01      	ldr	r3, [sp, #4]
 8006908:	6120      	str	r0, [r4, #16]
 800690a:	b15b      	cbz	r3, 8006924 <__smakebuf_r+0x74>
 800690c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006910:	4630      	mov	r0, r6
 8006912:	f000 f889 	bl	8006a28 <_isatty_r>
 8006916:	b128      	cbz	r0, 8006924 <__smakebuf_r+0x74>
 8006918:	89a3      	ldrh	r3, [r4, #12]
 800691a:	f023 0303 	bic.w	r3, r3, #3
 800691e:	f043 0301 	orr.w	r3, r3, #1
 8006922:	81a3      	strh	r3, [r4, #12]
 8006924:	89a0      	ldrh	r0, [r4, #12]
 8006926:	4305      	orrs	r5, r0
 8006928:	81a5      	strh	r5, [r4, #12]
 800692a:	e7cd      	b.n	80068c8 <__smakebuf_r+0x18>
 800692c:	08005ba5 	.word	0x08005ba5

08006930 <__malloc_lock>:
 8006930:	4801      	ldr	r0, [pc, #4]	; (8006938 <__malloc_lock+0x8>)
 8006932:	f7ff ba09 	b.w	8005d48 <__retarget_lock_acquire_recursive>
 8006936:	bf00      	nop
 8006938:	24000174 	.word	0x24000174

0800693c <__malloc_unlock>:
 800693c:	4801      	ldr	r0, [pc, #4]	; (8006944 <__malloc_unlock+0x8>)
 800693e:	f7ff ba04 	b.w	8005d4a <__retarget_lock_release_recursive>
 8006942:	bf00      	nop
 8006944:	24000174 	.word	0x24000174

08006948 <_free_r>:
 8006948:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800694a:	2900      	cmp	r1, #0
 800694c:	d044      	beq.n	80069d8 <_free_r+0x90>
 800694e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006952:	9001      	str	r0, [sp, #4]
 8006954:	2b00      	cmp	r3, #0
 8006956:	f1a1 0404 	sub.w	r4, r1, #4
 800695a:	bfb8      	it	lt
 800695c:	18e4      	addlt	r4, r4, r3
 800695e:	f7ff ffe7 	bl	8006930 <__malloc_lock>
 8006962:	4a1e      	ldr	r2, [pc, #120]	; (80069dc <_free_r+0x94>)
 8006964:	9801      	ldr	r0, [sp, #4]
 8006966:	6813      	ldr	r3, [r2, #0]
 8006968:	b933      	cbnz	r3, 8006978 <_free_r+0x30>
 800696a:	6063      	str	r3, [r4, #4]
 800696c:	6014      	str	r4, [r2, #0]
 800696e:	b003      	add	sp, #12
 8006970:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006974:	f7ff bfe2 	b.w	800693c <__malloc_unlock>
 8006978:	42a3      	cmp	r3, r4
 800697a:	d908      	bls.n	800698e <_free_r+0x46>
 800697c:	6825      	ldr	r5, [r4, #0]
 800697e:	1961      	adds	r1, r4, r5
 8006980:	428b      	cmp	r3, r1
 8006982:	bf01      	itttt	eq
 8006984:	6819      	ldreq	r1, [r3, #0]
 8006986:	685b      	ldreq	r3, [r3, #4]
 8006988:	1949      	addeq	r1, r1, r5
 800698a:	6021      	streq	r1, [r4, #0]
 800698c:	e7ed      	b.n	800696a <_free_r+0x22>
 800698e:	461a      	mov	r2, r3
 8006990:	685b      	ldr	r3, [r3, #4]
 8006992:	b10b      	cbz	r3, 8006998 <_free_r+0x50>
 8006994:	42a3      	cmp	r3, r4
 8006996:	d9fa      	bls.n	800698e <_free_r+0x46>
 8006998:	6811      	ldr	r1, [r2, #0]
 800699a:	1855      	adds	r5, r2, r1
 800699c:	42a5      	cmp	r5, r4
 800699e:	d10b      	bne.n	80069b8 <_free_r+0x70>
 80069a0:	6824      	ldr	r4, [r4, #0]
 80069a2:	4421      	add	r1, r4
 80069a4:	1854      	adds	r4, r2, r1
 80069a6:	42a3      	cmp	r3, r4
 80069a8:	6011      	str	r1, [r2, #0]
 80069aa:	d1e0      	bne.n	800696e <_free_r+0x26>
 80069ac:	681c      	ldr	r4, [r3, #0]
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	6053      	str	r3, [r2, #4]
 80069b2:	4421      	add	r1, r4
 80069b4:	6011      	str	r1, [r2, #0]
 80069b6:	e7da      	b.n	800696e <_free_r+0x26>
 80069b8:	d902      	bls.n	80069c0 <_free_r+0x78>
 80069ba:	230c      	movs	r3, #12
 80069bc:	6003      	str	r3, [r0, #0]
 80069be:	e7d6      	b.n	800696e <_free_r+0x26>
 80069c0:	6825      	ldr	r5, [r4, #0]
 80069c2:	1961      	adds	r1, r4, r5
 80069c4:	428b      	cmp	r3, r1
 80069c6:	bf04      	itt	eq
 80069c8:	6819      	ldreq	r1, [r3, #0]
 80069ca:	685b      	ldreq	r3, [r3, #4]
 80069cc:	6063      	str	r3, [r4, #4]
 80069ce:	bf04      	itt	eq
 80069d0:	1949      	addeq	r1, r1, r5
 80069d2:	6021      	streq	r1, [r4, #0]
 80069d4:	6054      	str	r4, [r2, #4]
 80069d6:	e7ca      	b.n	800696e <_free_r+0x26>
 80069d8:	b003      	add	sp, #12
 80069da:	bd30      	pop	{r4, r5, pc}
 80069dc:	24000178 	.word	0x24000178

080069e0 <_read_r>:
 80069e0:	b538      	push	{r3, r4, r5, lr}
 80069e2:	4d07      	ldr	r5, [pc, #28]	; (8006a00 <_read_r+0x20>)
 80069e4:	4604      	mov	r4, r0
 80069e6:	4608      	mov	r0, r1
 80069e8:	4611      	mov	r1, r2
 80069ea:	2200      	movs	r2, #0
 80069ec:	602a      	str	r2, [r5, #0]
 80069ee:	461a      	mov	r2, r3
 80069f0:	f7fa f9f2 	bl	8000dd8 <_read>
 80069f4:	1c43      	adds	r3, r0, #1
 80069f6:	d102      	bne.n	80069fe <_read_r+0x1e>
 80069f8:	682b      	ldr	r3, [r5, #0]
 80069fa:	b103      	cbz	r3, 80069fe <_read_r+0x1e>
 80069fc:	6023      	str	r3, [r4, #0]
 80069fe:	bd38      	pop	{r3, r4, r5, pc}
 8006a00:	24000180 	.word	0x24000180

08006a04 <_fstat_r>:
 8006a04:	b538      	push	{r3, r4, r5, lr}
 8006a06:	4d07      	ldr	r5, [pc, #28]	; (8006a24 <_fstat_r+0x20>)
 8006a08:	2300      	movs	r3, #0
 8006a0a:	4604      	mov	r4, r0
 8006a0c:	4608      	mov	r0, r1
 8006a0e:	4611      	mov	r1, r2
 8006a10:	602b      	str	r3, [r5, #0]
 8006a12:	f7fa fa26 	bl	8000e62 <_fstat>
 8006a16:	1c43      	adds	r3, r0, #1
 8006a18:	d102      	bne.n	8006a20 <_fstat_r+0x1c>
 8006a1a:	682b      	ldr	r3, [r5, #0]
 8006a1c:	b103      	cbz	r3, 8006a20 <_fstat_r+0x1c>
 8006a1e:	6023      	str	r3, [r4, #0]
 8006a20:	bd38      	pop	{r3, r4, r5, pc}
 8006a22:	bf00      	nop
 8006a24:	24000180 	.word	0x24000180

08006a28 <_isatty_r>:
 8006a28:	b538      	push	{r3, r4, r5, lr}
 8006a2a:	4d06      	ldr	r5, [pc, #24]	; (8006a44 <_isatty_r+0x1c>)
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	4604      	mov	r4, r0
 8006a30:	4608      	mov	r0, r1
 8006a32:	602b      	str	r3, [r5, #0]
 8006a34:	f7fa fa25 	bl	8000e82 <_isatty>
 8006a38:	1c43      	adds	r3, r0, #1
 8006a3a:	d102      	bne.n	8006a42 <_isatty_r+0x1a>
 8006a3c:	682b      	ldr	r3, [r5, #0]
 8006a3e:	b103      	cbz	r3, 8006a42 <_isatty_r+0x1a>
 8006a40:	6023      	str	r3, [r4, #0]
 8006a42:	bd38      	pop	{r3, r4, r5, pc}
 8006a44:	24000180 	.word	0x24000180

08006a48 <_init>:
 8006a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a4a:	bf00      	nop
 8006a4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a4e:	bc08      	pop	{r3}
 8006a50:	469e      	mov	lr, r3
 8006a52:	4770      	bx	lr

08006a54 <_fini>:
 8006a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a56:	bf00      	nop
 8006a58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a5a:	bc08      	pop	{r3}
 8006a5c:	469e      	mov	lr, r3
 8006a5e:	4770      	bx	lr
